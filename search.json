[{"path":"https://strengejacke.github.io/ggeffects/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 ggeffects authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://strengejacke.github.io/ggeffects/articles/content.html","id":"general-introductions-into-the-ggeffects-package","dir":"Articles","previous_headings":"","what":"General introductions into the ggeffects package","title":"Documentation of the ggeffects package","text":"Adjusted Predictions Regression Models Adjusted Predictions Specific Values Adjusted Predictions Random Effects Models (Cluster) Robust Standard Errors","code":""},{"path":"https://strengejacke.github.io/ggeffects/articles/content.html","id":"interpretation-and-significance-testing","dir":"Articles","previous_headings":"","what":"Interpretation and Significance Testing","title":"Documentation of the ggeffects package","text":"Contrasts Pairwise Comparisons Floodlight Spotlight Analysis (Johnson-Neyman Intervals) Contrasts Pairwise Comparisons GLM Contrasts Pairwise Comparisons Zero-Inflation Models Different Backends Pairwise Comparisons Adding Partial Residuals Effects Plots","code":""},{"path":"https://strengejacke.github.io/ggeffects/articles/content.html","id":"creating-and-customizing-plots-and-tables","dir":"Articles","previous_headings":"","what":"Creating and customizing plots and tables","title":"Documentation of the ggeffects package","text":"Plotting Adjusted Predictions Customize Plot Appearance Customize Table Appearance","code":""},{"path":"https://strengejacke.github.io/ggeffects/articles/content.html","id":"case-studies","dir":"Articles","previous_headings":"","what":"Case Studies","title":"Documentation of the ggeffects package","text":"Simple Workflow using Logistic Regression Logistic Mixed Effects Model Interaction Term Intersectionality Analysis using MAIHDA Framework Comparison ggeffects marginaleffects","code":""},{"path":"https://strengejacke.github.io/ggeffects/articles/content.html","id":"technical-details","dir":"Articles","previous_headings":"","what":"Technical details","title":"Documentation of the ggeffects package","text":"Adding class-methods ggeffects Difference Marginalization Methods Different Output Stata ggeffects","code":""},{"path":"https://strengejacke.github.io/ggeffects/articles/ggeffects.html","id":"aims-of-the-ggeffects-package","dir":"Articles","previous_headings":"","what":"Aims of the ggeffects-package","title":"ggeffects: Marginal Means And Adjusted Predictions Of Regression Models","text":"fitting model, useful generate model-based estimates (expected values, adjusted predictions) response variable different combinations predictor values. estimates can used make inferences relationships variables - adjusted predictions tell : expected ouctome certain values levels predictors? Even complex models, visualization marginal means adjusted predictions far easier understand allows intuitively get idea predictors outcome associated. three major goals can achieve ggeffects: computing marginal means adjusted predictions, testing predictions statistical significance, creating figures (plots). basically need workflow : predict_response(), test_predictions() plot(). aim  ggeffects-package  understand model look predictors associated outcome. achieved calculating adjusted predictions, using  predict_response()  function. predict_response() estimates outcome meaningful values predictors interest (-called  focal terms ). interpretation results, conclusion can drawn, also depend non-focal terms handled. controlled  margin argument. syntax easy intuitive: Just provide model object, specify focal terms  terms  argument, optionally specify  margin  argument. works simple effects well complex interaction effects.","code":""},{"path":"https://strengejacke.github.io/ggeffects/articles/ggeffects.html","id":"what-ggeffects-does","dir":"Articles","previous_headings":"Aims of the ggeffects-package","what":"What ggeffects does","title":"ggeffects: Marginal Means And Adjusted Predictions Of Regression Models","text":"ggeffects computes marginal means adjusted predictions mean (MEM), representative values (MER) averaged across predictors (called focal terms) statistical models. result returned data frame consistent structure, especially use ggplot. least one focal term needs specified effects computed. also possible compute adjusted predictions focal terms, grouped levels another model’s predictor. package also allows plotting adjusted predictions two-, three- four-way-interactions, specific values focal term . Examples shown .","code":""},{"path":"https://strengejacke.github.io/ggeffects/articles/ggeffects.html","id":"how-to-use-the-ggeffects-package-the-main-function","dir":"Articles","previous_headings":"Aims of the ggeffects-package","what":"How to use the ggeffects-package: The main function","title":"ggeffects: Marginal Means And Adjusted Predictions Of Regression Models","text":"predict_response() actually wrapper around three “workhorse” functions, ggpredict(), ggemmeans() ggaverage(). Depending value margin argument, predict_response() calls one functions, different arguments. margin argument indicates marginalize non-focal predictors, .e. variables specified terms. important know, question like answer. See following options margin argument question answered option: \"mean_reference\" \"mean_mode\": \"mean_reference\" calls ggpredict(), .e. non-focal predictors set mean (numeric variables), reference level (factors), “common” value (mode) case character vectors. \"mean_mode\" calls ggpredict(typical = c(numeric = \"mean\", factor = \"mode\")), .e. non-focal predictors set mean (numeric variables) mode (factors, “common” value case character vectors). Predictions based \"mean_reference\" \"mean_mode\" represent rather “theoretical” view data, necessarily exactly reflect characteristics sample. helps answer question, “predicted (: expected) value response meaningful values levels focal terms ‘typical’ observation data?”, ‘typical’ refers certain characteristics remaining predictors. \"marginalmeans\": calls ggemmeans(), .e. non-focal predictors set mean (numeric variables) marginalized levels “values” factors character vectors. Marginalizing factor levels non-focal terms computes kind “weighted average” values terms hold constant. Thus, non-focal categorical terms conditioned “weighted averages” levels. different weighting options can chosen weights argument. \"marginalmeans\" comes closer sample, takes possible values levels non-focal predictors account. answer thr question, “predicted (: expected) value response meaningful values levels focal terms ‘average’ observation data?”. refers randomly picking subject sample result get average. \"empirical\" (aliases, \"counterfactual\" \"average\"): calls ggaverage(), .e. non-focal predictors marginalized observations sample. response predicted subject data predicted values averaged across subjects, aggregated/grouped focal terms. particular, averaging applied counterfactual predictions (Dickerman Hernan 2020). detailed description vignette. \"empirical\"probably “realistic” approach, insofar results can also transferred contexts. answers question, “predicted (: expected) value response meaningful values levels focal terms ‘average’ observation population?”. refer actual data sample, also “” data, data different population. “counterfactual” refers . can set default-option margin argument via options(), e.g. options(ggeffects_margin = \"empirical\"), don’t specify “default” marginalization method time call predict_response(). Use options(ggeffects_margin = NULL) remove setting. condition argument can used fix non-focal terms specific values.","code":""},{"path":[]},{"path":"https://strengejacke.github.io/ggeffects/articles/ggeffects.html","id":"predicting-the-outcome","dir":"Articles","previous_headings":"Aims of the ggeffects-package > Short technical note","what":"Predicting the outcome","title":"ggeffects: Marginal Means And Adjusted Predictions Of Regression Models","text":"default, predict_response() always returns predicted values response model (response distribution Bayesian models).","code":""},{"path":"https://strengejacke.github.io/ggeffects/articles/ggeffects.html","id":"confidence-intervals","dir":"Articles","previous_headings":"Aims of the ggeffects-package > Short technical note","what":"Confidence intervals","title":"ggeffects: Marginal Means And Adjusted Predictions Of Regression Models","text":"Typically, predict_response() (ggpredict()) returns confidence intervals based standard errors returned predict()-function, assuming normal distribution (+/- 1.96 * SE) resp. Student’s t-distribuion (degrees freedom available). predict() certain model object return standard errors (example, merMod-objects), calculated manually, following steps: matrix-multiply X parameter vector B get predictions, extract variance-covariance matrix V parameters compute XVX' get variance-covariance matrix predictions. square-root diagonal matrix represent standard errors predictions, multiplied critical test-statistic value (e.g., ~1.96 normal distribuion) confidence intervals.","code":""},{"path":"https://strengejacke.github.io/ggeffects/articles/ggeffects.html","id":"consistent-data-frame-structure","dir":"Articles","previous_headings":"Aims of the ggeffects-package","what":"Consistent data frame structure","title":"ggeffects: Marginal Means And Adjusted Predictions Of Regression Models","text":"returned data frames always , consistent structure column names, ’s easy create ggplot-plots without need re-write arguments mapped ggplot-call. x predicted values x- y-axis. conf.low conf.high used ymin ymax aesthetics ribbons add confidence bands plot. group can used grouping-aesthetics, faceting. original variable names desired column names, .data.frame() method objects class ggeffects, terms_to_colnames argument, use variable names column names instead standardized names \"x\" etc. examples shown mostly use ggplot2-code plots, however, also plot()-method, described vignette Plotting Adjusted Predictions.","code":""},{"path":"https://strengejacke.github.io/ggeffects/articles/ggeffects.html","id":"adjusted-predictions-at-the-mean","dir":"Articles","previous_headings":"","what":"Adjusted predictions at the mean","title":"ggeffects: Marginal Means And Adjusted Predictions Of Regression Models","text":"predict_response() computes predicted values possible levels values model’s predictors defined focal terms. simplest case, fitted model passed first argument, focal term second argument. Use raw name variable terms-argument - don’t need write things like poly(term, 3) (term^2) terms-argument. can see, predict_response() (lower-level functions ggpredict(), ggeffect(), ggaverage() ggemmeans()) nice print() method, takes care printing many rows (always equally spaced range values, including minimum maximum value term question) giving extra information. especially useful predicted values shown depending levels terms (see ). output shows predicted values response value term c12hour. data already shape ggplot:","code":"library(ggeffects) data(efc, package = \"ggeffects\") fit <- lm(barthtot ~ c12hour + neg_c_7 + c161sex + c172code, data = efc)  predict_response(fit, terms = \"c12hour\") #> # Predicted values of Total score BARTHEL INDEX #>  #> c12hour | Predicted |       95% CI #> ---------------------------------- #>       0 |     75.44 | 73.25, 77.63 #>      20 |     70.38 | 68.56, 72.19 #>      45 |     64.05 | 62.39, 65.70 #>      65 |     58.98 | 57.15, 60.80 #>      85 |     53.91 | 51.71, 56.12 #>     105 |     48.85 | 46.14, 51.55 #>     125 |     43.78 | 40.51, 47.05 #>     170 |     32.38 | 27.73, 37.04 #>  #> Adjusted for: #> *  neg_c_7 = 11.84 #> *  c161sex =  1.76 #> * c172code =  1.97 library(ggplot2) theme_set(theme_bw())  mydf <- predict_response(fit, terms = \"c12hour\") ggplot(mydf, aes(x, predicted)) + geom_line()"},{"path":"https://strengejacke.github.io/ggeffects/articles/ggeffects.html","id":"adjusted-predictions-at-the-mean-by-other-predictors-levels","dir":"Articles","previous_headings":"","what":"Adjusted predictions at the mean by other predictors’ levels","title":"ggeffects: Marginal Means And Adjusted Predictions Of Regression Models","text":"terms argument accepts four model terms, second fourth terms indicate grouping levels. allows predictions term question different levels values focal terms: Creating ggplot pretty straightforward: colour aesthetics mapped group column:  Another focal term stratify result create another column named facet, - name implies - might used create facted plot:  Finally, third differentation can defined, creating another column named panel. cases, may create multiple plots (value panel). ggeffects takes care use plot() automatically creates integrated plot panels one figure.","code":"predict_response(fit, terms = c(\"c12hour\", \"c172code\")) #> # Predicted values of Total score BARTHEL INDEX #>  #> c172code: low level of education #>  #> c12hour | Predicted |       95% CI #> ---------------------------------- #>       0 |     74.75 | 71.26, 78.23 #>      30 |     67.15 | 64.03, 70.26 #>      55 |     60.81 | 57.77, 63.86 #>      85 |     53.22 | 49.95, 56.48 #>     115 |     45.62 | 41.86, 49.37 #>     170 |     31.69 | 26.59, 36.78 #>  #> c172code: intermediate level of education #>  #> c12hour | Predicted |       95% CI #> ---------------------------------- #>       0 |     75.46 | 73.28, 77.65 #>      30 |     67.87 | 66.16, 69.57 #>      55 |     61.53 | 59.82, 63.25 #>      85 |     53.93 | 51.72, 56.14 #>     115 |     46.34 | 43.35, 49.32 #>     170 |     32.40 | 27.74, 37.07 #>  #> c172code: high level of education #>  #> c12hour | Predicted |       95% CI #> ---------------------------------- #>       0 |     76.18 | 72.81, 79.55 #>      30 |     68.58 | 65.41, 71.76 #>      55 |     62.25 | 59.00, 65.50 #>      85 |     54.65 | 51.03, 58.27 #>     115 |     47.05 | 42.85, 51.26 #>     170 |     33.12 | 27.50, 38.74 #>  #> Adjusted for: #> * neg_c_7 = 11.84 #> * c161sex =  1.76 mydf <- predict_response(fit, terms = c(\"c12hour\", \"c172code\")) ggplot(mydf, aes(x, predicted, colour = group)) + geom_line() mydf <- predict_response(fit, terms = c(\"c12hour\", \"c172code\", \"c161sex\")) # print a more compact table print(mydf, collapse_tables = TRUE) #> # Predicted values of Total score BARTHEL INDEX #>  #> c12hour |                        c172code |    c161sex | Predicted |       95% CI #> --------------------------------------------------------------------------------- #>       0 |          low level of education |   [1] Male |     73.95 | 69.35, 78.56 #>      45 |                                 |            |     62.56 | 58.22, 66.89 #>      85 |                                 |            |     52.42 | 47.89, 56.96 #>     170 |                                 |            |     30.89 | 24.84, 36.95 #>       0 |                                 | [2] Female |     75.00 | 71.40, 78.59 #>      45 |                                 |            |     63.60 | 60.45, 66.74 #>      85 |                                 |            |     53.46 | 50.12, 56.80 #>     170 |                                 |            |     31.93 | 26.82, 37.05 #>       0 | intermediate level of education |   [1] Male |     74.67 | 71.05, 78.29 #>      45 |                                 |            |     63.27 | 59.88, 66.67 #>      85 |                                 |            |     53.14 | 49.39, 56.89 #>     170 |                                 |            |     31.61 | 25.97, 37.25 #>       0 |                                 | [2] Female |     75.71 | 73.31, 78.12 #>      45 |                                 |            |     64.32 | 62.41, 66.22 #>      85 |                                 |            |     54.18 | 51.81, 56.56 #>     170 |                                 |            |     32.65 | 27.94, 37.37 #>       0 |         high level of education |   [1] Male |     75.39 | 71.03, 79.75 #>      45 |                                 |            |     63.99 | 59.72, 68.26 #>      85 |                                 |            |     53.86 | 49.22, 58.50 #>     170 |                                 |            |     32.33 | 25.94, 38.72 #>       0 |                                 | [2] Female |     76.43 | 72.88, 79.98 #>      45 |                                 |            |     65.03 | 61.67, 68.39 #>      85 |                                 |            |     54.90 | 51.15, 58.65 #>     170 |                                 |            |     33.37 | 27.69, 39.05 #>  #> Adjusted for: #> * neg_c_7 = 11.84 ggplot(mydf, aes(x, predicted, colour = group)) +   geom_line() +   facet_wrap(~facet) mydf <- predict_response(fit, terms = c(\"c12hour\", \"c172code\", \"c161sex\", \"neg_c_7\")) plot(mydf) + theme(legend.position = \"bottom\")"},{"path":"https://strengejacke.github.io/ggeffects/articles/ggeffects.html","id":"adjusted-predictions-for-each-model-term","dir":"Articles","previous_headings":"","what":"Adjusted predictions for each model term","title":"ggeffects: Marginal Means And Adjusted Predictions Of Regression Models","text":"term argument either missing NULL, adjusted predictions model term calculated. result returned list, can plotted manually (using plot() function).","code":"mydf <- predict_response(fit) mydf #> $c12hour #> # Predicted values of Total score BARTHEL INDEX #>  #> c12hour | Predicted |       95% CI #> ---------------------------------- #>       0 |     75.44 | 73.25, 77.63 #>      20 |     70.38 | 68.56, 72.19 #>      45 |     64.05 | 62.39, 65.70 #>      65 |     58.98 | 57.15, 60.80 #>      85 |     53.91 | 51.71, 56.12 #>     105 |     48.85 | 46.14, 51.55 #>     125 |     43.78 | 40.51, 47.05 #>     170 |     32.38 | 27.73, 37.04 #>  #> Adjusted for: #> *  neg_c_7 = 11.84 #> *  c161sex =  1.76 #> * c172code =  1.97 #>  #> $neg_c_7 #> # Predicted values of Total score BARTHEL INDEX #>  #> neg_c_7 | Predicted |       95% CI #> ---------------------------------- #>       6 |     78.17 | 75.10, 81.23 #>       8 |     73.57 | 71.20, 75.94 #>      12 |     64.38 | 62.73, 66.04 #>      14 |     59.79 | 57.88, 61.70 #>      16 |     55.19 | 52.72, 57.67 #>      20 |     46.00 | 42.04, 49.97 #>      22 |     41.41 | 36.63, 46.20 #>      28 |     27.63 | 20.30, 34.96 #>  #> Adjusted for: #> *  c12hour = 42.20 #> *  c161sex =  1.76 #> * c172code =  1.97 #>  #> $c161sex #> # Predicted values of Total score BARTHEL INDEX #>  #> c161sex | Predicted |       95% CI #> ---------------------------------- #>       1 |     63.96 | 60.57, 67.35 #>       2 |     65.00 | 63.11, 66.90 #>  #> Adjusted for: #> *  c12hour = 42.20 #> *  neg_c_7 = 11.84 #> * c172code =  1.97 #>  #> $c172code #> # Predicted values of Total score BARTHEL INDEX #>  #> c172code | Predicted |       95% CI #> ----------------------------------- #>        1 |     64.06 | 61.01, 67.11 #>        2 |     64.78 | 63.12, 66.43 #>        3 |     65.49 | 62.31, 68.68 #>  #> Adjusted for: #> * c12hour = 42.20 #> * neg_c_7 = 11.84 #> * c161sex =  1.76 #>  #> attr(,\"class\") #> [1] \"ggalleffects\" \"list\"         #> attr(,\"model.name\") #> [1] \"fit\""},{"path":"https://strengejacke.github.io/ggeffects/articles/ggeffects.html","id":"two-way-three-way--and-four-way-interactions","dir":"Articles","previous_headings":"","what":"Two-Way, Three-Way- and Four-Way-Interactions","title":"ggeffects: Marginal Means And Adjusted Predictions Of Regression Models","text":"plot adjusted predictions interaction terms, simply specify terms terms argument.  Since terms argument accepts four focal terms, can also compute adjusted predictions 3-way-interaction 4-way-interaction. plot adjusted predictions three interaction terms, just like , specify three terms terms argument.  4-way-interactions rather confusing print plot. plotting, multiple plots (level fourth interaction term) plotted remaining three interaction terms. can easily done using plot()-method.","code":"data(efc, package = \"ggeffects\")  # make categorical efc$c161sex <- datawizard::to_factor(efc$c161sex)  # fit model with interaction fit <- lm(neg_c_7 ~ c12hour + barthtot * c161sex, data = efc)  # select only levels 30, 50 and 70 from continuous variable Barthel-Index mydf <- predict_response(fit, terms = c(\"barthtot [30,50,70]\", \"c161sex\")) ggplot(mydf, aes(x, predicted, colour = group)) + geom_line() # fit model with 3-way-interaction fit <- lm(neg_c_7 ~ c12hour * barthtot * c161sex, data = efc)  # select only levels 30, 50 and 70 from continuous variable Barthel-Index mydf <- predict_response(fit, terms = c(\"c12hour\", \"barthtot [30,50,70]\", \"c161sex\"))  ggplot(mydf, aes(x, predicted, colour = group)) +   geom_line() +   facet_wrap(~facet) # fit model with 4-way-interaction fit <- lm(neg_c_7 ~ c12hour * barthtot * c161sex * c172code, data = efc)  # adjusted predictions for all 4 interaction terms pr <- predict_response(fit, c(\"c12hour\", \"barthtot\", \"c161sex\", \"c172code\"))  # use plot() method, easier than own ggplot-code from scratch plot(pr, n_rows = 2) + theme(legend.position = \"bottom\")"},{"path":"https://strengejacke.github.io/ggeffects/articles/ggeffects.html","id":"polynomial-terms-and-splines","dir":"Articles","previous_headings":"","what":"Polynomial terms and splines","title":"ggeffects: Marginal Means And Adjusted Predictions Of Regression Models","text":"predict_response() also works models polynomial terms splines. Following code reproduces plot ?splines::bs:","code":"library(splines) data(women)  fm1 <- lm(weight ~ bs(height, df = 5), data = women) dat <- predict_response(fm1, \"height\")  ggplot(dat, aes(x, predicted)) +   geom_line() +   geom_point()"},{"path":"https://strengejacke.github.io/ggeffects/articles/ggeffects.html","id":"survival-models","dir":"Articles","previous_headings":"","what":"Survival models","title":"ggeffects: Marginal Means And Adjusted Predictions Of Regression Models","text":"predict_response() also supports coxph-models survival-package able either plot risk-scores (default), probabilities survival (type = \"survival\") cumulative hazards (type = \"cumulative_hazard\"). Since probabilities survival cumulative hazards changing across time, time-variable automatically used x-axis cases, terms argument needs two variables type = \"survival\" type = \"cumulative_hazard\".","code":"library(survival) data(\"lung2\") m <- coxph(Surv(time, status) ~ sex + age + ph.ecog, data = lung2)  # predicted risk-scores predict_response(m, c(\"sex\", \"ph.ecog\")) #> # Predicted risk scores #>  #> ph.ecog: good #>  #> sex    | Predicted |     95% CI #> ------------------------------- #> male   |      1.00 | 1.00, 1.00 #> female |      0.58 | 0.42, 0.81 #>  #> ph.ecog: ok #>  #> sex    | Predicted |     95% CI #> ------------------------------- #> male   |      1.51 | 1.02, 2.23 #> female |      0.87 | 0.53, 1.43 #>  #> ph.ecog: limited #>  #> sex    | Predicted |     95% CI #> ------------------------------- #> male   |      2.47 | 1.58, 3.86 #> female |      1.43 | 0.83, 2.45 #>  #> Adjusted for: #> * age = 62.42 # probability of survival predict_response(m, c(\"sex\", \"ph.ecog\"), type = \"survival\") #> # Probability of Survival #>  #> sex: male #> ph.ecog: good #>  #> time | Predicted |     95% CI #> ----------------------------- #>    1 |      1.00 | 1.00, 1.00 #>  180 |      0.78 | 0.69, 0.87 #>  276 |      0.65 | 0.54, 0.78 #> 1022 |      0.09 | 0.03, 0.26 #>  #> sex: male #> ph.ecog: ok #>  #> time | Predicted |     95% CI #> ----------------------------- #>    1 |      1.00 | 1.00, 1.00 #>  180 |      0.69 | 0.60, 0.79 #>  276 |      0.52 | 0.42, 0.64 #> 1022 |      0.02 | 0.01, 0.11 #>  #> sex: male #> ph.ecog: limited #>  #> time | Predicted |     95% CI #> ----------------------------- #>    1 |      1.00 | 1.00, 1.00 #>  180 |      0.54 | 0.42, 0.70 #>  276 |      0.34 | 0.22, 0.52 #> 1022 |      0.00 | 0.00, 0.04 #>  #> sex: female #> ph.ecog: good #>  #> time | Predicted |     95% CI #> ----------------------------- #>    1 |      1.00 | 1.00, 1.00 #>  180 |      0.87 | 0.80, 0.93 #>  276 |      0.78 | 0.68, 0.88 #> 1022 |      0.24 | 0.11, 0.51 #>  #> sex: female #> ph.ecog: ok #>  #> time | Predicted |     95% CI #> ----------------------------- #>    1 |      1.00 | 1.00, 1.00 #>  180 |      0.80 | 0.73, 0.88 #>  276 |      0.68 | 0.59, 0.79 #> 1022 |      0.12 | 0.04, 0.31 #>  #> sex: female #> ph.ecog: limited #>  #> time | Predicted |     95% CI #> ----------------------------- #>    1 |      1.00 | 1.00, 1.00 #>  180 |      0.70 | 0.59, 0.83 #>  276 |      0.53 | 0.40, 0.71 #> 1022 |      0.03 | 0.00, 0.19 #>  #> Adjusted for: #> * age = 62.42"},{"path":"https://strengejacke.github.io/ggeffects/articles/ggeffects.html","id":"labelling-the-data","dir":"Articles","previous_headings":"","what":"Labelling the data","title":"ggeffects: Marginal Means And Adjusted Predictions Of Regression Models","text":"ggeffects makes use sjlabelled-package supports labelled data. data fitted models labelled, value variable label attributes usually copied model frame stored model object. ggeffects provides various getter-functions access labels, returned character vector can used ggplot’s lab()- scale_*()-functions. get_title() - generic title plot, based model family, like “predicted values” “predicted probabilities” get_x_title() - variable label first model term terms. get_y_title() - variable label response. get_legend_title() - variable label second model term terms. get_x_labels() - value labels first model term terms. get_legend_labels() - value labels second model term terms. data frame returned predict_response() must used argument one function calls.","code":"get_x_title(mydf) #> [1] \"average number of hours of care per week\" get_y_title(mydf) #> [1] \"Negative impact with 7 items\"  ggplot(mydf, aes(x, predicted, colour = group)) +   geom_line() +   facet_wrap(~facet) +   labs(     x = get_x_title(mydf),     y = get_y_title(mydf),     colour = get_legend_title(mydf)   )"},{"path":"https://strengejacke.github.io/ggeffects/articles/ggeffects.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"ggeffects: Marginal Means And Adjusted Predictions Of Regression Models","text":"Dickerman BA, Hernan, MA. Counterfactual prediction causal inference. Eur J Epidemiol 35, 615–617 (2020).","code":""},{"path":"https://strengejacke.github.io/ggeffects/articles/introduction_comparisons_1.html","id":"hypothesis-testing-for-categorical-predictors","dir":"Articles","previous_headings":"","what":"Hypothesis testing for categorical predictors","title":"Significance Testing Of Differences Between Predictions I: Contrasts And Pairwise Comparisons","text":"reason compute adjusted predictions (estimated marginal means) help understanding relationship predictors outcome regression model. particular complex models, example, complex interaction terms, often easier understand associations looking adjusted predictions instead raw table regression coefficients. next step, often follows , see statistically significant differences. , example, differences groups, .e. levels categorical predictors whether trends differ significantly . ggeffects package provides function, test_predictions(), exactly : testing differences adjusted predictions statistical significance. usually called contrasts (pairwise) comparisons, marginal effects (difference refers one-unit change predictors). vignette shows examples use test_predictions() function test wheter differences predictions statistically significant. First, different examples pairwise comparisons shown, later see test differences--differences (emmeans package, also called interaction contrasts). Note: alias test_predictions() hypothesis_test(). can use either two function names. Contrasts pairwise comparisons can used test differences predictions different values focal terms statistically significant . useful \"group differences\" interest. test_predictions()  calculates contrasts comparisons results returned  predict_response() . possible calculate simple contrasts, pairwise comparisons, interaction contrasts (difference--differences). Use  test  argument control kind contrast comparison made. one focal terms continuous predictors, contrasts comparisons can calculated slope, linear trend predictors.","code":""},{"path":"https://strengejacke.github.io/ggeffects/articles/introduction_comparisons_1.html","id":"within-episode-do-levels-differ","dir":"Articles","previous_headings":"Hypothesis testing for categorical predictors","what":"Within episode, do levels differ?","title":"Significance Testing Of Differences Between Predictions I: Contrasts And Pairwise Comparisons","text":"start toy example, linear model two categorical predictors. interaction involved now. display simple table regression coefficients, created model_parameters() parameters package.","code":"library(ggeffects) library(parameters) library(ggplot2)  set.seed(123) n <- 200 d <- data.frame(   outcome = rnorm(n),   grp = as.factor(sample(c(\"treatment\", \"control\"), n, TRUE)),   episode = as.factor(sample(1:3, n, TRUE)),   sex = as.factor(sample(c(\"female\", \"male\"), n, TRUE, prob = c(0.4, 0.6))) ) model1 <- lm(outcome ~ grp + episode, data = d) model_parameters(model1) #> Parameter       | Coefficient |   SE |        95% CI | t(196) |     p #> --------------------------------------------------------------------- #> (Intercept)     |       -0.08 | 0.13 | [-0.33, 0.18] |  -0.60 | 0.552 #> grp [treatment] |       -0.17 | 0.13 | [-0.44, 0.09] |  -1.30 | 0.197 #> episode [2]     |        0.36 | 0.16 | [ 0.03, 0.68] |   2.18 | 0.031 #> episode [3]     |        0.10 | 0.16 | [-0.22, 0.42] |   0.62 | 0.538"},{"path":"https://strengejacke.github.io/ggeffects/articles/introduction_comparisons_1.html","id":"predictions","dir":"Articles","previous_headings":"Hypothesis testing for categorical predictors > Within episode, do levels differ?","what":"Predictions","title":"Significance Testing Of Differences Between Predictions I: Contrasts And Pairwise Comparisons","text":"Let us look adjusted predictions.  now see , instance, predicted outcome espisode = 2 0.28.","code":"my_predictions <- predict_response(model1, \"episode\") my_predictions #> # Predicted values of outcome #>  #> episode | Predicted |      95% CI #> --------------------------------- #> 1       |     -0.08 | -0.33, 0.18 #> 2       |      0.28 |  0.02, 0.54 #> 3       |      0.02 | -0.24, 0.28 #>  #> Adjusted for: #> * grp = control  plot(my_predictions)"},{"path":"https://strengejacke.github.io/ggeffects/articles/introduction_comparisons_1.html","id":"pairwise-comparisons","dir":"Articles","previous_headings":"Hypothesis testing for categorical predictors > Within episode, do levels differ?","what":"Pairwise comparisons","title":"Significance Testing Of Differences Between Predictions I: Contrasts And Pairwise Comparisons","text":"now ask whether predicted outcome episode = 1 significantly different predicted outcome episode = 2.  , use test_predictions() function. function, like predict_response(), either accepts model object first argument, followed focal predictors interest, .e. variables model contrasts pairwise comparisons calculated; can pass results predict_response() directly test_predictions(). useful want avoid specifying arguments . default, focal terms categorical, pairwise comparison performed. can specify hypothesis tests well, using test argument (defaults \"pairwise\", see ?test_predictions). now, go simpler example contrasts pairwise comparisons. quantity interest, contrast episode 1-2, see value -0.36, exactly difference predicted outcome episode = 1 (-0.08) episode = 2 (0.28). related p-value 0.031, indicating difference predicted values outcome two levels factor episode indeed statistically significant. Since terms argument test_predictions() works way predict_response(), can directly pass “representative values” via argument (details, see vignette). example, also specify levels episode directly, simplify output: simple example, contrasts episode = 2 episode = 3 episode = 1 equals coefficients regression table (applies p-values), coefficients refer difference related parameter episode reference level, episode = 1. avoid specifying arguments used call predict_response() , can also pass objects returned predict_response() directly test_predictions().","code":"# argument `test` defaults to \"pairwise\" test_predictions(model1, \"episode\") # same as test_predictions(my_predictions) #> # Pairwise comparisons #>  #> episode | Contrast |       95% CI |     p #> ----------------------------------------- #> 1-2     |    -0.36 | -0.68, -0.03 | 0.031 #> 1-3     |    -0.10 | -0.42,  0.22 | 0.538 #> 2-3     |     0.26 | -0.06,  0.58 | 0.112 test_predictions(model1, \"episode [1:2]\") #> # Pairwise comparisons #>  #> episode | Contrast |       95% CI |     p #> ----------------------------------------- #> 1-2     |    -0.36 | -0.68, -0.03 | 0.031 pred <- predict_response(model1, \"episode\") test_predictions(pred) #> # Pairwise comparisons #>  #> episode | Contrast |       95% CI |     p #> ----------------------------------------- #> 1-2     |    -0.36 | -0.68, -0.03 | 0.031 #> 1-3     |    -0.10 | -0.42,  0.22 | 0.538 #> 2-3     |     0.26 | -0.06,  0.58 | 0.112"},{"path":"https://strengejacke.github.io/ggeffects/articles/introduction_comparisons_1.html","id":"does-same-level-of-episode-differ-between-groups","dir":"Articles","previous_headings":"Hypothesis testing for categorical predictors","what":"Does same level of episode differ between groups?","title":"Significance Testing Of Differences Between Predictions I: Contrasts And Pairwise Comparisons","text":"next example includes pairwise comparison interaction two categorical predictors.","code":"model2 <- lm(outcome ~ grp * episode, data = d) model_parameters(model2) #> Parameter                     | Coefficient |   SE |        95% CI | t(194) |     p #> ----------------------------------------------------------------------------------- #> (Intercept)                   |        0.03 | 0.15 | [-0.27, 0.33] |   0.18 | 0.853 #> grp [treatment]               |       -0.42 | 0.23 | [-0.88, 0.04] |  -1.80 | 0.074 #> episode [2]                   |        0.20 | 0.22 | [-0.23, 0.63] |   0.94 | 0.350 #> episode [3]                   |       -0.07 | 0.22 | [-0.51, 0.37] |  -0.32 | 0.750 #> grp [treatment] × episode [2] |        0.36 | 0.33 | [-0.29, 1.02] |   1.09 | 0.277 #> grp [treatment] × episode [3] |        0.37 | 0.32 | [-0.27, 1.00] |   1.14 | 0.254"},{"path":"https://strengejacke.github.io/ggeffects/articles/introduction_comparisons_1.html","id":"predictions-1","dir":"Articles","previous_headings":"Hypothesis testing for categorical predictors > Does same level of episode differ between groups?","what":"Predictions","title":"Significance Testing Of Differences Between Predictions I: Contrasts And Pairwise Comparisons","text":"First, look predicted values outcome combinations involved interaction term.","code":"my_predictions <- predict_response(model2, c(\"episode\", \"grp\")) my_predictions #> # Predicted values of outcome #>  #> grp: control #>  #> episode | Predicted |       95% CI #> ---------------------------------- #> 1       |      0.03 | -0.27,  0.33 #> 2       |      0.23 | -0.08,  0.54 #> 3       |     -0.04 | -0.36,  0.28 #>  #> grp: treatment #>  #> episode | Predicted |       95% CI #> ---------------------------------- #> 1       |     -0.39 | -0.74, -0.04 #> 2       |      0.18 | -0.18,  0.53 #> 3       |     -0.09 | -0.39,  0.21  plot(my_predictions)"},{"path":"https://strengejacke.github.io/ggeffects/articles/introduction_comparisons_1.html","id":"pairwise-comparisons-1","dir":"Articles","previous_headings":"Hypothesis testing for categorical predictors > Does same level of episode differ between groups?","what":"Pairwise comparisons","title":"Significance Testing Of Differences Between Predictions I: Contrasts And Pairwise Comparisons","text":"now ask whether predicted outcome episode = 2 significantly different depending level grp? words, groups treatment control differ episode = 2?  , answer question, calculate pairwise comparisons, .e. comparison (test differences) combinations focal predictors. focal predictors ’re interested two variables used interaction. quantity interest, contrast groups treatment control episode = 2 0.06. find comparison row 8 output. can see, test_predictions() returns pairwise comparisons possible combinations factor levels focal variables. ’re interested specific comparison, two options simplify output: directly formulate comparison test. achieve , first need create overview adjusted predictions, get predict_response() test_predictions(test = NULL). pass specific values levels terms argument, predict_response().","code":"# we want \"episode = 2-2\" and \"grp = control-treatment\" test_predictions(model2, c(\"episode\", \"grp\")) #> # Pairwise comparisons #>  #> episode |                 grp | Contrast |       95% CI |     p #> --------------------------------------------------------------- #> 1-2     |     control-control |    -0.20 | -0.63,  0.23 | 0.350 #> 1-3     |     control-control |     0.07 | -0.37,  0.51 | 0.750 #> 1-1     |   control-treatment |     0.42 | -0.04,  0.88 | 0.074 #> 1-2     |   control-treatment |    -0.15 | -0.61,  0.32 | 0.529 #> 1-3     |   control-treatment |     0.12 | -0.30,  0.54 | 0.573 #> 2-3     |     control-control |     0.27 | -0.17,  0.72 | 0.225 #> 2-1     |   control-treatment |     0.62 |  0.16,  1.09 | 0.009 #> 2-2     |   control-treatment |     0.06 | -0.41,  0.52 | 0.816 #> 2-3     |   control-treatment |     0.32 | -0.10,  0.75 | 0.137 #> 3-1     |   control-treatment |     0.35 | -0.13,  0.82 | 0.150 #> 3-2     |   control-treatment |    -0.22 | -0.70,  0.26 | 0.368 #> 3-3     |   control-treatment |     0.05 | -0.39,  0.49 | 0.821 #> 1-2     | treatment-treatment |    -0.57 | -1.06, -0.07 | 0.026 #> 1-3     | treatment-treatment |    -0.30 | -0.76,  0.16 | 0.203 #> 2-3     | treatment-treatment |     0.27 | -0.19,  0.73 | 0.254"},{"path":"https://strengejacke.github.io/ggeffects/articles/introduction_comparisons_1.html","id":"option-1-directly-specify-the-comparison","dir":"Articles","previous_headings":"Hypothesis testing for categorical predictors > Does same level of episode differ between groups? > Pairwise comparisons","what":"Option 1: Directly specify the comparison","title":"Significance Testing Of Differences Between Predictions I: Contrasts And Pairwise Comparisons","text":"output, row considered one coefficient interest. groups want include comparison rows two (grp = control episode = 2) five (grp = treatment episode = 2), “quantities interest” b2 b5. null hypothesis want test whether predictions equal, .e. test = \"b2 = b5\". can now calculate desired comparison directly: Curious test works detail? test_predictions() small, convenient wrapper around predictions() slopes() great marginaleffects package. Thus, test just passed hypothesis argument functions.","code":"# adjusted predictions, compact table test_predictions(model2, c(\"episode\", \"grp\"), test = NULL) #> episode |       grp | Predicted |       95% CI |     p #> ------------------------------------------------------ #> 1       |   control |      0.03 | -0.27,  0.33 | 0.853 #> 2       |   control |      0.23 | -0.08,  0.54 | 0.139 #> 3       |   control |     -0.04 | -0.36,  0.28 | 0.793 #> 1       | treatment |     -0.39 | -0.74, -0.04 | 0.028 #> 2       | treatment |      0.18 | -0.18,  0.53 | 0.328 #> 3       | treatment |     -0.09 | -0.39,  0.21 | 0.540 # compute specific contrast directly test_predictions(model2, c(\"episode\", \"grp\"), test = \"b2 = b5\") #> Hypothesis | Contrast |      95% CI |     p #> ------------------------------------------- #> b2=b5      |     0.06 | -0.41, 0.52 | 0.816 #>  #> Tested hypothesis: episode[2],grp[control] = episode[2],grp[treatment]"},{"path":"https://strengejacke.github.io/ggeffects/articles/introduction_comparisons_1.html","id":"option-2-specify-values-or-levels","dir":"Articles","previous_headings":"Hypothesis testing for categorical predictors > Does same level of episode differ between groups? > Pairwise comparisons","what":"Option 2: Specify values or levels","title":"Significance Testing Of Differences Between Predictions I: Contrasts And Pairwise Comparisons","text":", using representative values terms argument, can also simplify output using alternative syntax: equivalent example, directly specified comparison ’re interested . However, test argument might provide flexibility case want complex comparisons. See examples .","code":"# return pairwise comparisons for specific values, in # this case for episode = 2 in both groups test_predictions(model2, c(\"episode [2]\", \"grp\")) #> # Pairwise comparisons #>  #> episode |               grp | Contrast |      95% CI |     p #> ------------------------------------------------------------ #> 2-2     | control-treatment |     0.06 | -0.41, 0.52 | 0.816"},{"path":"https://strengejacke.github.io/ggeffects/articles/introduction_comparisons_1.html","id":"do-different-episode-levels-differ-between-groups","dir":"Articles","previous_headings":"Hypothesis testing for categorical predictors","what":"Do different episode levels differ between groups?","title":"Significance Testing Of Differences Between Predictions I: Contrasts And Pairwise Comparisons","text":"can repeat steps shown test combination group levels differences.","code":""},{"path":"https://strengejacke.github.io/ggeffects/articles/introduction_comparisons_1.html","id":"pairwise-comparisons-2","dir":"Articles","previous_headings":"Hypothesis testing for categorical predictors > Do different episode levels differ between groups?","what":"Pairwise comparisons","title":"Significance Testing Of Differences Between Predictions I: Contrasts And Pairwise Comparisons","text":"instance, now ask whether predicted outcome episode = 1 treatment group significantly different predicted outcome episode = 3 control group.  contrast interested episode = 1 treatment group episode = 3 control group. predicted values rows three four (c.f. table predicted values), thus test whether \"b4 = b3\". Another way produce pairwise comparison, can reduce table predicted values providing specific values levels terms argument: episode = 1 treatment group episode = 3 control group refer now rows two three, thus also can obtain desired comparison way:","code":"test_predictions(model2, c(\"episode\", \"grp\"), test = \"b4 = b3\") #> Hypothesis | Contrast |      95% CI |     p #> ------------------------------------------- #> b4=b3      |    -0.35 | -0.82, 0.13 | 0.150 #>  #> Tested hypothesis: episode[1],grp[treatment] = episode[3],grp[control] predict_response(model2, c(\"episode [1,3]\", \"grp\")) #> # Predicted values of outcome #>  #> grp: control #>  #> episode | Predicted |       95% CI #> ---------------------------------- #> 1       |      0.03 | -0.27,  0.33 #> 3       |     -0.04 | -0.36,  0.28 #>  #> grp: treatment #>  #> episode | Predicted |       95% CI #> ---------------------------------- #> 1       |     -0.39 | -0.74, -0.04 #> 3       |     -0.09 | -0.39,  0.21 pred <- predict_response(model2, c(\"episode [1,3]\", \"grp\")) test_predictions(pred, test = \"b3 = b2\") #> Hypothesis | Contrast |      95% CI |     p #> ------------------------------------------- #> b3=b2      |    -0.35 | -0.82, 0.13 | 0.150 #>  #> Tested hypothesis: episode[1],grp[treatment] = episode[3],grp[control]"},{"path":"https://strengejacke.github.io/ggeffects/articles/introduction_comparisons_1.html","id":"does-difference-between-two-levels-of-episode-in-the-control-group-differ-from-difference-of-same-two-levels-in-the-treatment-group","dir":"Articles","previous_headings":"Hypothesis testing for categorical predictors","what":"Does difference between two levels of episode in the control group differ from difference of same two levels in the treatment group?","title":"Significance Testing Of Differences Between Predictions I: Contrasts And Pairwise Comparisons","text":"test argument also allows us compare difference--differences (aka interaction contrasts). example, difference two episode levels one group significantly different difference two episode levels group?  reminder, look table predictions : first difference episode levels 1 2 control group refer rows one two table (b1 b2). difference episode levels treatment group refer difference rows four five (b4 b5). Thus, b1 - b2 b4 - b5, null hypothesis two differences equal: test = \"(b1 - b2) = (b4 - b5)\". Interaction contrasts can also calculated specifying test = \"interaction\". case, emmeans package used backend, .e. test_predictions() called engine = \"emmeans\" (silently). Let’s replicate step--step: Predicted value outcome episode = 1 control group 0.03. Predicted value outcome episode = 2 control group 0.23. first difference -0.2 Predicted value outcome episode = 1 treatment group -0.39. Predicted value outcome episode = 2 treatment group 0.18. second difference -0.57 quantity interest difference two differences, 0.36. difference statistically significant (p = 0.277).","code":"test_predictions(model2, c(\"episode\", \"grp\"), test = NULL) #> episode |       grp | Predicted |       95% CI |     p #> ------------------------------------------------------ #> 1       |   control |      0.03 | -0.27,  0.33 | 0.853 #> 2       |   control |      0.23 | -0.08,  0.54 | 0.139 #> 3       |   control |     -0.04 | -0.36,  0.28 | 0.793 #> 1       | treatment |     -0.39 | -0.74, -0.04 | 0.028 #> 2       | treatment |      0.18 | -0.18,  0.53 | 0.328 #> 3       | treatment |     -0.09 | -0.39,  0.21 | 0.540 test_predictions(model2, c(\"episode\", \"grp\"), test = \"(b1 - b2) = (b4 - b5)\") #> Hypothesis      | Contrast |      95% CI |     p #> ------------------------------------------------ #> (b1-b2)=(b4-b5) |     0.36 | -0.29, 1.02 | 0.277 #>  #> Tested hypothesis: (episode[1],grp[control] - episode[2],grp[control]) = (episode[1],grp[treatment] - episode[2],grp[treatment]) # test = \"interaction\" always returns *all* possible interaction contrasts test_predictions(model2, c(\"episode\", \"grp\"), test = \"interaction\") #> # Interaction contrasts #>  #> episode |                   grp | Contrast |      95% CI |     p #> ---------------------------------------------------------------- #> 1-2     | control and treatment |     0.36 | -0.29, 1.02 | 0.277 #> 1-3     | control and treatment |     0.37 | -0.27, 1.00 | 0.254 #> 2-3     | control and treatment |     0.01 | -0.64, 0.65 | 0.988"},{"path":"https://strengejacke.github.io/ggeffects/articles/introduction_comparisons_1.html","id":"conclusion","dir":"Articles","previous_headings":"","what":"Conclusion","title":"Significance Testing Of Differences Between Predictions I: Contrasts And Pairwise Comparisons","text":"Thanks great marginaleffects package, now possible powerful function ggeffects allows perform next logical step calculating adjusted predictions conduct hypothesis tests contrasts pairwise comparisons. current implementation test_predictions() already covers many common use cases testing contrasts pairwise comparison, still might need sophisticated comparisons. case, recommend using marginaleffects package directly. related recommended readings vignettes Comparisons Hypothesis Tests. Go next vignette: Significance Testing Differences Predictions II: Comparisons Slopes, Floodlight Spotlight Analysis (Johnson-Neyman Intervals)","code":""},{"path":"https://strengejacke.github.io/ggeffects/articles/introduction_comparisons_2.html","id":"hypothesis-testing-for-slopes-of-numeric-predictors","dir":"Articles","previous_headings":"","what":"Hypothesis testing for slopes of numeric predictors","title":"Significance Testing Of Differences Between Predictions II: Comparisons Of Slopes, Floodlight And Spotlight Analysis (Johnson-Neyman Intervals)","text":"numeric focal terms, possible conduct hypothesis testing slopes, linear trend focal terms. categorical predictors (focal terms), easier define values compare. continuous predictors, however, may want compare different (meaningful) values predictor, slope (even compare slopes different continuous focal terms). default, first focal term continuous, contrasts comparisons calculated slopes predictor. even complicated deal interactions (least) two continuous predictors. case,  johnson_neyman()  function can used, special case pairwise comparisons interactions continuous predictors. Let’s start simple example . can already see coefficient table slope Sepal.Length 0.35. thus find increase predicted values outcome focal variable, Sepal.Length increases one unit. Consequently, case simple slope, see result hypothesis test linar trend Sepal.Length:","code":"library(ggeffects) library(parameters) data(iris) m <- lm(Sepal.Width ~ Sepal.Length + Species, data = iris) model_parameters(m) #> Parameter            | Coefficient |   SE |         95% CI | t(146) |      p #> ---------------------------------------------------------------------------- #> (Intercept)          |        1.68 | 0.24 | [ 1.21,  2.14] |   7.12 | < .001 #> Sepal Length         |        0.35 | 0.05 | [ 0.26,  0.44] |   7.56 | < .001 #> Species [versicolor] |       -0.98 | 0.07 | [-1.13, -0.84] | -13.64 | < .001 #> Species [virginica]  |       -1.01 | 0.09 | [-1.19, -0.82] | -10.80 | < .001 predict_response(m, \"Sepal.Length [4,5,6,7]\") #> # Predicted values of Sepal.Width #>  #> Sepal.Length | Predicted |     95% CI #> ------------------------------------- #>            4 |      3.08 | 2.95, 3.20 #>            5 |      3.43 | 3.35, 3.51 #>            6 |      3.78 | 3.65, 3.90 #>            7 |      4.13 | 3.93, 4.33 #>  #> Adjusted for: #> * Species = setosa test_predictions(m, \"Sepal.Length\") #> # (Average) Linear trend for Sepal.Length #>  #> Slope |     95% CI |      p #> --------------------------- #> 0.35  | 0.26, 0.44 | < .001"},{"path":"https://strengejacke.github.io/ggeffects/articles/introduction_comparisons_2.html","id":"is-the-linear-trend-of-sepal-length-significant-for-the-different-levels-of-species","dir":"Articles","previous_headings":"Hypothesis testing for slopes of numeric predictors","what":"Is the linear trend of Sepal.Length significant for the different levels of Species?","title":"Significance Testing Of Differences Between Predictions II: Comparisons Of Slopes, Floodlight And Spotlight Analysis (Johnson-Neyman Intervals)","text":"Let’s move complex example interaction numeric categorical variable.","code":""},{"path":"https://strengejacke.github.io/ggeffects/articles/introduction_comparisons_2.html","id":"predictions","dir":"Articles","previous_headings":"Hypothesis testing for slopes of numeric predictors > Is the linear trend of Sepal.Length significant for the different levels of Species?","what":"Predictions","title":"Significance Testing Of Differences Between Predictions II: Comparisons Of Slopes, Floodlight And Spotlight Analysis (Johnson-Neyman Intervals)","text":"","code":"m <- lm(Sepal.Width ~ Sepal.Length * Species, data = iris) pred <- predict_response(m, c(\"Sepal.Length\", \"Species\")) plot(pred)"},{"path":"https://strengejacke.github.io/ggeffects/articles/introduction_comparisons_2.html","id":"slopes-by-group","dir":"Articles","previous_headings":"Hypothesis testing for slopes of numeric predictors > Is the linear trend of Sepal.Length significant for the different levels of Species?","what":"Slopes by group","title":"Significance Testing Of Differences Between Predictions II: Comparisons Of Slopes, Floodlight And Spotlight Analysis (Johnson-Neyman Intervals)","text":"can see slope Sepal.Length different within group Species.  Since don’t want pairwise comparisons, set test = \"slope\" (test = \"trend\"). case, interaction terms included, linear trend (slope) numeric focal predictor, Sepal.Length, tested level Species. can see, three slopes significant, .e. “significant” linear trends.","code":"# test = \"slope\" is just an alias for test = NULL test_predictions(m, c(\"Sepal.Length\", \"Species\"), test = \"slope\") #> # (Average) Linear trend for Sepal.Length #>  #> Species    | Slope |     95% CI |      p #> ---------------------------------------- #> setosa     |  0.80 | 0.58, 1.02 | < .001 #> versicolor |  0.32 | 0.17, 0.47 | < .001 #> virginica  |  0.23 | 0.11, 0.35 | < .001"},{"path":"https://strengejacke.github.io/ggeffects/articles/introduction_comparisons_2.html","id":"pairwise-comparisons","dir":"Articles","previous_headings":"Hypothesis testing for slopes of numeric predictors > Is the linear trend of Sepal.Length significant for the different levels of Species?","what":"Pairwise comparisons","title":"Significance Testing Of Differences Between Predictions II: Comparisons Of Slopes, Floodlight And Spotlight Analysis (Johnson-Neyman Intervals)","text":"Next question whether linear trends differ significantly , .e. test differences slopes, pairwise comparison slopes. , use default test, \"pairwise\". linear trend Sepal.Length within setosa significantly different linear trend versicolor also virginica. difference slopes virginica versicolor statistically significant (p = 0.367).","code":"test_predictions(m, c(\"Sepal.Length\", \"Species\")) #> # (Average) Linear trend for Sepal.Length #>  #> Species              | Contrast |      95% CI |      p #> ------------------------------------------------------ #> setosa-versicolor    |     0.48 |  0.21, 0.74 | < .001 #> setosa-virginica     |     0.57 |  0.32, 0.82 | < .001 #> versicolor-virginica |     0.09 | -0.10, 0.28 | 0.367"},{"path":"https://strengejacke.github.io/ggeffects/articles/introduction_comparisons_2.html","id":"is-the-difference-linear-trends-of-sepal-length-in-between-two-groups-of-species-significantly-different-from-the-difference-of-two-linear-trends-between-two-other-groups","dir":"Articles","previous_headings":"Hypothesis testing for slopes of numeric predictors","what":"Is the difference linear trends of Sepal.Length in between two groups of Species significantly different from the difference of two linear trends between two other groups?","title":"Significance Testing Of Differences Between Predictions II: Comparisons Of Slopes, Floodlight And Spotlight Analysis (Johnson-Neyman Intervals)","text":"Similar example categorical predictors, can also test difference--differences example. instance, difference slopes Sepal.Length setosa versicolor different slope-difference groups setosa vigninica? difference--differences ’re interested indicated purple arrow plot.  Let’s look different slopes separately first, .e. slopes Sepal.Length levels Species: first difference slopes ’re interested one setosa (0.8) versicolor (0.32), .e. b1 - b2 (=0.48). second difference levels setosa (0.8) virginica (0.23), b1 - b3 (=0.57). test null hypothesis (b1 - b2) = (b1 - b3). difference two differences -0.09 statistically significant (p = 0.367).","code":"test_predictions(m, c(\"Sepal.Length\", \"Species\"), test = NULL) #> # (Average) Linear trend for Sepal.Length #>  #> Species    | Slope |     95% CI |      p #> ---------------------------------------- #> setosa     |  0.80 | 0.58, 1.02 | < .001 #> versicolor |  0.32 | 0.17, 0.47 | < .001 #> virginica  |  0.23 | 0.11, 0.35 | < .001 test_predictions(m, c(\"Sepal.Length\", \"Species\"), test = \"(b1 - b2) = (b1 - b3)\") #> Hypothesis      | Contrast |      95% CI |     p #> ------------------------------------------------ #> (b1-b2)=(b1-b3) |    -0.09 | -0.28, 0.10 | 0.367 #>  #> Tested hypothesis: (Species[setosa] - Species[versicolor]) = (Species[setosa] - Species[virginica])"},{"path":"https://strengejacke.github.io/ggeffects/articles/introduction_comparisons_2.html","id":"is-the-linear-trend-of-sepal-length-significant-at-different-values-of-another-numeric-predictor","dir":"Articles","previous_headings":"Hypothesis testing for slopes of numeric predictors","what":"Is the linear trend of Sepal.Length significant at different values of another numeric predictor?","title":"Significance Testing Of Differences Between Predictions II: Comparisons Of Slopes, Floodlight And Spotlight Analysis (Johnson-Neyman Intervals)","text":"two numeric terms interaction, comparison becomes difficult, find meaningful (representative) values moderator, associations predictor outcome tested. longer distinct categories moderator variable.","code":""},{"path":"https://strengejacke.github.io/ggeffects/articles/introduction_comparisons_2.html","id":"spotlight-analysis-floodlight-analysis-and-johnson-neyman-intervals","dir":"Articles","previous_headings":"Hypothesis testing for slopes of numeric predictors > Is the linear trend of Sepal.Length significant at different values of another numeric predictor?","what":"Spotlight analysis, floodlight analysis and Johnson-Neyman intervals","title":"Significance Testing Of Differences Between Predictions II: Comparisons Of Slopes, Floodlight And Spotlight Analysis (Johnson-Neyman Intervals)","text":"following examples show interactions two numeric predictors. case interaction terms, adjusted predictions usually shown representative values. numeric variable specified second third interaction term, representative values (see values_at()) typically mean +/- SD. sometimes also called “spotlight analysis” (Spiller et al. 2013). next example, Petal.Width second interaction term, thus see predicted values Sepal.Width (outcome) Petal.Length three different, representative values Petal.Width: Mean (1.2), 1 SD mean (1.96) 1 SD mean (0.44).","code":""},{"path":"https://strengejacke.github.io/ggeffects/articles/introduction_comparisons_2.html","id":"predictions-1","dir":"Articles","previous_headings":"Hypothesis testing for slopes of numeric predictors > Is the linear trend of Sepal.Length significant at different values of another numeric predictor?","what":"Predictions","title":"Significance Testing Of Differences Between Predictions II: Comparisons Of Slopes, Floodlight And Spotlight Analysis (Johnson-Neyman Intervals)","text":"test_predictions(), three values (mean, +1 SD -1 SD) work way Petal.Width categorical predictor three levels. First, want see value Petal.Width slopes Petal.Length significant. pairwise comparison , hence set test = \"slope\".","code":"m <- lm(Sepal.Width ~ Petal.Length * Petal.Width, data = iris) pred <- predict_response(m, c(\"Petal.Length\", \"Petal.Width\")) plot(pred) test_predictions(pred, test = \"slope\") #> # (Average) Linear trend for Petal.Length #>  #> Petal.Width | Slope |       95% CI |      p #> ------------------------------------------- #> 0.44        | -0.28 | -0.39, -0.16 | < .001 #> 1.20        | -0.11 | -0.23,  0.01 | 0.075  #> 1.96        |  0.06 | -0.09,  0.20 | 0.438 # same as: # test_predictions(m, c(\"Petal.Length\", \"Petal.Width\"), test = NULL)"},{"path":"https://strengejacke.github.io/ggeffects/articles/introduction_comparisons_2.html","id":"pairwise-comparisons-1","dir":"Articles","previous_headings":"Hypothesis testing for slopes of numeric predictors > Is the linear trend of Sepal.Length significant at different values of another numeric predictor?","what":"Pairwise comparisons","title":"Significance Testing Of Differences Between Predictions II: Comparisons Of Slopes, Floodlight And Spotlight Analysis (Johnson-Neyman Intervals)","text":"results pairwise comparison shown . tell us linear trends (slopes) significantly different , .e. slope green line significantly different slope red line, .","code":"test_predictions(pred) #> # (Average) Linear trend for Petal.Length #>  #> Petal.Width | Contrast |       95% CI |      p #> ---------------------------------------------- #> 0.44-1.2    |    -0.17 | -0.21, -0.12 | < .001 #> 0.44-1.96   |    -0.33 | -0.43, -0.24 | < .001 #> 1.2-1.96    |    -0.17 | -0.21, -0.12 | < .001"},{"path":"https://strengejacke.github.io/ggeffects/articles/introduction_comparisons_2.html","id":"floodlight-analysis-and-johnson-neyman-intervals","dir":"Articles","previous_headings":"Hypothesis testing for slopes of numeric predictors > Is the linear trend of Sepal.Length significant at different values of another numeric predictor?","what":"Floodlight analysis and Johnson-Neyman intervals","title":"Significance Testing Of Differences Between Predictions II: Comparisons Of Slopes, Floodlight And Spotlight Analysis (Johnson-Neyman Intervals)","text":"Another way handle models two numeric variables interaction use -called floodlight analysis, spotlight analysis values moderator variable, implemented johnson_neyman() function creates Johnson-Neyman intervals. intervals indicate values moderator slope predictor significant (cf. Johnson et al. 1950, McCabe et al. 2018). Let’s look example. first plot predicted values Income Murder nine different values Illiteracy (colors default palette show lines).  ’s difficult say values Illiteracy, association Murder Income might statistically signifiant. still can use test_predictions(): can seen, results might indicate lower upper tails Illiteracy, .e. Illiteracy roughly smaller 0.8 larger 2.6, association Murder Income statistically signifiant. However, test can simplified using johnson_neyman() function: Furthermore, possible create spotlight-plot.  avoid misleading interpretations plot, speak “positive” “negative” associations, respectively, “clear” associations (instead “significant” “non-significant”). prevent considering non-significant range values moderator “accepting null hypothesis”. results spotlight analysis suggest values 0.79 2.67 significantly different zero, values . can plot predictions values see differences. red green line represent values Illiteracy find clear positive resp. negative associations Murder Income, find clear (positive negative) association blue line.  Go next vignette: Significance Testing Differences Predictions III: Contrasts Comparisons Generalized Linear Models","code":"states <- as.data.frame(state.x77) states$HSGrad <- states$`HS Grad` m_mod <- lm(Income ~ HSGrad + Murder * Illiteracy, data = states)  myfun <- seq(0.5, 3, length.out = 9) pr <- predict_response(m_mod, c(\"Murder\", \"Illiteracy [myfun]\")) plot(pr) test_predictions(pr, test = NULL) #> # (Average) Linear trend for Murder #>  #> Illiteracy |   Slope |          95% CI |     p #> ---------------------------------------------- #> 0.50       |   82.08 |   18.69, 145.47 | 0.012 #> 0.81       |   51.76 |   -1.10, 104.61 | 0.055 #> 1.12       |   21.43 |  -29.44,  72.30 | 0.401 #> 1.44       |   -8.89 |  -67.20,  49.42 | 0.760 #> 1.75       |  -39.22 | -111.55,  33.12 | 0.281 #> 2.06       |  -69.54 | -159.45,  20.37 | 0.126 #> 2.38       |  -99.87 | -209.20,   9.46 | 0.072 #> 2.69       | -130.19 | -259.97,  -0.41 | 0.049 #> 3.00       | -160.52 | -311.34,  -9.69 | 0.038 johnson_neyman(pr) #> The association between `Murder` and `Income` is positive for values of #> `Illiteracy` lower than 0.79 and negative for values higher than 2.67. #> Inside the interval of [0.79, 2.67], there were no clear associations. plot(johnson_neyman(pr)) #> The association between `Murder` and `Income` is positive for values of `Illiteracy` lower than 0.80 and negative for values higher than 2.67. Inside the interval of [0.80, 2.67], there were no clear associations. pr <- predict_response(m_mod, c(\"Murder\", \"Illiteracy [0.7, 1.5, 2.8]\")) plot(pr, grid = TRUE)"},{"path":"https://strengejacke.github.io/ggeffects/articles/introduction_comparisons_2.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"Significance Testing Of Differences Between Predictions II: Comparisons Of Slopes, Floodlight And Spotlight Analysis (Johnson-Neyman Intervals)","text":"Johnson, P.O. & Fay, L.C. (1950). Johnson-Neyman technique, theory application. Psychometrika, 15, 349-367. doi: 10.1007/BF02288864 McCabe CJ, Kim DS, King KM. (2018). Improving Present Practices Visual Display Interactions. Advances Methods Practices Psychological Science, 1(2):147-165. doi:10.1177/2515245917746792 Spiller, S. ., Fitzsimons, G. J., Lynch, J. G., & McClelland, G. H. (2013). Spotlights, Floodlights, Magic Number Zero: Simple Effects Tests Moderated Regression. Journal Marketing Research, 50(2), 277–288. doi:10.1509/jmr.12.0420","code":""},{"path":"https://strengejacke.github.io/ggeffects/articles/introduction_comparisons_3.html","id":"contrasts-and-comparisons-for-glm---logistic-regression-example","dir":"Articles","previous_headings":"","what":"Contrasts and comparisons for GLM - logistic regression example","title":"Significance Testing Of Differences Between Predictions III: Contrasts And Comparisons For Generalized Linear Models","text":"now show example non-Gaussian models. GLM’s (generalized linear models) (non-Gaussian) link-functions, predict_response() always returns predcted values response scale. example, predicted values logistic regression models shown probabilities. Predictions (returned  predict_response() ) usually response scale. also true regression models linear regression. E.g., predictions logistic regression presented probailities, Poisson regression, average count event returned. test_predictions()  also returns contrasts comparisons response scale default. usually intuitive scale people understand. E.g., logistic regression model, contrasts presented difference two probabilities (percentage points). possible return contrasts comparisons scales, - mostly, probably necessary. Let’s look simple example","code":"library(ggeffects) set.seed(1234) dat <- data.frame(   outcome = rbinom(n = 100, size = 1, prob = 0.35),   x1 = as.factor(sample(1:3, size = 100, TRUE, prob = c(0.5, 0.2, 0.3))),   x2 = rnorm(n = 100, mean = 10, sd = 7),   x3 = as.factor(sample(1:4, size = 100, TRUE, prob = c(0.1, 0.4, 0.2, 0.3))) )  m <- glm(outcome ~ x1 + x2 + x3, data = dat, family = binomial()) predict_response(m, \"x1\") #> # Predicted probabilities of outcome #>  #> x1 | Predicted |     95% CI #> --------------------------- #> 1  |      0.15 | 0.03, 0.49 #> 2  |      0.09 | 0.02, 0.40 #> 3  |      0.22 | 0.05, 0.63 #>  #> Adjusted for: #> * x2 = 10.29 #> * x3 =     1"},{"path":"https://strengejacke.github.io/ggeffects/articles/introduction_comparisons_3.html","id":"contrasts-and-comparisons-for-categorical-focal-terms","dir":"Articles","previous_headings":"Contrasts and comparisons for GLM - logistic regression example","what":"Contrasts and comparisons for categorical focal terms","title":"Significance Testing Of Differences Between Predictions III: Contrasts And Comparisons For Generalized Linear Models","text":"Contrasts comparisons - like predictions (see ) - default response scale, .e. ’re represented difference probabilities (percentage points). difference predicted probability x1 = 1 (14.6%) x1 = 2 (9.3%) roughly 5.3% points. difference statistically significant (p = 0.469). scale argument test_predictions() can used return contrasts comparisons differen scale. example, transform contrasts odds ratios, can use scale = \"exp\". Contrasts comparisons can also represented link-scale, case log-odds. , use scale = \"link\".","code":"p <- predict_response(m, \"x1\") test_predictions(p) #> # Pairwise comparisons #>  #> x1  | Contrast |      95% CI |     p #> ------------------------------------ #> 1-2 |     0.05 | -0.09, 0.19 | 0.469 #> 1-3 |    -0.07 | -0.25, 0.10 | 0.414 #> 2-3 |    -0.13 | -0.35, 0.09 | 0.257 #>  #> Contrasts are presented as probabilities (in %-points). test_predictions(p, scale = \"exp\") #> # Pairwise comparisons #>  #> x1  | Contrast |     95% CI |     p #> ----------------------------------- #> 1-2 |     1.05 | 0.91, 1.22 | 0.469 #> 1-3 |     0.93 | 0.78, 1.11 | 0.414 #> 2-3 |     0.88 | 0.71, 1.10 | 0.257 #>  #> Contrasts are presented on the exponentiated scale. test_predictions(p, scale = \"link\") #> # Pairwise comparisons #>  #> x1  | Contrast |      95% CI |     p #> ------------------------------------ #> 1-2 |     0.51 | -0.79, 1.80 | 0.443 #> 1-3 |    -0.50 | -1.55, 0.54 | 0.345 #> 2-3 |    -1.01 | -2.38, 0.36 | 0.147 #>  #> Contrasts are presented as log-odds."},{"path":"https://strengejacke.github.io/ggeffects/articles/introduction_comparisons_3.html","id":"contrasts-and-comparisons-for-numerical-focal-terms","dir":"Articles","previous_headings":"Contrasts and comparisons for GLM - logistic regression example","what":"Contrasts and comparisons for numerical focal terms","title":"Significance Testing Of Differences Between Predictions III: Contrasts And Comparisons For Generalized Linear Models","text":"numeric focal variables, slopes (linear trends) estimated, transformed scales (like scale = \"exp\") supported. However, scale = \"link\" can used return untransformed contrasts comparisons link-scale. aware whether back-transformation use, affects resulting p-values. detailed overview transformations can found vignette.","code":"test_predictions(m, \"x2\", scale = \"link\") #> # (Average) Linear trend for x2 #>  #> Slope |      95% CI |     p #> --------------------------- #> -0.07 | -0.14, 0.00 | 0.065 #>  #> Slopes are presented as log-odds."},{"path":"https://strengejacke.github.io/ggeffects/articles/introduction_comparisons_3.html","id":"contrasts-and-comparisons-for-different-margin-options","dir":"Articles","previous_headings":"Contrasts and comparisons for GLM - logistic regression example","what":"Contrasts and comparisons for different margin options","title":"Significance Testing Of Differences Between Predictions III: Contrasts And Comparisons For Generalized Linear Models","text":"Like predict_response(), margin argument can used test_predictions() define marginalize non-focal predictors, .e. variables specified terms. can important depending type regression models order calculate accurate comparisons contrasts, since refer difference predicted values. linear models, differences usually , regardless margin option. However, non-Gaussian models, differences predicted values may differ different margin options. Consequently, test_predictions() either requires specifying margin argument model terms argument provided, related ggeffects object returned predict_response(). Go next vignette: Significance Testing Differences Predictions III: Contrasts Comparisons Zero-Inflation Models","code":"# predictions, using mean/mode for non-focal predictors p1 <- predict_response(m, \"x1\") # predictions, averaged across non-focal predictors p2 <- predict_response(m, \"x1\", margin = \"empirical\")  p1 #> # Predicted probabilities of outcome #>  #> x1 | Predicted |     95% CI #> --------------------------- #> 1  |      0.15 | 0.03, 0.49 #> 2  |      0.09 | 0.02, 0.40 #> 3  |      0.22 | 0.05, 0.63 #>  #> Adjusted for: #> * x2 = 10.29 #> * x3 =     1  p2 #> # Average predicted probabilities of outcome #>  #> x1 | Predicted |     95% CI #> --------------------------- #> 1  |      0.24 | 0.13, 0.38 #> 2  |      0.16 | 0.06, 0.36 #> 3  |      0.34 | 0.18, 0.53  # differences between predicted values diff(p1$predicted) #> [1] -0.05258416  0.12700886 diff(p2$predicted) #> [1] -0.07906904  0.18124204 # contrast refers to predictions, using mean/mode for non-focal predictors test_predictions(m, \"x1\") #> # Pairwise comparisons #>  #> x1  | Contrast |      95% CI |     p #> ------------------------------------ #> 1-2 |     0.05 | -0.09, 0.19 | 0.469 #> 1-3 |    -0.07 | -0.25, 0.10 | 0.414 #> 2-3 |    -0.13 | -0.35, 0.09 | 0.257 #>  #> Contrasts are presented as probabilities (in %-points).  # contrast refers to predictions, averaged across non-focal predictors test_predictions(m, \"x1\", margin = \"empirical\") #> # Pairwise comparisons #>  #> x1  | Contrast |      95% CI |     p #> ------------------------------------ #> 1-2 |     0.08 | -0.11, 0.27 | 0.417 #> 1-3 |    -0.10 | -0.31, 0.11 | 0.353 #> 2-3 |    -0.18 | -0.41, 0.05 | 0.125 #>  #> Contrasts are presented as probabilities (in %-points).  # or test_predictions(p2) #> # Pairwise comparisons #>  #> x1  | Contrast |      95% CI |     p #> ------------------------------------ #> 1-2 |     0.08 | -0.11, 0.27 | 0.417 #> 1-3 |    -0.10 | -0.31, 0.11 | 0.353 #> 2-3 |    -0.18 | -0.41, 0.05 | 0.125 #>  #> Contrasts are presented as probabilities (in %-points)."},{"path":"https://strengejacke.github.io/ggeffects/articles/introduction_comparisons_4.html","id":"contrasts-and-comparisons-for-zero-inflation-models","dir":"Articles","previous_headings":"","what":"Contrasts and comparisons for Zero-Inflation Models","title":"Significance Testing Of Differences Between Predictions IV: Contrasts And Comparisons For Zero-Inflation Models","text":"Lastly, show example models zero-inflation component.","code":""},{"path":"https://strengejacke.github.io/ggeffects/articles/introduction_comparisons_4.html","id":"what-is-a-zero-inflated-model","dir":"Articles","previous_headings":"Contrasts and comparisons for Zero-Inflation Models","what":"What is a zero-inflated model?","title":"Significance Testing Of Differences Between Predictions IV: Contrasts And Comparisons For Zero-Inflation Models","text":"zero-inflated model statistical approach used dealing count data excessive number zero values. Imagine counting something can zero, like number customers store gets day, happens lot zeros data typical count model (e.g., Poisson regression) ecpect. ’s need zero-inflated regression models. models consider two ways zeros can happen: True Zeros: days store naturally closed, maybe ’s just demand product. Counting Zeros: days store open just happens get customers. Maybe ’s bad luck, random fluctuation. model treats differently. uses one part (zero-inflation component, logistic regression) predict probability true zero, based things make store less likely open . uses another part (conditional, count component, count regression) predict number customers days store actually open, considering factors like weather discounts. Consequently, regression models usually two parts formula, (depending package) separate formulas count zero-inflation components. Adjusted predictions can calculated parts, contrasts comparisons can calculated parts, .","code":""},{"path":"https://strengejacke.github.io/ggeffects/articles/introduction_comparisons_4.html","id":"how-to-choose-predictors-for-zero-inflation-models","dir":"Articles","previous_headings":"Contrasts and comparisons for Zero-Inflation Models","what":"How to choose predictors for zero-inflation models?","title":"Significance Testing Of Differences Between Predictions IV: Contrasts And Comparisons For Zero-Inflation Models","text":"two model parts necessarily need use predictors. Therefore, always straightforward find predictors can used zero-inflation model. Think excess zeros data. true zeros (inherently counts) due limitations (measurement limitations, biological process, …)? Choose variables explain data points zero counts even conditions might allow count. instance, modeling customer complaints, store location remote area might predict zero complaints due fewer customers. zero-inflation models, model two parts: zero-inflation component count component. Adjusted predictions can calculated parts, contrasts comparisons can calculated parts, . easiest way compute contrasts pairwise comparisons simply pass result  predict_response()   test_predictions() . Specify  type  argument calculate predictions contrasts comparisons corresponding model component.","code":""},{"path":"https://strengejacke.github.io/ggeffects/articles/introduction_comparisons_4.html","id":"zero-inflation-models-using-the-glmmtmb-package","dir":"Articles","previous_headings":"","what":"Zero-inflation models using the glmmTMB package","title":"Significance Testing Of Differences Between Predictions IV: Contrasts And Comparisons For Zero-Inflation Models","text":"following example, use Salamanders dataset glmmTMB package.fit zero-inflated Poisson regression model data, mined predictor variable. Adjusted predictions using predict_response() can made different model components: conditional, count component, predicts average count salamanders. default uses type = \"fixed\". return predicted mean count component , conditional mean (average counts) response “counting zeros”. take account probability “true zeros”. full model, predicts average count response, including zero-inflation component. return expected value response average observation, can “true zero” “count zero”. Use type = \"zero_inflation\" calculate adjusted predictions also take zero-inflation component account. example, use option want predict average number customers per week, including days store closed. zero-inflation probabilities, predicts probabilities whether observation “true zero” . Use type = \"zi_prob\" . related zero-inflation component model.","code":"library(ggeffects) library(glmmTMB)  data(Salamanders) m <- glmmTMB(count ~ mined + (1 | site),   ziformula = ~mined,   family = poisson(),   data = Salamanders )"},{"path":"https://strengejacke.github.io/ggeffects/articles/introduction_comparisons_4.html","id":"contrasts-and-comparisons-for-the-conditional-model","dir":"Articles","previous_headings":"Zero-inflation models using the glmmTMB package","what":"Contrasts and comparisons for the conditional model","title":"Significance Testing Of Differences Between Predictions IV: Contrasts And Comparisons For Zero-Inflation Models","text":"start conditional mean, using margin = \"empirical\", want average predictions across random effects (see introduction random effects details). easiest way compute contrasts pairwise comparisons simply pass result predict_response() test_predictions(). correct focal terms model components automatically detected. zero-inflated models, default type predictions \"fixed\", .e. conditional mean predicted. average count response, excluding zero-inflation component.","code":"# predicting the conditional mean p <- predict_response(m, \"mined\", margin = \"empirical\") p #> # Average predicted (conditional) counts of count #>  #> mined | Predicted |     95% CI #> ------------------------------ #> yes   |      1.12 | 0.61, 1.63 #> no    |      3.51 | 2.89, 4.14  test_predictions(p) #> # Pairwise comparisons #>  #> mined  | Contrast |       95% CI |      p #> ----------------------------------------- #> yes-no |    -2.39 | -3.18, -1.60 | < .001 #>  #> Contrasts are presented as conditional means."},{"path":"https://strengejacke.github.io/ggeffects/articles/introduction_comparisons_4.html","id":"contrasts-and-comparisons-for-the-full-model","dir":"Articles","previous_headings":"Zero-inflation models using the glmmTMB package","what":"Contrasts and comparisons for the full model","title":"Significance Testing Of Differences Between Predictions IV: Contrasts And Comparisons For Zero-Inflation Models","text":"type = \"zero_inflated\", adjusted predictions returned full model, .e. average expected count response, including zero-inflation component.","code":"# predicting the expected value of the response p <- predict_response(m, \"mined\", type = \"zero_inflated\", margin = \"empirical\") p #> # Average expected counts of count #>  #> mined | Predicted |     95% CI #> ------------------------------ #> yes   |      0.27 | 0.17, 0.37 #> no    |      2.27 | 1.83, 2.70  test_predictions(p) #> # Pairwise comparisons #>  #> mined  | Contrast |       95% CI |      p #> ----------------------------------------- #> yes-no |    -1.99 | -2.44, -1.55 | < .001 #>  #> Contrasts are presented as counts."},{"path":"https://strengejacke.github.io/ggeffects/articles/introduction_comparisons_4.html","id":"contrasts-and-comparisons-for-the-zero-inflation-probabilities","dir":"Articles","previous_headings":"Zero-inflation models using the glmmTMB package","what":"Contrasts and comparisons for the zero-inflation probabilities","title":"Significance Testing Of Differences Between Predictions IV: Contrasts And Comparisons For Zero-Inflation Models","text":"’re interested probabilities “true zero” , use type = \"zi_prob\". Note margin \"empirical\" case, include confidence intervals adjusted predictions.","code":"# predicting the zero-inflation probabilities p <- predict_response(m, \"mined\", type = \"zi_prob\") p #> # Predicted zero-inflation probabilities of count #>  #> mined | Predicted |     95% CI #> ------------------------------ #> yes   |      0.76 | 0.66, 0.83 #> no    |      0.36 | 0.30, 0.41 #>  #> Adjusted for: #> * site = NA (population-level)  test_predictions(p) #> # Pairwise comparisons #>  #> mined  | Contrast |     95% CI |      p #> --------------------------------------- #> yes-no |     0.40 | 0.30, 0.50 | < .001 #>  #> Contrasts are presented as probabilities (in %-points)."},{"path":"https://strengejacke.github.io/ggeffects/articles/introduction_comparisons_5.html","id":"within-episode-do-levels-differ","dir":"Articles","previous_headings":"","what":"Within episode, do levels differ?","title":"Different Backends For Pairwise Comparisons","text":"","code":"library(ggeffects) library(ggplot2)  set.seed(123) n <- 200 d <- data.frame(   outcome = rnorm(n),   grp = as.factor(sample(c(\"treatment\", \"control\"), n, TRUE)),   episode = as.factor(sample(1:3, n, TRUE)),   sex = as.factor(sample(c(\"female\", \"male\"), n, TRUE, prob = c(0.4, 0.6))) ) model1 <- lm(outcome ~ grp + episode + grp, data = d)"},{"path":"https://strengejacke.github.io/ggeffects/articles/introduction_comparisons_5.html","id":"predictions","dir":"Articles","previous_headings":"Within episode, do levels differ?","what":"Predictions","title":"Different Backends For Pairwise Comparisons","text":"","code":"my_pred <- predict_response(model1, \"episode\", margin = \"marginalmeans\") my_pred #> # Predicted values of outcome #>  #> episode | Predicted |      95% CI #> --------------------------------- #> 1       |     -0.16 | -0.39, 0.07 #> 2       |      0.20 | -0.04, 0.43 #> 3       |     -0.06 | -0.28, 0.16"},{"path":"https://strengejacke.github.io/ggeffects/articles/introduction_comparisons_5.html","id":"pairwise-comparisons","dir":"Articles","previous_headings":"Within episode, do levels differ?","what":"Pairwise comparisons","title":"Different Backends For Pairwise Comparisons","text":"","code":"# comparisons based on estimated marginal means, using \"marginaleffects\" package test_predictions(model1, \"episode\", margin = \"marginalmeans\") #> # Pairwise comparisons #>  #> episode | Contrast |       95% CI |     p #> ----------------------------------------- #> 1-2     |    -0.36 | -0.68, -0.03 | 0.031 #> 1-3     |    -0.10 | -0.42,  0.22 | 0.538 #> 2-3     |     0.26 | -0.06,  0.58 | 0.112  # comparisons using \"emmeans\" package test_predictions(model1, \"episode\", engine = \"emmeans\") #> # Pairwise comparisons #>  #> episode | Contrast |       95% CI |     p #> ----------------------------------------- #> 1-2     |    -0.36 | -0.68, -0.03 | 0.031 #> 1-3     |    -0.10 | -0.42,  0.22 | 0.538 #> 2-3     |     0.26 | -0.06,  0.58 | 0.112  # comparisons using \"ggeffects\" backend. This engine requires the # ggeffects-object as input test_predictions(my_pred, engine = \"ggeffects\") #> # Pairwise comparisons #>  #> episode | Contrast |       95% CI |     p #> ----------------------------------------- #> 1-2     |    -0.36 | -0.68, -0.03 | 0.031 #> 1-3     |    -0.10 | -0.41,  0.22 | 0.538 #> 2-3     |     0.26 | -0.06,  0.58 | 0.111"},{"path":"https://strengejacke.github.io/ggeffects/articles/introduction_comparisons_5.html","id":"does-same-level-of-episode-differ-between-groups","dir":"Articles","previous_headings":"","what":"Does same level of episode differ between groups?","title":"Different Backends For Pairwise Comparisons","text":"","code":"model2 <- lm(outcome ~ grp * episode + grp, data = d)"},{"path":"https://strengejacke.github.io/ggeffects/articles/introduction_comparisons_5.html","id":"predictions-1","dir":"Articles","previous_headings":"Does same level of episode differ between groups?","what":"Predictions","title":"Different Backends For Pairwise Comparisons","text":"","code":"my_pred <- predict_response(model2, c(\"episode\", \"grp\"), margin = \"marginalmeans\") my_pred #> # Predicted values of outcome #>  #> grp: control #>  #> episode | Predicted |       95% CI #> ---------------------------------- #> 1       |      0.03 | -0.27,  0.33 #> 2       |      0.23 | -0.08,  0.54 #> 3       |     -0.04 | -0.36,  0.28 #>  #> grp: treatment #>  #> episode | Predicted |       95% CI #> ---------------------------------- #> 1       |     -0.39 | -0.74, -0.04 #> 2       |      0.18 | -0.18,  0.53 #> 3       |     -0.09 | -0.39,  0.21"},{"path":"https://strengejacke.github.io/ggeffects/articles/introduction_comparisons_5.html","id":"pairwise-comparisons-1","dir":"Articles","previous_headings":"Does same level of episode differ between groups?","what":"Pairwise comparisons","title":"Different Backends For Pairwise Comparisons","text":"","code":"# we want \"episode = 2-2\" and \"grp = control-treatment\"  # comparisons based on estimated marginal means, using \"marginaleffects\" package test_predictions(model2, c(\"episode [2]\", \"grp\"), margin = \"marginalmeans\") #> # Pairwise comparisons #>  #> grp               | Contrast |      95% CI |     p #> -------------------------------------------------- #> control-treatment |     0.06 | -0.41, 0.52 | 0.816  # comparisons based using \"emmeans\" package test_predictions(model2, c(\"episode [2]\", \"grp\"), engine = \"emmeans\") #> # Pairwise comparisons #>  #> episode |               grp | Contrast |      95% CI |     p #> ------------------------------------------------------------ #> 2-2     | control-treatment |     0.06 | -0.41, 0.52 | 0.816  # comparisons using \"ggeffects\" backend my_pred <- predict_response(model2, c(\"episode [2]\", \"grp\"), margin = \"marginalmeans\") test_predictions(my_pred, engine = \"ggeffects\") #> # Pairwise comparisons #>  #> episode |               grp | Contrast |      95% CI |     p #> ------------------------------------------------------------ #> 2-2     | control-treatment |     0.06 | -0.41, 0.52 | 0.816"},{"path":"https://strengejacke.github.io/ggeffects/articles/introduction_comparisons_5.html","id":"does-difference-between-two-levels-of-episode-in-the-control-group-differ-from-difference-of-same-two-levels-in-the-treatment-group","dir":"Articles","previous_headings":"","what":"Does difference between two levels of episode in the control group differ from difference of same two levels in the treatment group?","title":"Different Backends For Pairwise Comparisons","text":"test argument also allows us compare difference--differences. engine = \"emmeans\" \"ggeffects\", need set test = \"interaction\" get interaction contrasts, .e. differences--differences.","code":"# specifying the difference-in-difference when using \"marginaleffects\" test_predictions(model2, c(\"episode\", \"grp\"), test = \"(b1 - b3) = (b2  - b4)\", margin = \"marginalmeans\") #> Hypothesis      | Contrast |      95% CI |     p #> ------------------------------------------------ #> (b1-b3)=(b2-b4) |     0.36 | -0.29, 1.02 | 0.277 #>  #> Tested hypothesis: (episode[1],grp[control] - episode[2],grp[control]) = (episode[1],grp[treatment] - episode[2],grp[treatment])  # \"emmeans\" provides similar comparisons when we set test = \"interaction\". # This displays *all* possible differences-in-differences. The first row in # this output is identical to the above result from \"marginaleffects\". The # \"emmeans\" package is used automatically, when test = \"interaction\". test_predictions(model2, c(\"episode\", \"grp\"), test = \"interaction\") #> # Interaction contrasts #>  #> episode |                   grp | Contrast |      95% CI |     p #> ---------------------------------------------------------------- #> 1-2     | control and treatment |     0.36 | -0.29, 1.02 | 0.277 #> 1-3     | control and treatment |     0.37 | -0.27, 1.00 | 0.254 #> 2-3     | control and treatment |     0.01 | -0.64, 0.65 | 0.988  # using \"ggeffects\", we also need to set test = \"interaction\" to get the same # results. However, since by default \"emmeans\" us used, we also need to specify # the \"engine\" argument my_pred <- predict_response(model2, c(\"episode\", \"grp\"), margin = \"marginalmeans\") test_predictions(my_pred, test = \"interaction\", engine = \"ggeffects\") #> # Interaction contrasts #>  #> episode |                   grp | Contrast |      95% CI |     p #> ---------------------------------------------------------------- #> 1-2     | control and treatment |     0.36 | -0.29, 1.02 | 0.277 #> 1-3     | control and treatment |     0.37 | -0.27, 1.00 | 0.254 #> 2-3     | control and treatment |     0.01 | -0.64, 0.65 | 0.988"},{"path":"https://strengejacke.github.io/ggeffects/articles/introduction_effectsatvalues.html","id":"adjusted-predictions-and-marginal-means-at-specific-values-or-levels","dir":"Articles","previous_headings":"","what":"Adjusted predictions and marginal means at specific values or levels","title":"Introduction: Adjusted Predictions And Marginal Means At Specific Values","text":"vignettes shows calculate adjusted predictions specific values levels terms interest. recommended read general introduction first, haven’t done yet. terms-argument defines model terms (.e. focal variables) interest, model term can limited certain “meaningful” (“representative”) values. allows compute plot adjusted predictions (grouping) terms specific values , define values main effect interest.  terms  argument used define focal terms, also allows specify meaningful values, predictions calculated. terms  can character vector, list, formula, data frame. character vector, values focal terms placed square brackets directly term name. Although providing list probably R-native way define focal terms meaningful values, providing character vector additionally allows use pre-defined \"shortcuts\". preferred way demonstrated throughout package-documentation. Non-focal terms can fixed specific values using  condition  argument. several options define meaningful values: character vector, specifying names focal terms. preferred probably flexible way specify focal terms. list, element named vector, specifying focal terms values. “classical” R way specify focal terms. formula, e.g. terms = ~ x + z, internally converted character vector. probably least flexible way, specify representative values focal terms. data frame representig “data grid” “reference grid”. Predictions made combinations variables data frame. terms specified character vector, values always placed square brackets directly term name can vary model term. following examples show specify values terms-argument. Concrete values separated comma: terms = \"c172code [1,3]\". factors, also use factor levels, e.g. terms = \"Species [setosa,versicolor]\". terms named list, specified like : terms = list(c172code = c(1, 3)) terms = list(c172code = c(1, 3), Species = c(\"setosa\", \"versicolor\")). data frame, : Ranges specified colon: terms = c(\"c12hour [30:80]\", \"c172code [1,3]\"). plot values 30 80 variable c12hour. default, step size 1, .e. [1:4] create range 1, 2, 3, 4. can choose different step sizes , e.g. [1:4 =.5]. named list, terms = list(c12hour = 30:80) terms = list(c12hour = seq(1, 4, 0.5)). Convenient shortcuts calculate common values like mean +/- 1 SD (terms = \"c12hour [meansd]\"), quartiles (terms = \"c12hour [quartiles]\") minumum maximum values (terms = \"c12hour [minmax]\"). See values_at() different options. function name. function applied unique values indicated variable, e.g. terms = \"hp [exp]\". can also define functions, pass name terms-values, e.g. terms = \"hp [own_function]\". variable name. values variable used define terms-values, e.g. first, vector defined: v = c(1000, 2000, 3000) , terms = \"income [v]\". first variable specified terms numeric vector, specific values given, “pretty range” calculated (see pretty_range()), avoid memory allocation problems vectors many unique values. select values, use []-tag, e.g. terms = \"mpg []\". numeric vector specified second third variable term (.e. vector represents grouping structure), representative values (see values_at()) chosen, typically mean +/- SD. create pretty range smaller larger default range (.e. specific values given), use n-tag, e.g. terms = \"age [n=5]\" terms = \"age [n = 12]\". Larger values n return larger range predicted values. Especially useful plotting group levels random effects many levels, sample-option, e.g. terms = \"Subject [sample=9]\", sample nine values possible values variable Subject.","code":"terms <- data.frame(   c172code = c(1, 3, 1, 3),   Species = c(\"setosa\", \"setosa\", \"versicolor\", \"versicolor\"),   stringsAsFactors = FALSE ) terms #>   c172code    Species #> 1        1     setosa #> 2        3     setosa #> 3        1 versicolor #> 4        3 versicolor"},{"path":"https://strengejacke.github.io/ggeffects/articles/introduction_effectsatvalues.html","id":"specific-values-and-value-range","dir":"Articles","previous_headings":"Adjusted predictions and marginal means at specific values or levels","what":"Specific values and value range","title":"Introduction: Adjusted Predictions And Marginal Means At Specific Values","text":"variables , instance, log-transformed, ggeffects automatically back-transforms predictions original scale response predictors, making predictions directly interpretable. However, sometimes might useful define value ranges. situation, specify range terms-argument. default, step size range 1, like 50, 51, 52, .... need different step size, use =<stepsize> inside brackets, e.g. \"hp [50:60 =.5]\". create range 50 60, .5er steps.","code":"library(ggeffects) library(ggplot2) data(efc, package = \"ggeffects\") fit <- lm(barthtot ~ c12hour + neg_c_7 + c161sex + c172code, data = efc)  mydf <- predict_response(fit, terms = c(\"c12hour [30:80]\", \"c172code [1,3]\")) mydf #> # Predicted values of Total score BARTHEL INDEX #>  #> c172code: low level of education #>  #> c12hour | Predicted |       95% CI #> ---------------------------------- #>      30 |     67.15 | 64.03, 70.26 #>      38 |     65.12 | 62.05, 68.19 #>      47 |     62.84 | 59.80, 65.88 #>      55 |     60.81 | 57.77, 63.86 #>      63 |     58.79 | 55.72, 61.86 #>      80 |     54.48 | 51.28, 57.69 #>  #> c172code: high level of education #>  #> c12hour | Predicted |       95% CI #> ---------------------------------- #>      30 |     68.58 | 65.41, 71.76 #>      38 |     66.56 | 63.39, 69.73 #>      47 |     64.28 | 61.08, 67.48 #>      55 |     62.25 | 59.00, 65.50 #>      63 |     60.23 | 56.90, 63.55 #>      80 |     55.92 | 52.38, 59.46 #>  #> Adjusted for: #> * neg_c_7 = 11.84 #> * c161sex =  1.76 ggplot(mydf, aes(x, predicted, colour = group)) + geom_line() data(mtcars) mpg_model <- lm(mpg ~ log(hp), data = mtcars)  # x-values and predictions based on the full range of the original \"hp\"-values predict_response(mpg_model, \"hp\") #> # Predicted values of mpg #>  #>  hp | Predicted |       95% CI #> ------------------------------ #>  50 |     30.53 | 27.84, 33.22 #>  85 |     24.82 | 23.21, 26.42 #> 120 |     21.11 | 19.91, 22.30 #> 155 |     18.35 | 17.11, 19.59 #> 195 |     15.88 | 14.36, 17.41 #> 230 |     14.10 | 12.29, 15.92 #> 265 |     12.58 | 10.48, 14.68 #> 335 |     10.06 |  7.45, 12.66  # x-values and predictions based on \"hp\"-values ranging from 50 to 150 predict_response(mpg_model, \"hp [50:150]\") #> # Predicted values of mpg #>  #>  hp | Predicted |       95% CI #> ------------------------------ #>  50 |     30.53 | 27.84, 33.22 #>  63 |     28.04 | 25.86, 30.23 #>  75 |     26.17 | 24.33, 28.00 #>  87 |     24.57 | 23.00, 26.13 #> 100 |     23.07 | 21.71, 24.43 #> 113 |     21.75 | 20.52, 22.99 #> 125 |     20.67 | 19.49, 21.84 #> 150 |     18.71 | 17.49, 19.92 # range for x-values with .5-steps predict_response(mpg_model, \"hp [50:60 by=.5]\") #> # Predicted values of mpg #>  #>    hp | Predicted |       95% CI #> -------------------------------- #> 50.00 |     30.53 | 27.84, 33.22 #> 51.50 |     30.21 | 27.59, 32.84 #> 52.50 |     30.01 | 27.42, 32.59 #> 53.50 |     29.80 | 27.26, 32.34 #> 55.00 |     29.50 | 27.02, 31.98 #> 56.50 |     29.22 | 26.79, 31.64 #> 57.50 |     29.03 | 26.64, 31.41 #> 60.00 |     28.57 | 26.28, 30.86"},{"path":"https://strengejacke.github.io/ggeffects/articles/introduction_effectsatvalues.html","id":"choosing-representative-values","dir":"Articles","previous_headings":"Adjusted predictions and marginal means at specific values or levels","what":"Choosing representative values","title":"Introduction: Adjusted Predictions And Marginal Means At Specific Values","text":"Especially situations two continuous variables interaction terms, “grouping” variable continuous, helpful select representative values grouping variable - else, predictions made many groups, longer helpful interpreting adjusted predictions. can use \"minmax\": minimum maximum values (lower upper bounds) variable used. \"meansd\": uses mean value well one standard deviation mean value. \"zeromax\": similar \"minmax\" option, however, 0 always used minimum value. may useful predictors don’t empirical zero-value. \"terciles\" calculates uses terciles (lower, middle upper), including minimum maximum value. \"terciles2\" calculates uses terciles (lower, middle upper), excluding minimum maximum value. \"quartiles\" calculates uses quartiles (lower, median upper), including minimum maximum value. \"quartiles2\" calculates uses quartiles (lower, median upper), excluding minimum maximum value. \"threenum\" calculates three-number-summary (lower-hinge, median, upper-hinge). \"fivenum\" calculates Tukey’s five-number-summary (minimum, lower-hinge, median, upper-hinge, maximum). \"percentile\" (including percentile-value) calculates range values given percentile, e.g. \"percentile80\". \"\" takes values vector.","code":"data(efc, package = \"ggeffects\") # short variable label, for plot attr(efc$c12hour, \"label\") <- \"hours of care\" fit <- lm(barthtot ~ c12hour * c161sex + neg_c_7, data = efc)  mydf <- predict_response(fit, terms = c(\"c161sex\", \"c12hour [meansd]\")) plot(mydf) mydf <- predict_response(fit, terms = c(\"c161sex\", \"c12hour [quartiles]\")) plot(mydf)"},{"path":"https://strengejacke.github.io/ggeffects/articles/introduction_effectsatvalues.html","id":"transforming-values-with-functions","dir":"Articles","previous_headings":"Adjusted predictions and marginal means at specific values or levels","what":"Transforming values with functions","title":"Introduction: Adjusted Predictions And Marginal Means At Specific Values","text":"brackets terms-argument also accept name valid function, (back-)transform predicted values. example, define custom function get original values focal predictor, multiplied 2. Using list, terms argument example look like : terms = list(hp = hp_double(seq(100, 700, 7))).","code":"# x-values and predictions based on \"hp\"-values, multiplied by 2 hp_double <- function(x) 2 * x predict_response(mpg_model, \"hp [hp_double]\") #> # Predicted values of mpg #>  #>     hp | Predicted |       95% CI #> --------------------------------- #> 104.00 |     22.65 | 21.34, 23.96 #> 132.00 |     20.08 | 18.91, 21.25 #> 186.00 |     16.39 | 14.94, 17.84 #> 210.00 |     15.08 | 13.43, 16.73 #> 226.00 |     14.29 | 12.51, 16.08 #> 300.00 |     11.24 |  8.88, 13.61 #> 410.00 |      7.88 |  4.81, 10.95 #> 670.00 |      2.59 | -1.63,  6.82"},{"path":"https://strengejacke.github.io/ggeffects/articles/introduction_effectsatvalues.html","id":"using-values-from-a-variable-vector","dir":"Articles","previous_headings":"Adjusted predictions and marginal means at specific values or levels","what":"Using values from a variable (vector)","title":"Introduction: Adjusted Predictions And Marginal Means At Specific Values","text":"Using list, terms argument example look like : terms = list(hp = val).","code":"val <- c(100, 200, 300) predict_response(mpg_model, \"hp [val]\") #> # Predicted values of mpg #>  #>  hp | Predicted |       95% CI #> ------------------------------ #> 100 |     23.07 | 21.71, 24.43 #> 200 |     15.61 | 14.04, 17.17 #> 300 |     11.24 |  8.88, 13.61"},{"path":"https://strengejacke.github.io/ggeffects/articles/introduction_effectsatvalues.html","id":"pretty-value-ranges","dir":"Articles","previous_headings":"Adjusted predictions and marginal means at specific values or levels","what":"Pretty value ranges","title":"Introduction: Adjusted Predictions And Marginal Means At Specific Values","text":"section intended show examples plotted output differs, depending value range used. transformations, like polynomial spline terms, also quadratic cubic terms, result many predicted values. situation, predictions models lead memory allocation problems. predict_response() “prettifies” certain value ranges default, least model types (like mixed models). see difference “curvilinear” trend, use quadratic term standardized variable.","code":"library(datawizard) library(lme4) data(efc, package = \"ggeffects\")  efc$c12hour <- standardize(efc$c12hour) efc$e15relat <- to_factor(efc$e15relat)  m <- lmer(   barthtot ~ c12hour + I(c12hour^2) + neg_c_7 + c160age + c172code + (1 | e15relat),   data = efc )  me <- predict_response(m, terms = \"c12hour\") plot(me)"},{"path":"https://strengejacke.github.io/ggeffects/articles/introduction_effectsatvalues.html","id":"turn-off-prettifying","dir":"Articles","previous_headings":"Adjusted predictions and marginal means at specific values or levels > Pretty value ranges","what":"Turn off “prettifying”","title":"Introduction: Adjusted Predictions And Marginal Means At Specific Values","text":"said , predict_response() “prettifies” vector, resulting smaller set unique values. less memory consuming may needed especially complex models. can turn automatic “prettifying” adding \"\"-shortcut terms-argument.  results smooth plot, values term interest taken account.","code":"me <- predict_response(m, terms = \"c12hour [all]\") plot(me)"},{"path":"https://strengejacke.github.io/ggeffects/articles/introduction_effectsatvalues.html","id":"using-different-ranges-for-prettifying","dir":"Articles","previous_headings":"Adjusted predictions and marginal means at specific values or levels > Pretty value ranges","what":"Using different ranges for prettifying","title":"Introduction: Adjusted Predictions And Marginal Means At Specific Values","text":"modify “prettifying”, add \"n\"-shortcut terms-argument. allows select feasible range values smaller (hence less memory consuming) \"terms = ... []\", still produces smoother plots default prettyfing.","code":"me <- predict_response(m, terms = \"c12hour [n=2]\") plot(me) me <- predict_response(m, terms = \"c12hour [n=10]\") plot(me)"},{"path":"https://strengejacke.github.io/ggeffects/articles/introduction_effectsatvalues.html","id":"adjusted-predictions-conditioned-on-specific-values-of-the-covariates","dir":"Articles","previous_headings":"Adjusted predictions and marginal means at specific values or levels","what":"Adjusted predictions conditioned on specific values of the covariates","title":"Introduction: Adjusted Predictions And Marginal Means At Specific Values","text":"default, typical-argument determines function applied covariates hold terms constant values. default, mean-value, options (like median mode) possible well. Use condition-argument define values covariates held constant. condition requires named vector, name indicating covariate.","code":"data(mtcars) mpg_model <- lm(mpg ~ log(hp) + disp, data = mtcars)  # \"disp\" is hold constant at its mean predict_response(mpg_model, \"hp\") #> # Predicted values of mpg #>  #>  hp | Predicted |       95% CI #> ------------------------------ #>  50 |     25.84 | 21.86, 29.82 #>  85 |     22.70 | 20.67, 24.72 #> 120 |     20.65 | 19.55, 21.76 #> 155 |     19.13 | 17.91, 20.35 #> 195 |     17.77 | 15.91, 19.64 #> 230 |     16.79 | 14.36, 19.23 #> 265 |     15.95 | 13.00, 18.91 #> 335 |     14.56 | 10.73, 18.40 #>  #> Adjusted for: #> * disp = 230.72  # \"disp\" is hold constant at value 200 predict_response(mpg_model, \"hp\", condition = c(disp = 200)) #> # Predicted values of mpg #>  #>  hp | Predicted |       95% CI #> ------------------------------ #>  50 |     26.53 | 22.91, 30.15 #>  85 |     23.38 | 21.66, 25.11 #> 120 |     21.34 | 20.27, 22.41 #> 155 |     19.82 | 18.34, 21.30 #> 195 |     18.46 | 16.25, 20.67 #> 230 |     17.48 | 14.68, 20.28 #> 265 |     16.64 | 13.31, 19.97 #> 335 |     15.25 | 11.03, 19.47"},{"path":"https://strengejacke.github.io/ggeffects/articles/introduction_effectsatvalues.html","id":"adjusted-predictions-for-each-level-of-random-effects-unit-level-predictions","dir":"Articles","previous_headings":"Adjusted predictions and marginal means at specific values or levels","what":"Adjusted predictions for each level of random effects (unit-level predictions)","title":"Introduction: Adjusted Predictions And Marginal Means At Specific Values","text":"Adjusted predictions can also calculated group level mixed models. Simply add name related random effects term terms-argument, set type = \"random\". following example, fit linear mixed model first plot population-level predictions. Please see also dedicated vignette mixed models details examples.  compute adjusted predictions grouping level (unit-level predictions), add related random term terms-argument.  Unit-level predictions can also calculated specific levels . Add related values brackets variable name terms-argument.  group factor many levels, can also take random sample possible levels plot adjusted predictions subsample group levels. , use term = \"<groupfactor> [sample=n]\".","code":"library(lme4) data(efc, package = \"ggeffects\") efc$e15relat <- to_factor(efc$e15relat) m <- lmer(neg_c_7 ~ c12hour + c160age + c161sex + (1 | e15relat), data = efc) me <- predict_response(m, terms = \"c12hour\") plot(me) me <- predict_response(m, terms = c(\"c12hour\", \"e15relat\"), type = \"random\") plot(me) me <- predict_response(m, terms = c(\"c12hour\", \"e15relat [child,sibling]\"), type = \"random\") plot(me) data(\"sleepstudy\") m <- lmer(Reaction ~ Days + (1 + Days | Subject), data = sleepstudy) me <- predict_response(m, terms = c(\"Days\", \"Subject [sample=8]\"), type = \"random\") plot(me)"},{"path":"https://strengejacke.github.io/ggeffects/articles/introduction_partial_residuals.html","id":"detecting-non-linear-relationship","dir":"Articles","previous_headings":"","what":"Detecting non-linear relationship","title":"Introduction: Adding Partial Residuals to Adjusted Predictions Plots","text":"Let’s look example non-linear relationship. missed pattern obvious looking raw data:  However, becomes obvious partial residuals:  even obvious, local polynomial regression line (loess) added plot. can achieved using show_residuals_line = TRUE.","code":"library(ggeffects) set.seed(1234) x <- rnorm(200) z <- rnorm(200) # quadratic relationship y <- 2 * x + x^2 + 4 * z + rnorm(200)  d <- data.frame(x, y, z) m <- lm(y ~ x + z, data = d)  pr <- predict_response(m, \"x [all]\") plot(pr, show_data = TRUE) plot(pr, show_residuals = TRUE) plot(pr, show_residuals = TRUE, show_residuals_line = TRUE)"},{"path":"https://strengejacke.github.io/ggeffects/articles/introduction_partial_residuals.html","id":"detecting-missed-interactions","dir":"Articles","previous_headings":"","what":"Detecting missed interactions","title":"Introduction: Adding Partial Residuals to Adjusted Predictions Plots","text":"another example, shows partial residuals plot suggests modeling interaction:  , recommended add loess-fit line residuals:  Modeling interaction clearly catches pattern data better.","code":"set.seed(1234) x <- rnorm(300, mean = 10) z <- rnorm(300) v <- rnorm(300) y <- (4 * z + 2) * x - 40 * z + 5 * v + rnorm(300, sd = 3)  d <- data.frame(x, y, z) m <- lm(y ~ x + z, data = d)  pr <- predict_response(m, c(\"x\", \"z\"))  # raw data, no interaction plot(pr, show_data = TRUE) plot(pr, show_residuals = TRUE, grid = TRUE, show_residuals_line = TRUE) m <- lm(y ~ x * z, data = d) pr <- predict_response(m, c(\"x\", \"z\")) plot(pr, show_residuals = TRUE, grid = TRUE, show_residuals_line = TRUE)"},{"path":"https://strengejacke.github.io/ggeffects/articles/introduction_partial_residuals.html","id":"using-the-complete-range-of-values","dir":"Articles","previous_headings":"","what":"Using the complete range of values","title":"Introduction: Adding Partial Residuals to Adjusted Predictions Plots","text":"ggeffects usually “prettyfies” data tries find pretty sequence range focal predictor, avoid lengthy output, particularly continuous variables (see section pretty value ranges vignette). , however, might misleading cases creating residual plots. next example, sinus-curve pattern residuals, hidden default:  cases, recommended use -tag terms-argument.","code":"set.seed(1234) x <- seq(-100, 100, length.out = 1e3) z <- rnorm(1e3) y <- 5 * sin(x / 2) + x / 2 + 10 * z  m <- lm(y ~ x + z) pr <- predict_response(m, \"x\")  plot(pr, show_residuals = TRUE) pr <- predict_response(m, \"x [all]\") plot(pr, show_residuals = TRUE)"},{"path":"https://strengejacke.github.io/ggeffects/articles/introduction_partial_residuals.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"Introduction: Adding Partial Residuals to Adjusted Predictions Plots","text":"Fox J, Weisberg S. Visualizing Fit Lack Fit Complex Regression Models Predictor Effect Plots Partial Residuals. Journal Statistical Software 2018;87. https://www.jstatsoft.org/article/view/v087i09","code":""},{"path":"https://strengejacke.github.io/ggeffects/articles/introduction_plotcustomize.html","id":"changing-plot-and-axis-titles","dir":"Articles","previous_headings":"","what":"Changing Plot and Axis Titles","title":"Introduction: Customize Plot Appearance","text":"simplest thing change titles plot, x- y-axis. can done ggplot2::labs():","code":"plot(dat) +   labs(     x = \"Number of forward gears\",     y = \"Miles/(US) gallon\",     title = \"Predicted mean miles per gallon\"   )"},{"path":"https://strengejacke.github.io/ggeffects/articles/introduction_plotcustomize.html","id":"changing-the-legend-title","dir":"Articles","previous_headings":"","what":"Changing the Legend Title","title":"Introduction: Customize Plot Appearance","text":"legend-title can also changed using labs()-function. legend ggplot-objects refers aesthetic used grouping variable, default colour, .e. plot constructed following way:","code":"ggplot(data, aes(x = x, y = predicted, colour = group))"},{"path":"https://strengejacke.github.io/ggeffects/articles/introduction_plotcustomize.html","id":"plots-with-default-colors","dir":"Articles","previous_headings":"Changing the Legend Title","what":"Plots with Default Colors","title":"Introduction: Customize Plot Appearance","text":"Hence, using colour labs() changes legend-title:","code":"plot(dat) + labs(colour = \"Weight (1000 lbs)\")"},{"path":"https://strengejacke.github.io/ggeffects/articles/introduction_plotcustomize.html","id":"black-and-white-plots","dir":"Articles","previous_headings":"Changing the Legend Title","what":"Black-and-White Plots","title":"Introduction: Customize Plot Appearance","text":"black--white plots, group-aesthetic mapped different linetypes, different colours. Thus, legend-title black--white plots can changed using linetype labs():","code":"plot(dat, colors = \"bw\") + labs(linetype = \"Weight (1000 lbs)\")"},{"path":"https://strengejacke.github.io/ggeffects/articles/introduction_plotcustomize.html","id":"black-and-white-plots-with-categorical-predictor","dir":"Articles","previous_headings":"Changing the Legend Title","what":"Black-and-White Plots with Categorical Predictor","title":"Introduction: Customize Plot Appearance","text":"variable x-axis discrete black--white plot, group-aesthetic mapped different shapes, following code must used change legend title:","code":"plot(dat_categorical, colors = \"bw\") + labs(shape = \"Weight (1000 lbs)\")"},{"path":"https://strengejacke.github.io/ggeffects/articles/introduction_plotcustomize.html","id":"changing-the-x-axis-appearance","dir":"Articles","previous_headings":"","what":"Changing the x-Axis Appearance","title":"Introduction: Customize Plot Appearance","text":"x-axis plots returned plot() always continuous, even discrete x-axis-variables. reason many users used plots connect data points lines, possible continuous x-axes. can using connect_lines-argument:","code":"plot(dat_categorical, connect_lines = TRUE)"},{"path":"https://strengejacke.github.io/ggeffects/articles/introduction_plotcustomize.html","id":"categorical-predictors","dir":"Articles","previous_headings":"Changing the x-Axis Appearance","what":"Categorical Predictors","title":"Introduction: Customize Plot Appearance","text":"Since x-axis continuous (.e. ggplot2::scale_x_continuous()), can use scale_x_continuous() modify x-axis, change breaks, limits labels.","code":"plot(dat_categorical) +   scale_x_continuous(labels = c(\"four\", \"six\", \"eight\"), breaks = c(4, 6, 8))"},{"path":"https://strengejacke.github.io/ggeffects/articles/introduction_plotcustomize.html","id":"continuous-predictors","dir":"Articles","previous_headings":"Changing the x-Axis Appearance","what":"Continuous Predictors","title":"Introduction: Customize Plot Appearance","text":"continuous variables:","code":"plot(dat) + scale_x_continuous(breaks = 3:5, limits = c(2, 6))"},{"path":"https://strengejacke.github.io/ggeffects/articles/introduction_plotcustomize.html","id":"changing-the-y-axis-appearance","dir":"Articles","previous_headings":"","what":"Changing the y-Axis Appearance","title":"Introduction: Customize Plot Appearance","text":"Arguments ... passed ggplot::scale_y_continuous() (resp. ggplot::scale_y_log10(), log.y = TRUE), can control appearance y-axis putting arguments directly call plot():","code":"plot(dat_categorical, breaks = seq(12, 30, 2), limits = c(12, 30))"},{"path":"https://strengejacke.github.io/ggeffects/articles/introduction_plotcustomize.html","id":"changing-the-legend-labels","dir":"Articles","previous_headings":"","what":"Changing the Legend Labels","title":"Introduction: Customize Plot Appearance","text":"legend labels can also changed using scale_*()-function ggplot. Depending color-setting (see section Changing Legend Title), following functions can used change legend labels: scale_colour_manual() resp. scale_colour_brewer() scale_linetype_manual() scale_shape_manual() Since overwrite exising “color” scale, typically need provide values palette-argument, manuall set colors, linetypes shapes.","code":""},{"path":"https://strengejacke.github.io/ggeffects/articles/introduction_plotcustomize.html","id":"plots-with-default-colors-1","dir":"Articles","previous_headings":"Changing the Legend Labels","what":"Plots with Default Colors","title":"Introduction: Customize Plot Appearance","text":"plots using default colors:","code":"plot(dat) +   scale_colour_brewer(palette = \"Set1\", labels = c(\"-1 SD\", \"Mean\", \"+1 SD\")) +   scale_fill_brewer(palette = \"Set1\")"},{"path":"https://strengejacke.github.io/ggeffects/articles/introduction_plotcustomize.html","id":"black-and-white-plots-1","dir":"Articles","previous_headings":"Changing the Legend Labels","what":"Black-and-White Plots","title":"Introduction: Customize Plot Appearance","text":"black--white plots:","code":"plot(dat, colors = \"bw\") +   scale_linetype_manual(values = 15:17, labels = c(\"-1 SD\", \"Mean\", \"+1 SD\"))"},{"path":"https://strengejacke.github.io/ggeffects/articles/introduction_plotcustomize.html","id":"black-and-white-plots-with-categorical-predictor-1","dir":"Articles","previous_headings":"Changing the Legend Labels","what":"Black-and-White Plots with Categorical Predictor","title":"Introduction: Customize Plot Appearance","text":"black--white plots categorical x-axis:","code":"plot(dat_categorical, colors = \"bw\") +   scale_shape_manual(values = 1:3, labels = c(\"-1 SD\", \"Mean\", \"+1 SD\"))"},{"path":"https://strengejacke.github.io/ggeffects/articles/introduction_plotmethod.html","id":"plot-method","dir":"Articles","previous_headings":"","what":"plot()-method","title":"Introduction: Plotting Adjusted Predictions and Marginal Means","text":"vignettes demonstrates plot()-method ggeffects-package. recommended read general introduction first, haven’t done yet. don’t want write ggplot-code, ggeffects plot()-method convenient defaults, allows quickly creating ggplot-objects. plot() arguments tweak plot-appearance. instance, show_ci allows show hide confidence bands (error bars, discrete variables), facets allows create facets even just one grouping variable, colors allows quickly choose color-palettes, including black & white colored plots. Use show_data add raw data points plot. ggeffects supports labelled data plot()-method automatically sets titles, axis - legend-labels depending value variable labels data.","code":"library(ggplot2) library(ggeffects) data(efc, package = \"ggeffects\") efc$c172code <- datawizard::to_factor(efc$c172code) fit <- lm(barthtot ~ c12hour + neg_c_7 + c161sex + c172code, data = efc)"},{"path":"https://strengejacke.github.io/ggeffects/articles/introduction_plotmethod.html","id":"facet-by-group","dir":"Articles","previous_headings":"plot()-method","what":"Facet by Group","title":"Introduction: Plotting Adjusted Predictions and Marginal Means","text":"","code":"dat <- predict_response(fit, terms = c(\"c12hour\", \"c172code\")) plot(dat, facets = TRUE)"},{"path":"https://strengejacke.github.io/ggeffects/articles/introduction_plotmethod.html","id":"no-facets-in-black-white","dir":"Articles","previous_headings":"plot()-method","what":"No Facets, in Black & White","title":"Introduction: Plotting Adjusted Predictions and Marginal Means","text":"","code":"# don't use facets, b/w figure, w/o confidence bands plot(dat, colors = \"bw\", show_ci = FALSE)"},{"path":"https://strengejacke.github.io/ggeffects/articles/introduction_plotmethod.html","id":"add-data-points-to-plot","dir":"Articles","previous_headings":"plot()-method","what":"Add Data Points to Plot","title":"Introduction: Plotting Adjusted Predictions and Marginal Means","text":"","code":"dat <- predict_response(fit, terms = c(\"c12hour\", \"c172code\")) plot(dat, show_data = TRUE)"},{"path":"https://strengejacke.github.io/ggeffects/articles/introduction_plotmethod.html","id":"automatic-facetting","dir":"Articles","previous_headings":"plot()-method","what":"Automatic Facetting","title":"Introduction: Plotting Adjusted Predictions and Marginal Means","text":"","code":"# for three variables, automatic facetting dat <- predict_response(fit, terms = c(\"c12hour\", \"c172code\", \"c161sex\")) plot(dat)"},{"path":"https://strengejacke.github.io/ggeffects/articles/introduction_plotmethod.html","id":"automatic-selection-of-error-bars-or-confidence-bands","dir":"Articles","previous_headings":"plot()-method","what":"Automatic Selection of Error Bars or Confidence Bands","title":"Introduction: Plotting Adjusted Predictions and Marginal Means","text":"","code":"# categorical variables have errorbars dat <- predict_response(fit, terms = c(\"c172code\", \"c161sex\")) plot(dat)"},{"path":"https://strengejacke.github.io/ggeffects/articles/introduction_plotmethod.html","id":"connect-discrete-data-points-with-lines","dir":"Articles","previous_headings":"plot()-method","what":"Connect Discrete Data Points with Lines","title":"Introduction: Plotting Adjusted Predictions and Marginal Means","text":"","code":"# point-geoms for discrete x-axis can be connected with lines plot(dat, connect_lines = TRUE)"},{"path":"https://strengejacke.github.io/ggeffects/articles/introduction_plotmethod.html","id":"create-panel-plots-for-more-than-three-terms","dir":"Articles","previous_headings":"plot()-method","what":"Create Panel Plots for more than three Terms","title":"Introduction: Plotting Adjusted Predictions and Marginal Means","text":"three grouping variable (.e. terms length four), one plot per panel (values fourth variable terms) created, single, integrated plot produced default. Use one_plot = FALSE return one plot per panel.  facets become small, can align panels multiple rows, using n_rows argument. Furthermore, use functions ggplot2 align legend.","code":"# for four variables, automatic facetting and integrated panel dat <- predict_response(fit, terms = c(\"c12hour\", \"c172code\", \"c161sex\", \"neg_c_7\")) # use 'one_plot = FALSE' for returning multiple single plots plot(dat, one_plot = TRUE) plot(dat, one_plot = TRUE, n_rows = 2) + theme(legend.position = \"bottom\")"},{"path":"https://strengejacke.github.io/ggeffects/articles/introduction_plotmethod.html","id":"change-appearance-of-confidence-bands","dir":"Articles","previous_headings":"","what":"Change appearance of confidence bands","title":"Introduction: Plotting Adjusted Predictions and Marginal Means","text":"plots, confidence bands represented shaded area (ribbons), rather error bars (line), dashed dotted lines. Use ci_style = \"errorbar\", ci_style = \"dash\" ci_style = \"dot\" change style confidence bands.","code":""},{"path":"https://strengejacke.github.io/ggeffects/articles/introduction_plotmethod.html","id":"dashed-lines-for-confidence-intervals","dir":"Articles","previous_headings":"Change appearance of confidence bands","what":"Dashed Lines for Confidence Intervals","title":"Introduction: Plotting Adjusted Predictions and Marginal Means","text":"","code":"# dashed lines for CI dat <- predict_response(fit, terms = \"c12hour\") plot(dat, ci_style = \"dash\")"},{"path":"https://strengejacke.github.io/ggeffects/articles/introduction_plotmethod.html","id":"error-bars-for-continuous-variables","dir":"Articles","previous_headings":"Change appearance of confidence bands","what":"Error Bars for Continuous Variables","title":"Introduction: Plotting Adjusted Predictions and Marginal Means","text":"","code":"# facet by group dat <- predict_response(fit, terms = c(\"c12hour\", \"c172code\")) plot(dat, facets = TRUE, ci_style = \"errorbar\", dot_size = 1.5)"},{"path":"https://strengejacke.github.io/ggeffects/articles/introduction_plotmethod.html","id":"dotted-error-bars","dir":"Articles","previous_headings":"Change appearance of confidence bands","what":"Dotted Error Bars","title":"Introduction: Plotting Adjusted Predictions and Marginal Means","text":"style error bars plots categorical x-axis can also changed. default, “error bars”, ci_style = \"dot\" ci_style = \"dashed\" works well","code":"dat <- predict_response(fit, terms = \"c172code\") plot(dat, ci_style = \"dot\")"},{"path":"https://strengejacke.github.io/ggeffects/articles/introduction_plotmethod.html","id":"log-transform-y-axis-for-binomial-models","dir":"Articles","previous_headings":"","what":"Log-transform y-axis for binomial models","title":"Introduction: Plotting Adjusted Predictions and Marginal Means","text":"binomial models, y-axis indicates predicted probabilities event. case, error bars symmetrical.  can use log_y log-transform y-axis. plot()-method automatically choose axis breaks limits fit well value range log-scale.","code":"library(\"lme4\") m <- glm(   cbind(incidence, size - incidence) ~ period,   family = binomial,   data = lme4::cbpp )  dat <- predict_response(m, \"period\")  # normal plot, asymmetrical error bars plot(dat) # plot with log-transformed y-axis plot(dat, log_y = TRUE)"},{"path":"https://strengejacke.github.io/ggeffects/articles/introduction_plotmethod.html","id":"control-y-axis-appearance","dir":"Articles","previous_headings":"","what":"Control y-axis appearance","title":"Introduction: Plotting Adjusted Predictions and Marginal Means","text":"Furthermore, arguments ... passed ggplot::scale_y_continuous() (resp. ggplot::scale_y_log10(), log_y = TRUE), can control appearance y-axis.","code":"# plot with log-transformed y-axis, modify breaks plot(   dat, log_y = TRUE,   breaks = c(0.05, 0.1, 0.15, 0.2, 0.25, 0.3),   limits = c(0.01, 0.3) )"},{"path":"https://strengejacke.github.io/ggeffects/articles/introduction_plotmethod.html","id":"survival-models","dir":"Articles","previous_headings":"","what":"Survival models","title":"Introduction: Plotting Adjusted Predictions and Marginal Means","text":"predict_response() also supports coxph-models survival-package able either plot risk-scores (default), probabilities survival (type = \"survival\") cumulative hazards (type = \"cumulative_hazard\"). Since probabilities survival cumulative hazards changing across time, time-variable automatically used x-axis cases, terms-argument needs two variables.","code":"library(survival) data(\"lung2\") m <- coxph(Surv(time, status) ~ sex + age + ph.ecog, data = lung2)  # predicted risk-scores pr <- predict_response(m, c(\"sex\", \"ph.ecog\")) plot(pr) # probability of survival pr <- predict_response(m, c(\"sex\", \"ph.ecog\"), type = \"survival\") plot(pr) # cumulative hazards pr <- predict_response(m, c(\"sex\", \"ph.ecog\"), type = \"cumulative_hazard\") plot(pr)"},{"path":"https://strengejacke.github.io/ggeffects/articles/introduction_plotmethod.html","id":"custom-color-palettes","dir":"Articles","previous_headings":"","what":"Custom color palettes","title":"Introduction: Plotting Adjusted Predictions and Marginal Means","text":"ggeffects-package pre-defined color-palettes can used colors-argument. Use show_palettes() see available palettes.  two examples showing use pre-defined colors:","code":"show_palettes() dat <- predict_response(fit, terms = c(\"c12hour\", \"c172code\")) plot(dat, facets = TRUE, colors = \"circus\") dat <- predict_response(fit, terms = c(\"c172code\", \"c12hour [quart]\")) plot(dat, colors = \"hero\", dodge = 0.4) # increase space between error bars"},{"path":"https://strengejacke.github.io/ggeffects/articles/introduction_print.html","id":"printing-tables-to-the-console","dir":"Articles","previous_headings":"","what":"Printing Tables to the Console","title":"Introduction: Customizing Table Output","text":"vignettes shows customize tables printed console. options can controlled via format() method, documented detail . default, results printed nicely formatted tables R console. one focal term, separate table printed level value second (third) focal predictor. possible customize table output get compact tables. example,  collapse_tables = TRUE  return single table new columns values focal terms (instead displaying table captions). print_html()   print_md()  can used change output format HTML markdown, respectively. useful inside Rmarkdown documents copy paste HTML tables Word processor. Preferred settings printing tables can set default via  options() .","code":""},{"path":"https://strengejacke.github.io/ggeffects/articles/introduction_print.html","id":"simple-tables","dir":"Articles","previous_headings":"Printing Tables to the Console","what":"Simple Tables","title":"Introduction: Customizing Table Output","text":"First, start default print method, prints simple table predicted values confidence intervals. Printing done automatically, don’t need explicitly call print(). example shown uses efc dataset study situation support family caregivers older relatives. outcome predict score Barthel-Index, barthtot, measure ability perform activities daily living. Barthel-Index ranges 0 100, higher values indicating better functioning. see focal term first column, followed column predicted values, confidence intervals predictions rightmost column. Note printed output, underlying data frame returned predict_response(). data frame returned predict_response() contains predicted values confidence intervals separate columns, can used analyses. Use .data.frame() look complete information. data frame may also contain columns one focal term used. Note columns standardized name, example column name (main) focal term always x. can use names focal terms column names terms_to_colnames = TRUE.","code":"library(ggeffects) data(efc, package = \"ggeffects\") efc <- datawizard::to_factor(efc, c(\"c172code\", \"c161sex\", \"e42dep\")) fit <- lm(barthtot ~ c161sex + c172code + e42dep + c160age, data = efc)  # predicted values of Barthel-Index by educational level out <- predict_response(fit, \"c172code\") # we don't want to include the information about at which values # non-focal terms were held constant - so we remove this attribute attributes(out)$constant.values <- NULL  out #> # Predicted values of Total score BARTHEL INDEX #>  #> c172code                        | Predicted |        95% CI #> ----------------------------------------------------------- #> low level of education          |     93.21 | 87.72,  98.71 #> intermediate level of education |     94.69 | 89.66,  99.71 #> high level of education         |     94.37 | 88.70, 100.04 as.data.frame(predict_response(fit, \"c172code\")) #>                                 x predicted std.error conf.low conf.high group #> 1          low level of education  93.21421  2.801569 87.71505  98.71337     1 #> 2 intermediate level of education  94.68719  2.561423 89.65941  99.71497     1 #> 3         high level of education  94.37114  2.886906 88.70447 100.03781     1 as.data.frame(   predict_response(fit, \"c172code\"),   terms_to_colnames = TRUE ) #>                          c172code predicted std.error conf.low conf.high group #> 1          low level of education  93.21421  2.801569 87.71505  98.71337     1 #> 2 intermediate level of education  94.68719  2.561423 89.65941  99.71497     1 #> 3         high level of education  94.37114  2.886906 88.70447 100.03781     1"},{"path":"https://strengejacke.github.io/ggeffects/articles/introduction_print.html","id":"customizing-the-confidence-intervals-column","dir":"Articles","previous_headings":"Printing Tables to the Console","what":"Customizing the Confidence Intervals Column","title":"Introduction: Customizing Table Output","text":"print() internally calls insight::format_table() insight::export_table(), possible pass arguments functions via print() method. example, can control whether confidence intervals enclosed parentheses brackets using ci_brackets argument.","code":"# using brackets around confidence intervals print(out, ci_brackets = c(\"[\", \"]\")) #> # Predicted values of Total score BARTHEL INDEX #>  #> c172code                        | Predicted |          95% CI #> ------------------------------------------------------------- #> low level of education          |     93.21 | [87.72,  98.71] #> intermediate level of education |     94.69 | [89.66,  99.71] #> high level of education         |     94.37 | [88.70, 100.04]"},{"path":"https://strengejacke.github.io/ggeffects/articles/introduction_print.html","id":"putting-confidence-intervals-next-to-the-predicted-values","dir":"Articles","previous_headings":"Printing Tables to the Console","what":"Putting Confidence Intervals next to the Predicted Values","title":"Introduction: Customizing Table Output","text":"prefer confidence intervals next predicted values, use collapse_ci = TRUE. default, confidence intervals enclosed parentheses, better readability. can changed ci_brackets. column name (output) adjusted accordingly.","code":"# confidence intervals next to predicted values print(out, collapse_ci = TRUE) #> # Predicted values of Total score BARTHEL INDEX #>  #> c172code                        |    Predicted (95% CI) #> ------------------------------------------------------- #> low level of education          | 93.21 (87.72,  98.71) #> intermediate level of education | 94.69 (89.66,  99.71) #> high level of education         | 94.37 (88.70, 100.04)  # using brackets around confidence intervals print(out, collapse_ci = TRUE, ci_brackets = c(\"[\", \"]\")) #> # Predicted values of Total score BARTHEL INDEX #>  #> c172code                        |    Predicted (95% CI) #> ------------------------------------------------------- #> low level of education          | 93.21 [87.72,  98.71] #> intermediate level of education | 94.69 [89.66,  99.71] #> high level of education         | 94.37 [88.70, 100.04]"},{"path":"https://strengejacke.github.io/ggeffects/articles/introduction_print.html","id":"make-use-of-labelled-data","dir":"Articles","previous_headings":"Printing Tables to the Console","what":"Make use of Labelled Data","title":"Introduction: Customizing Table Output","text":"labelled data, can include value variable labels output. example, using variable_labels = TRUE include variable labels column headers. However, can result quite long column headers. Value labels can included using value_labels = TRUE. first example, used datawizard::to_factor() convert variables factors. function also uses value labels factor levels, ’s see value labels output, see difference : default, actual values shown output, value labels (unless, shown , convert factor assign value labels factor levels). However, want include value labels output, use value_labels = TRUE. replace actual values value labels. Note works values labelled, otherwise actual values shown. Beside value labels, related value prefixed brackets.","code":"# include variable labels print(out, variable_labels = TRUE) #> # Predicted values of Total score BARTHEL INDEX #>  #> carer's level of education      | Predicted values of Total score BARTHEL INDEX |        95% CI #> ----------------------------------------------------------------------------------------------- #> low level of education          |                                         93.21 | 87.72,  98.71 #> intermediate level of education |                                         94.69 | 89.66,  99.71 #> high level of education         |                                         94.37 | 88.70, 100.04 data(efc, package = \"ggeffects\")  table(efc$c172code) #>  #>   1   2   3  #> 180 506 156  table(datawizard::to_factor(efc$c172code)) #>  #>          low level of education intermediate level of education         high level of education  #>                             180                             506                             156 data(efc, package = \"ggeffects\") fit <- lm(barthtot ~ c161sex + c172code + e42dep + c160age, data = efc)  # predicted values of Barthel-Index by educational level out <- predict_response(fit, \"c172code\") attributes(out)$constant.values <- NULL  out #> # Predicted values of Total score BARTHEL INDEX #>  #> c172code | Predicted |       95% CI #> ----------------------------------- #>        1 |     63.53 | 61.05, 66.01 #>        2 |     64.60 | 63.26, 65.94 #>        3 |     65.66 | 63.08, 68.24 print(out, value_labels = TRUE) #> # Predicted values of Total score BARTHEL INDEX #>  #>                            c172code | Predicted |       95% CI #> -------------------------------------------------------------- #>          [1] low level of education |     63.53 | 61.05, 66.01 #> [2] intermediate level of education |     64.60 | 63.26, 65.94 #>         [3] high level of education |     65.66 | 63.08, 68.24"},{"path":"https://strengejacke.github.io/ggeffects/articles/introduction_print.html","id":"more-than-one-focal-term---multiple-tables","dir":"Articles","previous_headings":"Printing Tables to the Console","what":"More than one Focal Term - Multiple Tables","title":"Introduction: Customizing Table Output","text":"Next, use model two-way interaction. means predicted values (main) focal term educational level (c172code) differ, depending values second focal term, example hours_per_week (hours care provided per week, either \"low\" \"high\"). Whenever one focal term, output split multiple tables. first table shows predicted values first focal term, second table shows predicted values second focal term . values second focal term used headings tables. prefer one table , use collapse_tables = TRUE. merge tables one, values second focal term included additional column. three focal terms, e.g. three-way-interaction, tables split combination values levels second third focal terms. now get heading two rows, first row shows values second focal term, second row shows values third focal term. , can collapse tables one table. can also shorten subheadings tables group_name = FALSE. remove name second third focal term subheading, values focal terms shown. , subheadings shorter thus automatically displayed one row.","code":"data(efc, package = \"ggeffects\") efc <- datawizard::to_factor(efc, c(\"c172code\", \"c161sex\", \"e42dep\")) # for sake of demonstration, we create a new variable, dichotomized efc$hours_per_week <- factor(datawizard::categorize(efc$c12hour), labels = c(\"low\", \"high\")) fit <- lm(barthtot ~ hours_per_week * c172code + c161sex + e42dep, data = efc)  # predicted values of Barthel-Index by educational level and hours per week out <- predict_response(fit, c(\"c172code\", \"hours_per_week\")) # we don't want to include the information about at which values # non-focal terms were held constant - so we remove this attribute attributes(out)$constant.values <- NULL  out #> # Predicted values of Total score BARTHEL INDEX #>  #> hours_per_week: low #>  #> c172code                        | Predicted |        95% CI #> ----------------------------------------------------------- #> low level of education          |     93.22 | 86.89,  99.55 #> intermediate level of education |     96.07 | 91.15, 101.00 #> high level of education         |     97.11 | 90.86, 103.36 #>  #> hours_per_week: high #>  #> c172code                        | Predicted |        95% CI #> ----------------------------------------------------------- #> low level of education          |     85.73 | 79.67,  91.79 #> intermediate level of education |     86.85 | 81.16,  92.53 #> high level of education         |     84.50 | 78.07,  90.93 print(out, collapse_tables = TRUE) #> # Predicted values of Total score BARTHEL INDEX #>  #> c172code                        | hours_per_week | Predicted |        95% CI #> ---------------------------------------------------------------------------- #> low level of education          |            low |     93.22 | 86.89,  99.55 #> intermediate level of education |                |     96.07 | 91.15, 101.00 #> high level of education         |                |     97.11 | 90.86, 103.36 #> low level of education          |           high |     85.73 | 79.67,  91.79 #> intermediate level of education |                |     86.85 | 81.16,  92.53 #> high level of education         |                |     84.50 | 78.07,  90.93 fit <- lm(barthtot ~ hours_per_week * c172code * c161sex + e42dep, data = efc) out <- predict_response(fit, c(\"c172code\", \"hours_per_week\", \"c161sex\")) attributes(out)$constant.values <- NULL out #> # Predicted values of Total score BARTHEL INDEX #>  #> hours_per_week: low #> c161sex: Male #>  #> c172code                        | Predicted |        95% CI #> ----------------------------------------------------------- #> low level of education          |     91.34 | 81.71, 100.97 #> intermediate level of education |     97.34 | 91.56, 103.13 #> high level of education         |     97.91 | 89.59, 106.24 #>  #> hours_per_week: low #> c161sex: Female #>  #> c172code                        | Predicted |        95% CI #> ----------------------------------------------------------- #> low level of education          |     93.71 | 87.29, 100.12 #> intermediate level of education |     95.52 | 90.80, 100.25 #> high level of education         |     96.54 | 90.00, 103.08 #>  #> hours_per_week: high #> c161sex: Male #>  #> c172code                        | Predicted |        95% CI #> ----------------------------------------------------------- #> low level of education          |     87.36 | 79.19,  95.52 #> intermediate level of education |     85.42 | 78.59,  92.25 #> high level of education         |     81.65 | 72.77,  90.54 #>  #> hours_per_week: high #> c161sex: Female #>  #> c172code                        | Predicted |        95% CI #> ----------------------------------------------------------- #> low level of education          |     85.13 | 79.12,  91.14 #> intermediate level of education |     87.05 | 81.70,  92.40 #> high level of education         |     85.39 | 78.86,  91.92 print(out, collapse_tables = TRUE, collapse_ci = TRUE) #> # Predicted values of Total score BARTHEL INDEX #>  #> c172code                        | hours_per_week | c161sex |    Predicted (95% CI) #> ---------------------------------------------------------------------------------- #> low level of education          |            low |    Male | 91.34 (81.71, 100.97) #> intermediate level of education |                |         | 97.34 (91.56, 103.13) #> high level of education         |                |         | 97.91 (89.59, 106.24) #> low level of education          |                |  Female | 93.71 (87.29, 100.12) #> intermediate level of education |                |         | 95.52 (90.80, 100.25) #> high level of education         |                |         | 96.54 (90.00, 103.08) #> low level of education          |           high |    Male | 87.36 (79.19,  95.52) #> intermediate level of education |                |         | 85.42 (78.59,  92.25) #> high level of education         |                |         | 81.65 (72.77,  90.54) #> low level of education          |                |  Female | 85.13 (79.12,  91.14) #> intermediate level of education |                |         | 87.05 (81.70,  92.40) #> high level of education         |                |         | 85.39 (78.86,  91.92) print(out, group_name = FALSE) #> # Predicted values of Total score BARTHEL INDEX #>  #> low, Male #>  #> c172code                        | Predicted |        95% CI #> ----------------------------------------------------------- #> low level of education          |     91.34 | 81.71, 100.97 #> intermediate level of education |     97.34 | 91.56, 103.13 #> high level of education         |     97.91 | 89.59, 106.24 #>  #> low, Female #>  #> c172code                        | Predicted |        95% CI #> ----------------------------------------------------------- #> low level of education          |     93.71 | 87.29, 100.12 #> intermediate level of education |     95.52 | 90.80, 100.25 #> high level of education         |     96.54 | 90.00, 103.08 #>  #> high, Male #>  #> c172code                        | Predicted |        95% CI #> ----------------------------------------------------------- #> low level of education          |     87.36 | 79.19,  95.52 #> intermediate level of education |     85.42 | 78.59,  92.25 #> high level of education         |     81.65 | 72.77,  90.54 #>  #> high, Female #>  #> c172code                        | Predicted |        95% CI #> ----------------------------------------------------------- #> low level of education          |     85.13 | 79.12,  91.14 #> intermediate level of education |     87.05 | 81.70,  92.40 #> high level of education         |     85.39 | 78.86,  91.92"},{"path":"https://strengejacke.github.io/ggeffects/articles/introduction_print.html","id":"printing-html-tables","dir":"Articles","previous_headings":"Printing Tables to the Console","what":"Printing HTML Tables","title":"Introduction: Customizing Table Output","text":"examples, tables HTML format can created, simply calling print_html(). create HTML table, can used R Markdown documents, example, Shiny apps, can displayed viewer pane IDE. can simply copy paste table word processor.","code":""},{"path":"https://strengejacke.github.io/ggeffects/articles/introduction_print.html","id":"using-the-tinytable-package","dir":"Articles","previous_headings":"Printing Tables to the Console > Printing HTML Tables","what":"Using the {tinytable} Package","title":"Introduction: Customizing Table Output","text":"produce HTML tables, need install {tinytable} {gt} package first. default, {tinytable} used, can switch {gt} setting options(ggeffects_html_engine = \"gt\"), using engine argument. Predicted values Total score BARTHEL INDEX Predicted values Total score BARTHEL INDEX shown tables theme applied (.e. theme = NULL), however, pre-defined table themes (using {tinytable}) change table appearance, . can applied using theme argument, must one \"default\", \"grid\",\"striped\", \"bootstrap\", \"darklines\". Predicted values Total score BARTHEL INDEX Predicted values Total score BARTHEL INDEX Since print_html() returns tinytable object, can pass returned object functions {tinytable} package, customize table. example, can adjust table width, use custom border colors etc. Predicted values Total score BARTHEL INDEX","code":"# for example: print_html(out) # or: print_html(out, collapse_tables = TRUE, collapse_ci = TRUE) # for the sake of demonstratiion, we want fewer focal terms fit <- lm(barthtot ~ hours_per_week * c161sex + e42dep, data = efc) out <- predict_response(fit, c(\"hours_per_week\", \"c161sex\"))  # \"bootstrap\" theme print_html(out, theme = \"bootstrap\") # \"striped\" theme, from tinytables print_html(out, theme = \"striped\") tt_out <- print_html(out, collapse_tables = TRUE, collapse_ci = TRUE) tinytable::style_tt(tt_out, i = 0, line = \"t\", line_color = \"red\")"},{"path":"https://strengejacke.github.io/ggeffects/articles/introduction_print.html","id":"using-the-gt-package","dir":"Articles","previous_headings":"Printing Tables to the Console > Printing HTML Tables","what":"Using the {gt} Package","title":"Introduction: Customizing Table Output","text":"prefer use {gt} package, can switch package setting options(ggeffects_html_engine = \"gt\"), using engine argument. example, print_html() returns gt object, can customized well.","code":"fit <- lm(barthtot ~ hours_per_week * c161sex + e42dep, data = efc) out <- predict_response(fit, c(\"hours_per_week\", \"c161sex\")) print_html(out, engine = \"gt\")"},{"path":"https://strengejacke.github.io/ggeffects/articles/introduction_print.html","id":"customizing-output-of-test_predictions","dir":"Articles","previous_headings":"Printing Tables to the Console","what":"Customizing Output of test_predictions()","title":"Introduction: Customizing Table Output","text":"tables test_predictions() (alias hypothesis_test()) can customized similar fashion. Major difference function usually includes p-values, additional argument collapse_p collapse columns contrasts p-values one column. Let’s simulate data fit model interaction term. default output shows contrasts (estimates pairwise comparisons), confidence intervals p-values separate columns. different combinations collapse multiple columns one. p-values /confidence intervals combined contrasts.","code":"set.seed(123) n <- 200 d <- data.frame(   outcome = rnorm(n),   grp = as.factor(sample(c(\"treatment\", \"control\"), n, TRUE)),   episode = as.factor(sample.int(3, n, TRUE)),   sex = as.factor(sample(c(\"female\", \"male\"), n, TRUE, prob = c(0.4, 0.6))) ) model <- lm(outcome ~ grp * episode, data = d) out <- test_predictions(model, c(\"episode [1,2]\", \"grp\")) out #> # Pairwise comparisons #>  #> episode |                 grp | Contrast |       95% CI |     p #> --------------------------------------------------------------- #> 1-2     |     control-control |    -0.20 | -0.63,  0.23 | 0.350 #> 1-1     |   control-treatment |     0.42 | -0.04,  0.88 | 0.074 #> 1-2     |   control-treatment |    -0.15 | -0.61,  0.32 | 0.529 #> 2-1     |   control-treatment |     0.62 |  0.16,  1.09 | 0.009 #> 2-2     |   control-treatment |     0.06 | -0.41,  0.52 | 0.816 #> 1-2     | treatment-treatment |    -0.57 | -1.06, -0.07 | 0.026 # collapse confidence intervals print(out, collapse_ci = TRUE) #> # Pairwise comparisons #>  #> episode |                 grp |    Contrast (95% CI) |     p #> ------------------------------------------------------------ #> 1-2     |     control-control | -0.20 (-0.63,  0.23) | 0.350 #> 1-1     |   control-treatment |  0.42 (-0.04,  0.88) | 0.074 #> 1-2     |   control-treatment | -0.15 (-0.61,  0.32) | 0.529 #> 2-1     |   control-treatment |  0.62  (0.16,  1.09) | 0.009 #> 2-2     |   control-treatment |  0.06 (-0.41,  0.52) | 0.816 #> 1-2     | treatment-treatment | -0.57 (-1.06, -0.07) | 0.026  # collapse p-values print(out, collapse_p = TRUE) #> # Pairwise comparisons #>  #> episode |                 grp | Contrast |       95% CI #> ------------------------------------------------------- #> 1-2     |     control-control |  -0.20   | -0.63,  0.23 #> 1-1     |   control-treatment |   0.42   | -0.04,  0.88 #> 1-2     |   control-treatment |  -0.15   | -0.61,  0.32 #> 2-1     |   control-treatment |   0.62** |  0.16,  1.09 #> 2-2     |   control-treatment |   0.06   | -0.41,  0.52 #> 1-2     | treatment-treatment |  -0.57*  | -1.06, -0.07  # collapse both, confidence intervals and p-values print(out, collapse_ci = TRUE, collapse_p = TRUE) #> # Pairwise comparisons #>  #> episode |                 grp |      Contrast (95% CI) #> ------------------------------------------------------ #> 1-2     |     control-control | -0.20   (-0.63,  0.23) #> 1-1     |   control-treatment |  0.42   (-0.04,  0.88) #> 1-2     |   control-treatment | -0.15   (-0.61,  0.32) #> 2-1     |   control-treatment |  0.62**  (0.16,  1.09) #> 2-2     |   control-treatment |  0.06   (-0.41,  0.52) #> 1-2     | treatment-treatment | -0.57*  (-1.06, -0.07)"},{"path":"https://strengejacke.github.io/ggeffects/articles/introduction_print.html","id":"defining-a-default-style","dir":"Articles","previous_headings":"Printing Tables to the Console","what":"Defining a Default Style","title":"Introduction: Customizing Table Output","text":"found preferred setting, can define default style tables defining global options, .e. use options(<option_name>, <value>). following options available: ggeffects_ci_brackets: Define character vector length two, indicating opening closing parentheses encompass confidence intervals values, e.g. options(ggeffects_ci_brackets = c(\"[\", \"]\")). ggeffects_collapse_ci: Logical, TRUE, columns predicted values confidence intervals collapsed one column, e.g. options(ggeffects_collapse_ci = TRUE). ggeffects_collapse_p: Logical, TRUE, columns predicted values (contrasts) p-values collapsed one column, e.g. options(ggeffects_collapse_p = TRUE). Note p-values replaced asterisk-symbols (stars) empty strings ggeffects_collapse_p = TRUE, depending significance level. ggeffects_collapse_tables: Logical, TRUE, multiple tables subgroups combined one table. works one focal term, e.g. options(ggeffects_collapse_tables = TRUE). ggeffects_html_engine: String, either \"gt\" \"tt\". Defines default engine use printing HTML tables. \"tt\", tinytable package used, \"gt\", gt package used, e.g. options(ggeffects_html_engine = \"gt\").","code":""},{"path":"https://strengejacke.github.io/ggeffects/articles/introduction_randomeffects.html","id":"population-level-predictions-for-mixed-effects-models","dir":"Articles","previous_headings":"","what":"Population-level predictions for mixed effects models","title":"Introduction: Adjusted Predictions and Marginal Effects for Random Effects Models","text":"Mixed models used account dependency observations within groups, e.g. repeated measurements within subjects, students within schools. dependency modeled random effects, .e. mixed model least one grouping variable (factor) higher level unit. lowest level, fixed effects, .e. “independent variables” “predictors”. Adjusted predictions can now calculated specified values levels focal terms, however, either full sample (population-level) level grouping variable (unit-level). latter particularly useful grouping variable interest, e.g. want compare effect predictor different groups. get population-level predictions, set type = \"fixed\" type = \"zero_inflation\" (models zero-inflation component).","code":""},{"path":"https://strengejacke.github.io/ggeffects/articles/introduction_randomeffects.html","id":"conditional-and-marginal-effectspredictions","dir":"Articles","previous_headings":"Population-level predictions for mixed effects models","what":"Conditional and marginal effects/predictions","title":"Introduction: Adjusted Predictions and Marginal Effects for Random Effects Models","text":"start population-level predictions. can either calculate conditional marginal effect (see detail also Heiss 2022). conditional effect effect predictor average typical group, marginal effect average effect predictor across groups. E.g. let’s say countries grouping variable gdp (gross domestic product per capita) predictor, conditional marginal effect : conditional effect: effect gdp average typical country. get conditional predictions, use predict_response() predict_response(margin = \"mean_mode\"). marginal effect: average effect gdp across countries. get marginal (average) predictions, use predict_response(margin = \"empirical\"). term “effect” referes strength relationship predictor response, “predictions” refer actual predicted values response. Thus, following, talk conditional marginal (average) predictions (instead effects). balanced data set, groups number observations, conditional marginal predictions often similar (maybe slightly different, depending non-focal predictors). However, unbalanced data, conditional marginal predicted values can largely differ.","code":"library(ggeffects) library(lme4) data(sleepstudy)  # balanced data set m <- lmer(Reaction ~ Days + (1 + Days | Subject), data = sleepstudy)  # conditional predictions predict_response(m, \"Days [1,5,9]\") #> # Predicted values of Reaction #>  #> Days | Predicted |         95% CI #> --------------------------------- #>    1 |    261.87 | 248.48, 275.27 #>    5 |    303.74 | 284.83, 322.65 #>    9 |    345.61 | 316.74, 374.48 #>  #> Adjusted for: #> * Subject = 0 (population-level)  # average marginal predictions predict_response(m, \"Days [1,5,9]\", margin = \"empirical\") #> # Average predicted values of Reaction #>  #> Days | Predicted |         95% CI #> --------------------------------- #>    1 |    261.87 | 248.48, 275.27 #>    5 |    303.74 | 284.83, 322.65 #>    9 |    345.61 | 316.74, 374.48  # create imbalanced data set set.seed(123) strapped <- sleepstudy[sample.int(nrow(sleepstudy), nrow(sleepstudy), replace = TRUE), ] m <- lmer(Reaction ~ Days + (1 + Days | Subject), data = strapped)  # conditional predictions predict_response(m, \"Days [1,5,9]\") #> # Predicted values of Reaction #>  #> Days | Predicted |         95% CI #> --------------------------------- #>    1 |    261.49 | 246.57, 276.40 #>    5 |    302.13 | 281.30, 322.97 #>    9 |    342.78 | 311.19, 374.37 #>  #> Adjusted for: #> * Subject = 0 (population-level)  # average marginal predictions predict_response(m, \"Days [1,5,9]\", margin = \"empirical\") #> # Average predicted values of Reaction #>  #> Days | Predicted |         95% CI #> --------------------------------- #>    1 |    259.04 | 244.13, 273.95 #>    5 |    300.01 | 279.17, 320.84 #>    9 |    340.97 | 309.37, 372.56"},{"path":"https://strengejacke.github.io/ggeffects/articles/introduction_randomeffects.html","id":"population-level-predictions-and-the-reml-argument","dir":"Articles","previous_headings":"Population-level predictions for mixed effects models","what":"Population-level predictions and the REML argument","title":"Introduction: Adjusted Predictions and Marginal Effects for Random Effects Models","text":"conditional predictions returned predict_response() default marginalization (.e. margin = \"mean_reference\" \"mean_mode\") may differ… depending setting REML argument model fitting; depending whether factors included model .","code":"library(glmmTMB) set.seed(123) sleepstudy$x <- as.factor(sample(1:3, nrow(sleepstudy), replace = TRUE)) # REML is FALSE m1 <- glmmTMB(Reaction ~ Days + x + (1 + Days | Subject), data = sleepstudy, REML = FALSE) # REML is TRUE m2 <- glmmTMB(Reaction ~ Days + x + (1 + Days | Subject), data = sleepstudy, REML = TRUE)  # predictions when REML is FALSE predict_response(m1, \"Days [1:3]\") #> # Predicted values of Reaction #>  #> Days | Predicted |         95% CI #> --------------------------------- #>    1 |    260.22 | 245.82, 274.63 #>    2 |    270.69 | 255.77, 285.61 #>    3 |    281.16 | 265.19, 297.12 #>  #> Adjusted for: #> *       x = 1 #> * Subject = NA (population-level)  # predictions when REML is TRUE predict_response(m2, \"Days [1:3]\") #> # Predicted values of Reaction #>  #> Days | Predicted |         95% CI #> --------------------------------- #>    1 |    254.63 | 246.25, 263.02 #>    2 |    265.07 | 257.33, 272.81 #>    3 |    275.50 | 268.22, 282.78 #>  #> Adjusted for: #> *       x = 1 #> * Subject = NA (population-level)"},{"path":"https://strengejacke.github.io/ggeffects/articles/introduction_randomeffects.html","id":"population-level-predictions-for-zero-inflated-mixed-models","dir":"Articles","previous_headings":"","what":"Population-level predictions for zero-inflated mixed models","title":"Introduction: Adjusted Predictions and Marginal Effects for Random Effects Models","text":"zero-inflated mixed effects models, typically fitted glmmTMB GLMMadaptive packages, predict_response() can return predicted values response, different model components: population-level predictions, conditioned fixed effects (conditional “count” model) (type = \"fixed\") population-level predictions, conditioned fixed effects zero-inflation component (type = \"zero_inflated\"), returning expected (predicted) values response zero-inflation probabilities (type = \"zi_prob\") type = \"simulate\" can used obtain marginal predictions, averaged across random effects groups non-focal terms marginal predictions using margin = \"empirical\" also averaged across random effects groups non-focal terms. major difference type = \"simulate\" margin = \"empirical\" also returns counterfactual predictions. predict_response(margin = \"empirical\"), valid values type usually based model’s predict() method. models class glmmTMB, \"response\", \"link\", \"conditional\", \"zprob\", \"zlink\", \"disp\". However, zero-inflated models, type = \"fixed\" type = \"zero_inflated\" can used aliases (instead \"conditional\" \"response\").","code":""},{"path":"https://strengejacke.github.io/ggeffects/articles/introduction_randomeffects.html","id":"conditional-predictions-for-the-count-model","dir":"Articles","previous_headings":"Population-level predictions for zero-inflated mixed models","what":"Conditional predictions for the count model","title":"Introduction: Adjusted Predictions and Marginal Effects for Random Effects Models","text":"First, show examples conditional predictions, default marginalization method predict_response(). Similar mixed models without zero-inflation component, type = \"fixed\" returns predictions population-level, conditional (“count”) model .","code":"library(glmmTMB) data(Salamanders) m <- glmmTMB(   count ~ spp + mined + (1 | site),   ziformula = ~ spp + mined,   family = poisson(),   data = Salamanders ) predict_response(m, \"spp\") #> # Predicted (conditional) counts of count #>  #> spp   | Predicted |     95% CI #> ------------------------------ #> GP    |      0.73 | 0.42, 1.28 #> PR    |      0.42 | 0.20, 0.87 #> DM    |      0.94 | 0.56, 1.58 #> EC-A  |      0.60 | 0.33, 1.10 #> EC-L  |      1.42 | 0.85, 2.37 #> DES-L |      1.34 | 0.79, 2.26 #> DF    |      0.78 | 0.46, 1.31 #>  #> Adjusted for: #> * mined = yes #> *  site = NA (population-level)"},{"path":"https://strengejacke.github.io/ggeffects/articles/introduction_randomeffects.html","id":"conditional-predictions-for-the-full-model","dir":"Articles","previous_headings":"Population-level predictions for zero-inflated mixed models","what":"Conditional predictions for the full model","title":"Introduction: Adjusted Predictions and Marginal Effects for Random Effects Models","text":"type = \"zero_inflated\", results expected values response, mu*(1-p). Since zero inflation conditional model working “opposite directions”, higher expected value zero inflation means lower response, higher value conditional (“count”) model means higher response. possible calculate predicted values predict(..., type = \"response\"), standard errors confidence intervals can derived directly predict()-function. Thus, confidence intervals type = \"zero_inflated\" based quantiles simulated draws multivariate normal distribution (see also Brooks et al. 2017, pp.391-392 details).","code":"predict_response(m, \"spp\", type = \"zero_inflated\") #> # Expected counts of count #>  #> spp   | Predicted |     95% CI #> ------------------------------ #> GP    |      0.20 | 0.02, 0.38 #> PR    |      0.03 | 0.00, 0.06 #> DM    |      0.32 | 0.08, 0.56 #> EC-A  |      0.07 | 0.00, 0.13 #> EC-L  |      0.42 | 0.12, 0.73 #> DES-L |      0.49 | 0.13, 0.85 #> DF    |      0.30 | 0.09, 0.51 #>  #> Adjusted for: #> * mined = yes #> *  site = NA (population-level)"},{"path":"https://strengejacke.github.io/ggeffects/articles/introduction_randomeffects.html","id":"marginal-predictions-for-the-full-model-simulated-draws","dir":"Articles","previous_headings":"Population-level predictions for zero-inflated mixed models","what":"Marginal predictions for the full model (simulated draws)","title":"Introduction: Adjusted Predictions and Marginal Effects for Random Effects Models","text":"examples, get conditional, marginal predictions. E.g., predictions conditioned mined set \"yes\", predictions refer typical (random effects) group. However, possible obtain predicted values simulating model, predictions based simulate() (see Brooks et al. 2017, pp.392-393 details). return expected values response (marginal predictions), averaged across random effects groups non-focal terms. achieve , use type = \"simulate\". Note prediction-type usually returns larger intervals, accounts model uncertainties.","code":"predict_response(m, \"spp\", type = \"simulate\") #> # Expected counts of count #>  #> spp   | Predicted |     95% CI #> ------------------------------ #> GP    |      1.10 | 0.00, 4.31 #> PR    |      0.30 | 0.00, 2.23 #> DM    |      1.54 | 0.00, 5.49 #> EC-A  |      0.55 | 0.00, 3.11 #> EC-L  |      2.20 | 0.00, 7.35 #> DES-L |      2.26 | 0.00, 7.14 #> DF    |      1.35 | 0.00, 4.72"},{"path":"https://strengejacke.github.io/ggeffects/articles/introduction_randomeffects.html","id":"marginal-predictions-for-the-full-model-average-predictions","dir":"Articles","previous_headings":"Population-level predictions for zero-inflated mixed models","what":"Marginal predictions for the full model (average predictions)","title":"Introduction: Adjusted Predictions and Marginal Effects for Random Effects Models","text":"similar fashion, can obtain average marginal predictions zero-inflated mixed models margin = \"empirical\". returned values comparable predict_response(type = \"simulate\"), margin = \"empirical\" also returns expected values response, averaged across random effects groups non-focal terms. next example shows average marginal predicted values spp response across sites, taking zero-inflation component account (.e. type = \"zero_inflated\").","code":"predict_response(m, \"spp\", type = \"zero_inflated\", margin = \"empirical\") #> # Average expected counts of count #>  #> spp   | Predicted |     95% CI #> ------------------------------ #> GP    |      1.08 | 0.76, 1.41 #> PR    |      0.30 | 0.13, 0.46 #> DM    |      1.52 | 1.11, 1.94 #> EC-A  |      0.54 | 0.31, 0.78 #> EC-L  |      2.17 | 1.60, 2.74 #> DES-L |      2.24 | 1.69, 2.79 #> DF    |      1.32 | 0.96, 1.68"},{"path":"https://strengejacke.github.io/ggeffects/articles/introduction_randomeffects.html","id":"bias-correction-for-non-gaussian-models","dir":"Articles","previous_headings":"","what":"Bias-correction for non-Gaussian models","title":"Introduction: Adjusted Predictions and Marginal Effects for Random Effects Models","text":"non-Gaussian models, predicted values back-transformed response scale. However, back-transforming population-level predictions (mixed models, type = \"fixed\") ignores effect variation around population mean, hence, result original data scale biased due Jensen’s inequality. case, can appropriate apply bias-correction. done setting bias_correction = TRUE. default, insight::get_variance_residual() used extract residual variance, used calculate amount correction. Optionally, can provide estimates uncertainty, e.g. based insight::get_variance_random(), using sigma argument. ggeffects warn users per session whenever bias-correction can appropriate.","code":"# no bias-correction predict_response(m, \"spp\") #> You are calculating adjusted predictions on the population-level (i.e. `type = \"fixed\"`) for a *generalized* linear mixed model. #>   This may produce biased estimates due to Jensen's inequality. Consider setting `bias_correction = TRUE` to correct for this bias. #>   See also the documentation of the `bias_correction` argument. #> # Predicted (conditional) counts of count #>  #> spp   | Predicted |     95% CI #> ------------------------------ #> GP    |      0.73 | 0.42, 1.28 #> PR    |      0.42 | 0.20, 0.87 #> DM    |      0.94 | 0.56, 1.58 #> EC-A  |      0.60 | 0.33, 1.10 #> EC-L  |      1.42 | 0.85, 2.37 #> DES-L |      1.34 | 0.79, 2.26 #> DF    |      0.78 | 0.46, 1.31 #>  #> Adjusted for: #> * mined = yes #> *  site = NA (population-level)  # bias-correction predict_response(m, \"spp\", bias_correction = TRUE) #> # Predicted (conditional) counts of count #>  #> spp   | Predicted |     95% CI #> ------------------------------ #> GP    |      0.97 | 0.55, 1.69 #> PR    |      0.55 | 0.27, 1.15 #> DM    |      1.24 | 0.73, 2.09 #> EC-A  |      0.79 | 0.43, 1.45 #> EC-L  |      1.87 | 1.12, 3.12 #> DES-L |      1.76 | 1.04, 2.98 #> DF    |      1.02 | 0.60, 1.74 #>  #> Adjusted for: #> * mined = yes #> *  site = NA (population-level)  # bias-correction, using user-defined sigma-value predict_response(m, \"spp\", bias_correction = TRUE, sigma = insight::get_sigma(m)) #> # Predicted (conditional) counts of count #>  #> spp   | Predicted |     95% CI #> ------------------------------ #> GP    |      1.10 | 0.63, 1.92 #> PR    |      0.63 | 0.30, 1.30 #> DM    |      1.41 | 0.83, 2.38 #> EC-A  |      0.90 | 0.49, 1.65 #> EC-L  |      2.13 | 1.27, 3.55 #> DES-L |      2.01 | 1.19, 3.39 #> DF    |      1.16 | 0.69, 1.97 #>  #> Adjusted for: #> * mined = yes #> *  site = NA (population-level)"},{"path":"https://strengejacke.github.io/ggeffects/articles/introduction_randomeffects.html","id":"unit-level-predictions-predictions-for-each-level-of-random-effects","dir":"Articles","previous_headings":"","what":"Unit-level predictions (predictions for each level of random effects)","title":"Introduction: Adjusted Predictions and Marginal Effects for Random Effects Models","text":"Adjusted predictions can also calculated group level (unit-level) mixed models. Simply add name related random effects term terms-argument, set type = \"random\". predict_response(margin = \"empirical\"), don’t need set type = \"random\". following example, fit linear mixed model first simply plot adjusted predictions population-level.  compute adjusted predictions grouping level (unit-level), add related random effects term terms-argument. case, predictions calculated level specified random effects term.  Since average marginal predictions already consider random effects averaging groups, type-argument needed margin = \"empirical\" set.  Adjusted predictions can also calculated specific unit-levels . Add related values brackets variable name terms-argument.  complex plot scenario term (c12hour) certain values two terms (c161sex, c160age) specific unit-levels random effects (e15relat), four variables terms-argument.  group factor many levels, can also take random sample possible levels plot adjusted predictions subsample unit-levels. , use term = \"<groupfactor> [sample=n]\".  can also add observed data points group using show_data = TRUE.","code":"library(sjlabelled) data(efc) efc$e15relat <- as_label(efc$e15relat) m <- lmer(neg_c_7 ~ c12hour + c160age + c161sex + (1 | e15relat), data = efc) me <- predict_response(m, terms = \"c12hour\") plot(me) me <- predict_response(m, terms = c(\"c12hour\", \"e15relat\"), type = \"random\") plot(me, show_ci = FALSE) me <- predict_response(m, terms = c(\"c12hour\", \"e15relat\"), margin = \"empirical\") plot(me, show_ci = FALSE) me <- predict_response(m, terms = c(\"c12hour\", \"e15relat [child,sibling]\"), type = \"random\") plot(me, show_ci = FALSE) me <- predict_response(   m,   terms = c(\"c12hour\", \"c161sex\", \"c160age\", \"e15relat [child,sibling]\"),   type = \"random\" ) plot(me, n_rows = 2) set.seed(123) m <- lmer(Reaction ~ Days + (1 + Days | Subject), data = sleepstudy) me <- predict_response(m, terms = c(\"Days\", \"Subject [sample=7]\"), type = \"random\") plot(me) plot(me, show_data = TRUE, show_ci = FALSE)"},{"path":"https://strengejacke.github.io/ggeffects/articles/introduction_randomeffects.html","id":"population-level-predictions-for-gam-and-glmer-models","dir":"Articles","previous_headings":"","what":"Population-level predictions for gam and glmer models","title":"Introduction: Adjusted Predictions and Marginal Effects for Random Effects Models","text":"output predict_response() indicates grouping variable random effects set “population level” (adjustment), e.g. case lme4, following printed: Adjusted : * Subject = 0 (population-level) comparable model fitted mgcv::gam() print different message: Adjusted : * Subject = 308 reason correctly printed information adjustment random effects based insight::find_random(), returns NULL gams random effects defined via s(..., bs = \"re\"). However, predictions still correct, population-level predictions requested. ’s example:","code":"data(\"sleepstudy\", package = \"lme4\") # mixed model with lme4 m_lmer <- lme4::lmer(Reaction ~ poly(Days, 2) + (1 | Subject),   data = sleepstudy ) # equivalent model, random effects are defined via s(..., bs = \"re\") m_gam <- mgcv::gam(Reaction ~ poly(Days, 2) + s(Subject, bs = \"re\"),   family = gaussian(), data = sleepstudy, method = \"ML\" )  # predictions are identical predict_response(m_gam, terms = \"Days\", exclude = \"s(Subject)\", newdata.guaranteed = TRUE) #> # Predicted values of Reaction #>  #> Days | Predicted |         95% CI #> --------------------------------- #>    0 |    255.45 | 235.12, 275.78 #>    1 |    263.22 | 244.71, 281.73 #>    2 |    271.67 | 253.70, 289.63 #>    3 |    280.78 | 262.75, 298.82 #>    5 |    301.05 | 282.84, 319.25 #>    6 |    312.19 | 294.15, 330.22 #>    7 |    324.00 | 306.03, 341.97 #>    9 |    349.65 | 329.33, 369.98 #>  #> Adjusted for: #> * Subject = 308  predict_response(m_lmer, terms = \"Days\") #> # Predicted values of Reaction #>  #> Days | Predicted |         95% CI #> --------------------------------- #>    0 |    255.45 | 234.79, 276.10 #>    1 |    263.22 | 244.35, 282.09 #>    2 |    271.67 | 253.33, 290.00 #>    3 |    280.78 | 262.38, 299.19 #>    5 |    301.05 | 282.48, 319.61 #>    6 |    312.19 | 293.78, 330.59 #>    7 |    324.00 | 305.66, 342.34 #>    9 |    349.65 | 329.00, 370.31 #>  #> Adjusted for: #> * Subject = 0 (population-level)"},{"path":"https://strengejacke.github.io/ggeffects/articles/introduction_randomeffects.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"Introduction: Adjusted Predictions and Marginal Effects for Random Effects Models","text":"Brooks , Kristensen K, Benthem KJ van, Magnusson , Berg CW, Nielsen , et al. glmmTMB Balances Speed Flexibility Among Packages Zero-inflated Generalized Linear Mixed Modeling. R Journal. 2017;9: 378–400. Heiss, . (2022, November 29). Marginal conditional effects GLMMs {marginaleffects}. Andrew Heiss’s Blog. (doi: 10.59350/xwnfm-x1827) Johnson PC. 2014. Extension Nakagawa & Schielzeth’s R2GLMM random slopes models. Methods Ecol Evol, 5: 944-946. (doi: 10.1111/2041-210X.12225)","code":""},{"path":"https://strengejacke.github.io/ggeffects/articles/practical_glm_workflow.html","id":"preparing-the-data-and-fitting-a-model","dir":"Articles","previous_headings":"","what":"Preparing the data and fitting a model","title":"Case Study: Simple Workflow Using Logistic Regression","text":"First, load ggeffects package coffee_data data set, included package. data set contains information effect coffee consumption alertness time. outcome variable binary (alertness), predictor variables coffee consumption (treatment) time.","code":"library(ggeffects) library(parameters) # for model summary library(datawizard) # for recodings  data(coffee_data, package = \"ggeffects\")  # dichotomize outcome variable coffee_data$alertness <- categorize(coffee_data$alertness, lowest = 0) # rename variable coffee_data$treatment <- coffee_data$coffee  # model model <- glm(alertness ~ treatment * time, data = coffee_data, family = binomial())"},{"path":"https://strengejacke.github.io/ggeffects/articles/practical_glm_workflow.html","id":"exploring-the-model---model-coefficients","dir":"Articles","previous_headings":"","what":"Exploring the model - model coefficients","title":"Case Study: Simple Workflow Using Logistic Regression","text":"Let’s start examining model coefficients. can use model_parameters() function extract coefficients model. setting exponentiate = TRUE, can obtain odds ratios coefficients. model coefficients difficult interpret directly, particular sinc interaction effect. Instead, use predict_response() function calculate predicted probabilities model. refer adjusted probabilities outcome (higher alertness) depending predictor variables (treatment time).","code":"# coefficients model_parameters(model, exponentiate = TRUE) #> Parameter                              | Odds Ratio |   SE |        95% CI |         z |      p #> ----------------------------------------------------------------------------------------------- #> (Intercept)                            |       1.00 | 0.45 | [0.41,  2.44] | -1.54e-15 | > .999 #> treatment [control]                    |       0.33 | 0.23 | [0.08,  1.23] |     -1.61 | 0.108  #> time [noon]                            |       0.54 | 0.35 | [0.15,  1.90] |     -0.96 | 0.339  #> time [afternoon]                       |       3.00 | 2.05 | [0.81, 12.24] |      1.61 | 0.108  #> treatment [control] × time [noon]      |      10.35 | 9.85 | [1.66, 70.73] |      2.45 | 0.014  #> treatment [control] × time [afternoon] |       1.00 | 0.97 | [0.15,  6.74] | -6.10e-16 | > .999 #>  #> Uncertainty intervals (profile-likelihood) and p-values (two-tailed) computed using a Wald z-distribution approximation."},{"path":"https://strengejacke.github.io/ggeffects/articles/practical_glm_workflow.html","id":"predicted-probabilities---understanding-the-model","dir":"Articles","previous_headings":"","what":"Predicted probabilities - understanding the model","title":"Case Study: Simple Workflow Using Logistic Regression","text":"Thus, since interested interaction effect coffee consumption (treatment) alertness depending different times day, simply specify two variables focal terms predict_response() function.  can see, predicted probabilities alertness higher participants consumed coffee compared , morning afternoon. Furthermore, see differences coffee control group time point - differences statistically significant?","code":"# predicted probabilities predictions <- predict_response(model, c(\"time\", \"treatment\")) plot(predictions)"},{"path":"https://strengejacke.github.io/ggeffects/articles/practical_glm_workflow.html","id":"pairwise-comparisons---testing-the-differences","dir":"Articles","previous_headings":"","what":"Pairwise comparisons - testing the differences","title":"Case Study: Simple Workflow Using Logistic Regression","text":"check , finally use test_predictions() function perform pairwise comparisons predicted probabilities. simply pass results predict_response() function. output, see possible pairwise comparisons predicted probabilities. table quite long, can also group comparisons, e.g. variable time. output shows differences coffee control group statistically significant noon time.","code":"# pairwise comparisons - quite long table test_predictions(predictions) #> # Pairwise comparisons #>  #> time                |       treatment | Contrast |       95% CI |      p #> ------------------------------------------------------------------------ #> morning-noon        |   coffee-coffee |     0.15 | -0.15,  0.45 | 0.332  #> morning-afternoon   |   coffee-coffee |    -0.25 | -0.54,  0.04 | 0.091  #> morning-morning     |  coffee-control |     0.25 | -0.04,  0.54 | 0.091  #> morning-noon        |  coffee-control |    -0.15 | -0.45,  0.15 | 0.332  #> morning-afternoon   |  coffee-control |     0.00 | -0.31,  0.31 | > .999 #> noon-afternoon      |   coffee-coffee |    -0.40 | -0.68, -0.12 | 0.005  #> noon-morning        |  coffee-control |     0.10 | -0.18,  0.38 | 0.488  #> noon-noon           |  coffee-control |    -0.30 | -0.60,  0.00 | 0.047  #> noon-afternoon      |  coffee-control |    -0.15 | -0.45,  0.15 | 0.332  #> afternoon-morning   |  coffee-control |     0.50 |  0.23,  0.77 | < .001 #> afternoon-noon      |  coffee-control |     0.10 | -0.18,  0.38 | 0.488  #> afternoon-afternoon |  coffee-control |     0.25 | -0.04,  0.54 | 0.091  #> morning-noon        | control-control |    -0.40 | -0.68, -0.12 | 0.005  #> morning-afternoon   | control-control |    -0.25 | -0.54,  0.04 | 0.091  #> noon-afternoon      | control-control |     0.15 | -0.15,  0.45 | 0.332 #>  #> Contrasts are presented as probabilities (in %-points). # group comparisons by \"time\" test_predictions(predictions, by = \"time\") #> # Pairwise comparisons #>  #> time      |      treatment | Contrast |       95% CI |     p #> ------------------------------------------------------------ #> morning   | coffee-control |     0.25 | -0.04,  0.54 | 0.091 #> noon      | coffee-control |    -0.30 | -0.60,  0.00 | 0.047 #> afternoon | coffee-control |     0.25 | -0.04,  0.54 | 0.091 #>  #> Contrasts are presented as probabilities (in %-points)."},{"path":"https://strengejacke.github.io/ggeffects/articles/practical_intersectionality.html","id":"prepating-the-data-and-defining-intersectional-strata","dir":"Articles","previous_headings":"","what":"1. Prepating the data and defining intersectional strata","title":"Case Study: Intersectionality Analysis Using The MAIHDA Framework","text":"First, load required packages prepare sample data set. use efc data ggeffects package, contains data family carers care elderly relatives. outcome interest quality life family carers (score ranging 0 25 points), different dimensions intersectionality groups gender (male/female), employment status (currently employed yes/) age (three groups: 40, 41 64 65 older). assume might health-related inequalities, .e. quality life differs depending characteristics define intersectional strata. include intersectional strata variables gender, employed age mixed model, define interacting random effects (excluding main effects interactions): (1 | gender:employed:age) (see also ). idea truly unique combinations model, similar create factor variable combinations manually: now choice either use strata variable group factor random effects, gender:employed:age. plotting predictions (see section 4), get clearer plots include three factors gender, employed age instead integrated strata factor.","code":"library(ggeffects)   # predictions and significance testing library(insight)     # extracting random effects variances library(datawizard)  # data wrangling and preparation library(parameters)  # model summaries library(performance) # model fit indices, ICC library(glmmTMB)     # multilevel modelling  # sample data set data(efc, package = \"ggeffects\")  efc <- efc |>   # numeric to factors, set labels as levels   to_factor(select = c(\"c161sex\", \"c172code\", \"c175empl\")) |>   # recode age into three groups   recode_values(     select = \"c160age\",     recode = list(`1` = \"min:40\", `2` = 41:64, `3` = \"65:max\")   ) |>   # rename variables   data_rename(     pattern = c(\"c161sex\", \"c160age\", \"quol_5\", \"c175empl\"),     replacement = c(\"gender\", \"age\", \"qol\", \"employed\")   ) |>   # age into factor, set levels, and change labels for education   data_modify(age = factor(age, labels = c(\"-40\", \"41-64\", \"65+\"))) efc$strata <- ifelse(   is.na(efc$employed) | is.na(efc$gender) | is.na(efc$age),   NA_character_,   paste0(efc$gender, \", \", efc$employed, \", \", efc$age) ) efc$strata <- factor(efc$strata) data_tabulate(efc$strata) #> efc$strata <categorical> #> # total N=908 valid N=900 #>  #> Value              |   N | Raw % | Valid % | Cumulative % #> -------------------+-----+-------+---------+------------- #> Female, no, -40    |  37 |  4.07 |    4.11 |         4.11 #> Female, no, 41-64  | 238 | 26.21 |   26.44 |        30.56 #> Female, no, 65+    | 135 | 14.87 |   15.00 |        45.56 #> Female, yes, -40   |  63 |  6.94 |    7.00 |        52.56 #> Female, yes, 41-64 | 210 | 23.13 |   23.33 |        75.89 #> Female, yes, 65+   |   3 |  0.33 |    0.33 |        76.22 #> Male, no, -40      |  15 |  1.65 |    1.67 |        77.89 #> Male, no, 41-64    |  42 |  4.63 |    4.67 |        82.56 #> Male, no, 65+      |  50 |  5.51 |    5.56 |        88.11 #> Male, yes, -40     |  34 |  3.74 |    3.78 |        91.89 #> Male, yes, 41-64   |  70 |  7.71 |    7.78 |        99.67 #> Male, yes, 65+     |   3 |  0.33 |    0.33 |       100.00 #> <NA>               |   8 |  0.88 |    <NA> |         <NA>"},{"path":"https://strengejacke.github.io/ggeffects/articles/practical_intersectionality.html","id":"fitting-the-simple-intersectional-model","dir":"Articles","previous_headings":"","what":"2. Fitting the simple intersectional model","title":"Case Study: Intersectionality Analysis Using The MAIHDA Framework","text":"Intersectionality analysis aims recognizing effects belonging specific strata simultaneously. context MAIHDA framework, interest lies analysing variation strata regarding outcome interest. Thus, indicators define intersectional dimensions used interacting random effects (group factors) multilevel model (random-intercept model). start fitting linear mixed effects model, includes fixed effects, different intersectional dimensions: gender, employed age. purpose model quantify “discriminatory accuracy”, achieved calculating ICC (see performance::icc()) model. higher ICC, greater degree similarity within strata (regarding quality life) greater difference quality life intersectional strata. .e., higher ICC, better model discriminating individuals higher lower quality life score, opposed models lower ICC. now look model parameters ICC simple intersectional model. ICC value 4% rather low. Usually, indiates dimensions used define intersectional strata suggest larger social inequalities regarding quality life. ignore fact now, purpose demonstrating analysis approach rarely affected.","code":"# Quality of Life score ranges from 0 to 25 m_null <- glmmTMB(qol ~ 1 + (1 | gender:employed:age), data = efc)  # the above model is identical to: # m_null <- glmmTMB(qol ~ 1 + (1 | strata), data = efc) model_parameters(m_null) #> # Fixed Effects #>  #> Parameter   | Coefficient |   SE |         95% CI |     z |      p #> ------------------------------------------------------------------ #> (Intercept) |       14.91 | 0.40 | [14.13, 15.70] | 37.41 | < .001 #>  #> # Random Effects #>  #> Parameter                           | Coefficient |       95% CI #> ---------------------------------------------------------------- #> SD (Intercept: gender:employed:age) |        1.03 | [0.56, 1.89] #> SD (Residual)                       |        5.23 | [4.99, 5.48]  icc(m_null) #> # Intraclass Correlation Coefficient #>  #>     Adjusted ICC: 0.038 #>   Unadjusted ICC: 0.038"},{"path":"https://strengejacke.github.io/ggeffects/articles/practical_intersectionality.html","id":"partially-adjusted-intersectional-model-and-pcv","dir":"Articles","previous_headings":"","what":"3. Partially-adjusted intersectional model and PCV","title":"Case Study: Intersectionality Analysis Using The MAIHDA Framework","text":"next step want find , intersectional dimension contributes possible inequalities, .e. group factors gender, employed age explains -stratum variance random effects. achieved fitting partially-adjusted intersectional models. “purpose partially adjusted model quantify degree different dimensions used construct intersectional strata contributed stratum variance seen previous model.” intersectional dimensions, multilevel model including dimension fixed effect fitted. can look ICCs partially-adjusted models, well proportional change -stratum variance, -called PCV coefficients. First, fit three models one dimension predictor. regression coefficients already give impression strong association single dimension outcome , taking -stratum variance accout. larger (absolute values) coefficients, higher degree dimension contributed -stratum variance. Looking summary tables , seems like gender dimension explains least -stratum variance, .e. gender seems characteristic contributes least potential social inequalities. age, turn, seems important characteristic regarding inequalities. Since fixed effects now take away proportion variance explained grouping factors (random effects), expect ICC models lower. Indeed, ICC correlates fixed effects coefficients, .e. larger coefficient (absolute values), lower ICC. Next, want quantify degree different dimensions contribute variance groups accurately. , calculate proportional change -stratum variance, PCV. coefficient explains much total proportion explained variance strata can explained single dimension define strata. PCV ranges 0 1, closer 1, particular dimension explains social inequalities. , see PCV line models’ ICC’s regression coefficients. see highest proportional change age, meaning - although gender education can contribute inequalities - age relevant predictor.","code":"m_gender <- glmmTMB(qol ~ gender + (1 | gender:employed:age), data = efc) m_employment <- glmmTMB(qol ~ employed + (1 | gender:employed:age), data = efc) m_age <- glmmTMB(qol ~ age + (1 | gender:employed:age), data = efc) compare_parameters(m_gender, m_employment, m_age) #> Parameter       |             m_gender |         m_employment |                m_age #> ------------------------------------------------------------------------------------ #> (Intercept)     | 15.55 (14.51, 16.60) | 14.23 (13.35, 15.12) | 16.25 (15.33, 17.17) #> gender [Female] | -1.18 (-2.54,  0.17) |                      |                      #> employed [yes]  |                      |  1.38 ( 0.07,  2.68) |                      #> age [41-64]     |                      |                      | -1.99 (-3.14, -0.84) #> age [65+]       |                      |                      | -2.55 (-3.88, -1.23) #> ------------------------------------------------------------------------------------ #> Observations    |                  895 |                  895 |                  895 icc(m_gender)$ICC_adjusted #> [1] 0.02583979 icc(m_employment)$ICC_adjusted #> [1] 0.02341412 icc(m_age)$ICC_adjusted #> [1] 0.00461901 # extract random effect variances from all models v_null <- get_variance(m_null) v_gender <- get_variance(m_gender) v_employment <- get_variance(m_employment) v_age <- get_variance(m_age)  # PCV (proportional change in between-stratum variance) # from null-model to gender-model (v_null$var.random - v_gender$var.random) / v_null$var.random #> [1] 0.3202535  # PCV from null-model to employment-model (v_null$var.random - v_employment$var.random) / v_null$var.random #> [1] 0.3859538  # PCV from null-model to age-model (v_null$var.random - v_age$var.random) / v_null$var.random #> [1] 0.8809532"},{"path":"https://strengejacke.github.io/ggeffects/articles/practical_intersectionality.html","id":"predict-between-stratum-variance-and-test-for-significant-differences","dir":"Articles","previous_headings":"","what":"4. Predict between-stratum variance and test for significant differences","title":"Case Study: Intersectionality Analysis Using The MAIHDA Framework","text":"Finally, may want clearer picture different strata vary, combination characteristics defines highest maybe lowest risk group. , calculate predictions random effects (unit-level predictions) either setting margin = \"empirical\" setting type = \"random\" (defaults ggeffects handles mixed models, see vignette.). following code shows predicted average quality life scores different groups.  According results, employed male family carers, older 40 years, show average highest quality life. hand, unemployed female carers aged 65 older lowest quality life. can now calculate pairwise comparisons show differences groups statistically significant. Since combinations pairwise comparisons return 66 rows total, just show first ten rows demonstrating purpose. want modulate one factor compare groups within levels groups, can use argument. reduces output compares focal term(s) within levels remaining predictors. E.g., look plot want know whether female persons aged 65+ differ depending employment status, can use following code:","code":"predictions <- predict_response(   m_null,   c(\"gender\", \"employed\", \"age\"),   type = \"random\" ) plot(predictions) # just show first 10 rows of output... test_predictions(predictions)[1:10, ] #> # Pairwise comparisons #>  #> gender        | employed |         age | Contrast |      95% CI |     p #> ----------------------------------------------------------------------- #> Female-Female |    no-no |   -40-41-64 |     1.42 | -0.08, 2.91 | 0.063 #> Female-Female |    no-no |     -40-65+ |     1.64 |  0.04, 3.23 | 0.044 #> Female-Female |    no-no |   41-64-65+ |     0.22 | -0.85, 1.29 | 0.686 #> Female-Female |   no-yes |     -40--40 |    -0.86 | -2.67, 0.94 | 0.348 #> Female-Female |   no-yes |   -40-41-64 |     1.08 | -0.43, 2.59 | 0.162 #> Female-Female |   no-yes |     -40-65+ |     0.32 | -2.12, 2.76 | 0.798 #> Female-Female |   no-yes | 41-64-41-64 |    -0.34 | -1.28, 0.60 | 0.476 #> Female-Female |   no-yes |   41-64-65+ |    -1.10 | -3.23, 1.04 | 0.313 #> Female-Female |   no-yes |     65+-65+ |    -1.32 | -3.53, 0.89 | 0.241 #> Female-Female |   yes-no |   -40-41-64 |     2.28 |  0.92, 3.64 | 0.001 # Compare levels of gender and employment status for age groups test_predictions(predictions, by = \"age\") #> # Pairwise comparisons #>  #> age = -40 #>  #> gender        | employed | Contrast |       95% CI |     p #> ---------------------------------------------------------- #> Female-Female |   no-yes |    -0.86 | -2.67,  0.94 | 0.348 #> Female-Male   |   no-yes |    -0.95 | -2.99,  1.10 | 0.364 #> Male-Female   |    no-no |     0.07 | -2.11,  2.25 | 0.951 #> Male-Female   |   no-yes |    -0.79 | -2.89,  1.30 | 0.457 #> Male-Female   |  yes-yes |     0.08 | -1.86,  2.03 | 0.932 #> Male-Male     |   no-yes |    -0.88 | -3.18,  1.43 | 0.455 #>  #> age = 41-64 #>  #> gender        | employed | Contrast |       95% CI |     p #> ---------------------------------------------------------- #> Female-Female |   no-yes |    -0.34 | -1.28,  0.60 | 0.476 #> Female-Male   |   no-yes |    -1.71 | -2.98, -0.44 | 0.008 #> Male-Female   |    no-no |     1.18 | -0.26,  2.63 | 0.109 #> Male-Female   |   no-yes |     0.84 | -0.62,  2.30 | 0.258 #> Male-Female   |  yes-yes |     1.37 |  0.09,  2.66 | 0.036 #> Male-Male     |   no-yes |    -0.53 | -2.22,  1.16 | 0.538 #>  #> age = 65+ #>  #> gender        | employed | Contrast |       95% CI |     p #> ---------------------------------------------------------- #> Female-Female |   no-yes |    -1.32 | -3.53,  0.89 | 0.241 #> Female-Male   |   no-yes |    -1.81 | -4.10,  0.48 | 0.122 #> Male-Female   |    no-no |     0.88 | -0.62,  2.38 | 0.250 #> Male-Female   |   no-yes |    -0.44 | -2.82,  1.94 | 0.717 #> Male-Female   |  yes-yes |     0.49 | -2.45,  3.43 | 0.745 #> Male-Male     |   no-yes |    -0.93 | -3.39,  1.53 | 0.459 # Compare levels employment status by gender and age groups test_predictions(predictions, by = c(\"gender\", \"age\")) #> # Pairwise comparisons #>  #> employed | gender |   age | Contrast |      95% CI |     p #> ---------------------------------------------------------- #> no-yes   |   Male |   -40 |    -0.88 | -3.18, 1.43 | 0.455 #> no-yes   |   Male | 41-64 |    -0.53 | -2.22, 1.16 | 0.538 #> no-yes   |   Male |   65+ |    -0.93 | -3.39, 1.53 | 0.459 #> no-yes   | Female |   -40 |    -0.86 | -2.67, 0.94 | 0.348 #> no-yes   | Female | 41-64 |    -0.34 | -1.28, 0.60 | 0.476 #> no-yes   | Female |   65+ |    -1.32 | -3.53, 0.89 | 0.241"},{"path":"https://strengejacke.github.io/ggeffects/articles/practical_intersectionality.html","id":"conclusion","dir":"Articles","previous_headings":"","what":"5. Conclusion","title":"Case Study: Intersectionality Analysis Using The MAIHDA Framework","text":"Intersectional multilevel analysis individual heterogeneity, using MAIHDA framework, new approach social epidemiology, helps understand interaction social indicators regard social inequalities. approach requires application multilevel models, ICC PCV relevant coefficients. ggeffects package allows go beyond quantifying degree different intersectional dimensions contribute inequalities predicting average outcome group, thereby explicitly showing differences groups (strata). Furthermore, ggeffects possible compare differences groups test whether differences statistically significant , .e. whether find “evidence” social inequalities data certain groups (risk).","code":""},{"path":"https://strengejacke.github.io/ggeffects/articles/practical_intersectionality.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"Case Study: Intersectionality Analysis Using The MAIHDA Framework","text":"Axelsson Fisk S, Mulinari S, Wemrell M, Leckie G, Perez Vicente R, Merlo J. Chronic Obstructive Pulmonary Disease Sweden: intersectional multilevel analysis individual heterogeneity discriminatory accuracy. SSM - Population Health (2018) 4:334-346. doi: 10.1016/j.ssmph.2018.03.005 Evans CR, Leckie G, Subramanian SV, Bell , Merlo J. tutorial conducting intersectional multilevel analysis individual heterogeneity discriminatory accuracy (MAIHDA). SSM - Population Health (2024) 26; doi: 10.1016/j.ssmph.2024.101664","code":""},{"path":"https://strengejacke.github.io/ggeffects/articles/practical_logisticmixedmodel.html","id":"simple-logistic-mixed-effects-model","dir":"Articles","previous_headings":"","what":"Simple Logistic Mixed Effects Model","title":"Case Study: Logistic Mixed Effects Model With Interaction Term","text":"start fitting simple mixed effects model. discrete variable, adjusted predictions levels calculated default. continuous variables, pretty range values generated. See details value ranges vignette adjusted predictions specific values. logistic regression models, since ggeffects returns adjusted predictions response scale, predicted values predicted probabilities. Furthermore, mixed models, predicted values typically population level, group-specific. plot adjusted predictions, simply plot returned results use pipe.","code":"m1 <- glmer(   outcome ~ var_binom + var_cont + (1 | group),   data = dat,   family = binomial(link = \"logit\") ) predict_response(m1, \"var_binom\") #> You are calculating adjusted predictions on the population-level (i.e. `type = \"fixed\"`) for a *generalized* linear mixed model. #>   This may produce biased estimates due to Jensen's inequality. Consider setting `bias_correction = TRUE` to correct for this bias. #>   See also the documentation of the `bias_correction` argument. #> # Predicted probabilities of outcome #>  #> var_binom | Predicted |     95% CI #> ---------------------------------- #> 0         |      0.37 | 0.25, 0.51 #> 1         |      0.38 | 0.18, 0.62 #>  #> Adjusted for: #> * var_cont = -0.00 #> *    group = 0 (population-level)  predict_response(m1, \"var_cont\") #> Data were 'prettified'. Consider using `terms=\"var_cont [all]\"` to get smooth plots. #> # Predicted probabilities of outcome #>  #> var_cont | Predicted |     95% CI #> --------------------------------- #>    -2.50 |      0.34 | 0.13, 0.63 #>    -2.00 |      0.34 | 0.16, 0.59 #>    -1.00 |      0.36 | 0.21, 0.53 #>     0.00 |      0.37 | 0.25, 0.51 #>     0.50 |      0.38 | 0.25, 0.52 #>     1.00 |      0.38 | 0.24, 0.55 #>     2.00 |      0.40 | 0.20, 0.64 #>     3.50 |      0.42 | 0.13, 0.77 #>  #> Adjusted for: #> * var_binom = 0 #> *     group = 0 (population-level) #>  #> Not all rows are shown in the output. Use `print(..., n = Inf)` to show all rows. # save adjusted predictions in an object and plot me <- predict_response(m1, \"var_binom\") plot(me) # plot using the pipe predict_response(m1, \"var_cont\") |> plot()"},{"path":"https://strengejacke.github.io/ggeffects/articles/practical_logisticmixedmodel.html","id":"logistic-mixed-effects-model-with-interaction-term","dir":"Articles","previous_headings":"","what":"Logistic Mixed Effects Model with Interaction Term","title":"Case Study: Logistic Mixed Effects Model With Interaction Term","text":"Next, fit model interaction binomial continuous variable. compute plot adjusted predictions interaction terms, simply specify terms, .e. names variables, character vector terms-argument. Since interaction var_binom var_cont, argument terms = c(\"var_binom\", \"var_cont\"). However, first variable terms-argument used predictor along x-axis. Adjusted predictions plotted specific values specific levels second variable. second variable factor, adjusted predictions level plotted. second variable continuous, representative values chosen (typically, mean +/- one SD, see adjusted predictions specific values).","code":"m2 <- glmer(   outcome ~ var_binom * var_cont + (1 | group),   data = dat,   family = binomial(link = \"logit\") ) predict_response(m2, c(\"var_cont\", \"var_binom\")) |> plot() #> Data were 'prettified'. Consider using `terms=\"var_cont [all]\"` to get smooth plots. predict_response(m2, c(\"var_binom\", \"var_cont\")) |> plot()"},{"path":"https://strengejacke.github.io/ggeffects/articles/practical_logisticmixedmodel.html","id":"logistic-mixed-effects-model-with-quadratic-interaction-term","dir":"Articles","previous_headings":"","what":"Logistic Mixed Effects Model with quadratic Interaction Term","title":"Case Study: Logistic Mixed Effects Model With Interaction Term","text":"Now fit model interaction term, continuous variable modelled quadratic term. , ggeffect automatically plots high-order terms specified terms-argument. Hence, function call identical previous examples interaction terms, polynomial term included.  can see, ggeffects also returned message indicated plot may look smooth due involvement polynomial spline terms: Model contains splines polynomial terms. Consider using terms=\"var_cont []\" get smooth plots. See also package-vignette ‘Adjusted predictions Specific Values’. mixed models, computing adjusted predictions spline polynomial terms may lead memory allocation problems. sure happen, add []-tag terms-argument, described message:  plot produces much smoother curves.","code":"m3 <- glmer(   outcome ~ var_binom * poly(var_cont, degree = 2, raw = TRUE) + (1 | group),   data = dat,   family = binomial(link = \"logit\") ) predict_response(m3, c(\"var_cont\", \"var_binom\")) |> plot() #> Model contains splines or polynomial terms. Consider using `terms=\"var_cont [all]\"` to get smooth plots. See also package-vignette 'Adjusted Predictions at Specific Values'. predict_response(m3, c(\"var_cont [all]\", \"var_binom\")) |> plot()"},{"path":"https://strengejacke.github.io/ggeffects/articles/practical_logisticmixedmodel.html","id":"logistic-mixed-effects-model-with-three-way-interaction","dir":"Articles","previous_headings":"","what":"Logistic Mixed Effects Model with Three-Way Interaction","title":"Case Study: Logistic Mixed Effects Model With Interaction Term","text":"last model produce nice plots, sake demonstration, fit model three interaction terms, including polynomial spline terms. Since adjusted predictions var_cont levels var_cont2 var_binom, groups, also facets plot three “dimensions”. Three-way interactions plotted simply speficying terms question terms-argument.","code":"set.seed(321) dat <- data.frame(   outcome = rbinom(n = 100, size = 1, prob = 0.35),   var_binom = rbinom(n = 100, size = 1, prob = 0.5),   var_cont = rnorm(n = 100, mean = 10, sd = 7),   var_cont2 = rnorm(n = 100, mean = 5, sd = 2),   group = sample(letters[1:4], size = 100, replace = TRUE) )   m4 <- glmer(   outcome ~ var_binom * poly(var_cont, degree = 2) * ns(var_cont2, df = 3) + (1 | group),   data = dat,   family = binomial(link = \"logit\") ) predict_response(m4, c(\"var_cont [all]\", \"var_cont2\", \"var_binom\")) |> plot()"},{"path":"https://strengejacke.github.io/ggeffects/articles/practical_marginaleffects_pkg.html","id":"population-level-and-unit-level-predictions-comparison-between-marginaleffects-and-ggeffects","dir":"Articles","previous_headings":"","what":"Population-level and unit-level predictions: comparison between marginaleffects and ggeffects","title":"Case Study: Predictions for Mixed Models: Comparison of ggeffects and marginaleffects","text":"First, fit two example models.","code":"library(lme4)            # modelling library(ggeffects)       # predictions library(marginaleffects) # predictions library(ggplot2)         # plotting library(patchwork)       # plot layout  data(ChickWeight)  model1 <- lmer(   weight ~ 1 + Time + (1 + Time | Chick),   data = ChickWeight )  model2 <- lmer(   weight ~ 1 + Time + I(Time^2) + Diet + Time:Diet + I(Time^2):Diet +     (1 + Time + I(Time^2) | Chick),   data = ChickWeight )"},{"path":"https://strengejacke.github.io/ggeffects/articles/practical_marginaleffects_pkg.html","id":"unit-level-predictions","dir":"Articles","previous_headings":"Population-level and unit-level predictions: comparison between marginaleffects and ggeffects","what":"Unit-level predictions","title":"Case Study: Predictions for Mixed Models: Comparison of ggeffects and marginaleffects","text":"first two plots show unit-level predictions created marginaleffects package. can seen, predictions level random effects included.  ggeffects handles unit-level predictions slightly different (see vignette) - unit-level considered “group”, thus plot normally use colors color legend distinguish unit-levels. example, default color palette small plot unit-levels. reproduce plots marginaleffects package, need modify plot. simply provide vector sufficient amount color values hide legend.","code":"pred1 <- predictions(model1,   newdata = datagrid(     Chick = ChickWeight$Chick,     Time = 0:21   ) )  p1 <- ggplot(pred1, aes(Time, estimate, level = Chick)) +   geom_line() +   labs(y = \"Predicted weight\", x = \"Time\", title = \"Linear growth model\")  pred2 <- predictions(model2,   newdata = datagrid(     Chick = ChickWeight$Chick,     Time = 0:21   ) )  p2 <- ggplot(pred2, aes(Time, estimate, level = Chick)) +   geom_line() +   labs(y = \"Predicted weight\", x = \"Time\", title = \"Quadratic growth model\")  p1 + p2 pr <- predict_response(model1, terms = c(\"Time\", \"Chick\"), type = \"random\") plot(pr) #> Error in `palette()`: #> Insufficient values in manual scale. 50 needed but only 9 provided. pr <- predict_response(model1, terms = c(\"Time\", \"Chick\"), type = \"random\") p3 <- plot(pr, colors = rep(\"grey30\", 50), show_ci = FALSE, show_legend = FALSE)  pr <- predict_response(model2, terms = c(\"Time\", \"Chick\"), type = \"random\") p4 <- plot(pr, colors = rep(\"grey30\", 50), show_ci = FALSE, show_legend = FALSE)  p3 + p4"},{"path":"https://strengejacke.github.io/ggeffects/articles/practical_marginaleffects_pkg.html","id":"unit-level-predictions-stratified-by-diet","dir":"Articles","previous_headings":"Population-level and unit-level predictions: comparison between marginaleffects and ggeffects","what":"Unit-level predictions stratified by Diet","title":"Case Study: Predictions for Mixed Models: Comparison of ggeffects and marginaleffects","text":"next plot shown marginaleffects case study. Unit-level predictions stratified Diet.  ggeffects default creates (theoretical) reference grid possible combinations data. ’s following plot looks different one . see predictions unit-levels panel Diet.  limit plot unit-levels actually present data, need set limit_range = TRUE.","code":"pred <- predictions(model2)  ggplot(pred, aes(Time, estimate, level = Chick)) +   geom_line() +   ylab(\"Predicted Weight\") +   facet_wrap(~Diet, labeller = label_both) pr <- predict_response(model2, terms = c(\"Time\", \"Chick\", \"Diet\"), type = \"random\") plot(pr, colors = rep(\"grey30\", 50), show_ci = FALSE, show_legend = FALSE) pr <- predict_response(model2, terms = c(\"Time\", \"Chick\", \"Diet\"), type = \"random\") plot(   pr,   colors = rep(\"grey30\", 50),   show_ci = FALSE,   show_legend = FALSE,   limit_range = TRUE )"},{"path":"https://strengejacke.github.io/ggeffects/articles/practical_marginaleffects_pkg.html","id":"population-level-predictions","dir":"Articles","previous_headings":"Population-level and unit-level predictions: comparison between marginaleffects and ggeffects","what":"Population-level predictions","title":"Case Study: Predictions for Mixed Models: Comparison of ggeffects and marginaleffects","text":"last example shows population-level predictions.  plot rather simple reproduce ggeffects. don’t need specify type argument, since type = \"fixed\" default returns population-level predictions.","code":"pred <- predictions(   model2,   newdata = datagrid(     Chick = NA,     Diet = 1:4,     Time = 0:21   ),   re.form = NA )  ggplot(pred, aes(x = Time, y = estimate, ymin = conf.low, ymax = conf.high)) +   geom_ribbon(alpha = 0.1, fill = \"red\") +   geom_line() +   facet_wrap(~Diet, labeller = label_both) +   labs(title = \"Population-level trajectories\") pr <- predict_response(model2, terms = c(\"Time\", \"Diet\")) plot(pr, grid = TRUE)"},{"path":"https://strengejacke.github.io/ggeffects/articles/practical_robustestimation.html","id":"predictions-with-normal-standard-errors","dir":"Articles","previous_headings":"","what":"Predictions with normal standard errors","title":"Case Study: (Cluster) Robust Standard Errors","text":"example, use normal standard errors, returned predict(), compute confidence intervals.","code":"predict_response(model, \"X1\") #> # Predicted values of y #>  #>    X1 | Predicted |       95% CI #> -------------------------------- #> -2.50 |     -1.54 | -2.42, -0.67 #> -2.00 |     -1.28 | -2.00, -0.55 #> -1.00 |     -0.74 | -1.19, -0.29 #> -0.50 |     -0.47 | -0.81, -0.13 #>  0.00 |     -0.20 | -0.50,  0.10 #>  0.50 |      0.07 | -0.27,  0.41 #>  1.00 |      0.34 | -0.10,  0.78 #>  2.50 |      1.14 |  0.28,  2.01 #>  #> Adjusted for: #> * X2 = -0.08 #> * X3 =  0.09 #>  #> Not all rows are shown in the output. Use `print(..., n = Inf)` to show #>   all rows. me <- predict_response(model, \"X1\") plot(me)"},{"path":"https://strengejacke.github.io/ggeffects/articles/practical_robustestimation.html","id":"predictions-with-hc-estimated-standard-errors","dir":"Articles","previous_headings":"","what":"Predictions with HC-estimated standard errors","title":"Case Study: (Cluster) Robust Standard Errors","text":"Now, use sandwich::vcovHC() estimate heteroskedasticity-consistent standard errors. , first name related function must supplied type HC-estimation string. E.g., use default sandwich::vcovHC() function, set vcov = \"HC\", case default type sandwich::vcovHC() called. Setting vcov = \"HC1\" convenient shortcut vcov = \"HC\", vcov_args = list(type = \"HC1\"), call sandwich::vcovHC(type = \"HC1\").","code":"# short: predict_response(model, \"X1\", vcov = \"HC0\") # This is equivalent to the following: predict_response(model, \"X1\", vcov = \"HC\", vcov_args = list(type = \"HC0\")) #> # Predicted values of y #>  #>    X1 | Predicted |       95% CI #> -------------------------------- #> -2.50 |     -1.54 | -2.41, -0.68 #> -2.00 |     -1.28 | -1.98, -0.57 #> -1.00 |     -0.74 | -1.14, -0.34 #> -0.50 |     -0.47 | -0.77, -0.17 #>  0.00 |     -0.20 | -0.49,  0.09 #>  0.50 |      0.07 | -0.31,  0.44 #>  1.00 |      0.34 | -0.17,  0.84 #>  2.50 |      1.14 |  0.15,  2.14 #>  #> Adjusted for: #> * X2 = -0.08 #> * X3 =  0.09 #>  #> Not all rows are shown in the output. Use `print(..., n = Inf)` to show #>   all rows. me <- predict_response(model, \"X1\", vcov = \"HC\", vcov_args = list(type = \"HC0\")) plot(me)"},{"path":"https://strengejacke.github.io/ggeffects/articles/practical_robustestimation.html","id":"passing-a-function-to-vcov","dir":"Articles","previous_headings":"","what":"Passing a function to vcov","title":"Case Study: (Cluster) Robust Standard Errors","text":"Instead character strings, vcov argument also accepts function returns variance-covariance matrix. arguments need passed functions provided list vcov_args argument. Thus, can rewrite code-chunk following way:","code":"predict_response(   model,   \"X1\",   vcov = sandwich::vcovHC,   vcov_args = list(type = \"HC0\") ) #> # Predicted values of y #>  #>    X1 | Predicted |       95% CI #> -------------------------------- #> -2.50 |     -1.54 | -2.41, -0.68 #> -2.00 |     -1.28 | -1.98, -0.57 #> -1.00 |     -0.74 | -1.14, -0.34 #> -0.50 |     -0.47 | -0.77, -0.17 #>  0.00 |     -0.20 | -0.49,  0.09 #>  0.50 |      0.07 | -0.31,  0.44 #>  1.00 |      0.34 | -0.17,  0.84 #>  2.50 |      1.14 |  0.15,  2.14 #>  #> Adjusted for: #> * X2 = -0.08 #> * X3 =  0.09 #>  #> Not all rows are shown in the output. Use `print(..., n = Inf)` to show #>   all rows."},{"path":"https://strengejacke.github.io/ggeffects/articles/practical_robustestimation.html","id":"predictions-with-cluster-robust-standard-errors","dir":"Articles","previous_headings":"","what":"Predictions with cluster-robust standard errors","title":"Case Study: (Cluster) Robust Standard Errors","text":"last example shows define cluster-robust standard errors. based clubSandwich::vcovCR(). Thus, vcov = \"CR\" always required estimating cluster robust standard errors. clubSandwich::vcovCR() also different estimation types, must specified vcov_args. Furthermore, clubSandwich::vcovCR() requires cluster-argument, must also specified vcov_args:","code":"# short: # predict_response(model, \"X1\", vcov = \"CR0\", #                  vcov_args = list(cluster = dat$cluster)). # This is equivalent to the following: predict_response(   model,   \"X1\",   vcov = \"CR\",   vcov_args = list(type = \"CR0\", cluster = dat$cluster) ) #> # Predicted values of y #>  #>    X1 | Predicted |       95% CI #> -------------------------------- #> -2.50 |     -1.54 | -2.34, -0.75 #> -2.00 |     -1.28 | -1.97, -0.58 #> -1.00 |     -0.74 | -1.31, -0.17 #> -0.50 |     -0.47 | -1.04,  0.10 #>  0.00 |     -0.20 | -0.82,  0.41 #>  0.50 |      0.07 | -0.63,  0.76 #>  1.00 |      0.34 | -0.46,  1.13 #>  2.50 |      1.14 | -0.05,  2.33 #>  #> Adjusted for: #> * X2 = -0.08 #> * X3 =  0.09 #>  #> Not all rows are shown in the output. Use `print(..., n = Inf)` to show #>   all rows. me <- predict_response(   model,   \"X1\",   vcov = \"CR\",   vcov_args = list(type = \"CR0\", cluster = dat$cluster) ) plot(me)"},{"path":"https://strengejacke.github.io/ggeffects/articles/technical_get_predictions.html","id":"input-arguments-that-are-passed-to-get_predictions","dir":"Articles","previous_headings":"","what":"Input: Arguments that are passed to get_predictions()","title":"Technical Details: Adding own class-methods to ggeffects","text":"Adding support ggpredict() (: predict_response() default options) quite easy. order make model class work ggpredict(), need add get_predictions() method. get_predictions() called predict_response() following arguments always passed get_predictions() - matter corresponding class requires arguments : model, data_grid, terms, ci_level, model_info, type, typical, vcov, vcov_args, condition, interval, link_inverse, bias_correction, verbose Please refer documentation predict_response() explanation arguments necessary process arguments, can used modulate certain settings calculating predictions. Note method define mentioned arguments, still passed via ... - make sure methods get_predictions() method still work process ....","code":""},{"path":"https://strengejacke.github.io/ggeffects/articles/technical_get_predictions.html","id":"output-the-data-frame-structure","dir":"Articles","previous_headings":"","what":"Output: the data.frame structure","title":"Technical Details: Adding own class-methods to ggeffects","text":"important function returns data frame specific structure, namely data grid (argument data_grid, passed get_predictions()), including additional columns predicted, conf.low, conf.high (results get_predictions() function). Note predictions intervals usually response scale.","code":""},{"path":"https://strengejacke.github.io/ggeffects/articles/technical_get_predictions.html","id":"example","dir":"Articles","previous_headings":"","what":"Example","title":"Technical Details: Adding own class-methods to ggeffects","text":"simple example class-implementation Gaussian-alike models look like : simple example class-implementation non-Gaussian-alike models look like (note use link-inverse function link_inverse(), passed link_inverse argument):","code":"get_predictions.own_class <- function(model, data_grid, ci_level = 0.95, ...) {   predictions <- predict(     model,     newdata = data_grid,     type = \"response\",     se.fit = !is.na(ci_level),     ...   )    # do we have standard errors?   if (is.na(ci_level)) {     # copy predictions     data_grid$predicted <- as.vector(predictions)   } else {     # copy predictions     data_grid$predicted <- predictions$fit      # calculate CI     data_grid$conf.low <- predictions$fit - qnorm(0.975) * predictions$se.fit     data_grid$conf.high <- predictions$fit + qnorm(0.975) * predictions$se.fit      # optional: copy standard errors     attr(data_grid, \"std.error\") <- predictions$se.fit   }    data_grid } get_predictions.own_class <- function(model,                                       data_grid,                                       ci_level = 0.95,                                       link_inverse = insight::link_inverse(model),                                       ...) {   predictions <- predict(     model,     newdata = data_grid,     type = \"link\", # for non-Gaussian, return on link-scale     se.fit = !is.na(ci_level),     ...   )    # do we have standard errors?   if (is.na(ci_level)) {     # copy predictions     data_grid$predicted <- link_inverse(as.vector(predictions))   } else {     # copy predictions, use link-inverse to back-transform     data_grid$predicted <- link_inverse(predictions$fit)      # calculate CI     data_grid$conf.low <- link_inverse(       predictions$fit - qnorm(0.975) * predictions$se.fit     )     data_grid$conf.high <- link_inverse(       predictions$fit + qnorm(0.975) * predictions$se.fit     )      # optional: copy standard errors     attr(data_grid, \"std.error\") <- predictions$se.fit   }    data_grid }"},{"path":"https://strengejacke.github.io/ggeffects/articles/technical_stata.html","id":"why-is-the-output-from-stata-different-from-the-output-from-ggeffect","dir":"Articles","previous_headings":"","what":"Why is the output from Stata different from the output from ggeffect?","title":"Technical Details: Different Output between Stata and ggeffects","text":"Stata’s equivalent adjusted predictions produced ggeffects margins-command. However, results always identical. models non-gaussian families, point estimates adjusted predictions identical, confidence intervals differ. explanation, difference. First, fit logistic regression model.","code":"set.seed(5)  data <- data.frame(   outcome = rbinom(100, 1, 0.5),   var1 = rbinom(100, 1, 0.1),   var2 = rnorm(100, 10, 7) )  m <- glm(   outcome ~ var1 * var2,   data = data,   family = binomial(link = \"logit\") )"},{"path":[]},{"path":"https://strengejacke.github.io/ggeffects/articles/technical_stata.html","id":"the-stata-plot","dir":"Articles","previous_headings":"Why is the output from Stata different from the output from ggeffect? > Example with graphical output","what":"The Stata plot","title":"Technical Details: Different Output between Stata and ggeffects","text":"code Stata produce adjusted predictions plot. resulting image looks like .","code":"use data.dta, clear quietly logit outcome c.var1##c.var2 quietly margins, at(var2 = (-8(0.5)28) var1 = (0 1)) marginsplot"},{"path":"https://strengejacke.github.io/ggeffects/articles/technical_stata.html","id":"the-ggeffects-plot","dir":"Articles","previous_headings":"Why is the output from Stata different from the output from ggeffect? > Example with graphical output","what":"The ggeffects plot","title":"Technical Details: Different Output between Stata and ggeffects","text":"use ggeffects, plot slighlty differs.  can see, confidence intervals Stata plot outside plausible range [0, 1], means predicted uncertainty Stata output probability higher 1 lower 0, predict_response() computes confidence intervals within possible range.","code":"library(ggeffects) predict_response(m, c(\"var2\", \"var1\")) |> plot()"},{"path":"https://strengejacke.github.io/ggeffects/articles/technical_stata.html","id":"conclusion","dir":"Articles","previous_headings":"Why is the output from Stata different from the output from ggeffect?","what":"Conclusion","title":"Technical Details: Different Output between Stata and ggeffects","text":"seems like Stata returns inaccurate confidence intervals. Predictions standard errors returned Stata (transformed) response scale. Obviously, confidence intervals computed estimate +/- 1.96 * standard error, may lead confidence intervals reasonable bounds (e.g. 1 0 predicted probabilities). transformed estimate (response scale) always 0 1, true transformed standard errors. However, adding subtracting approx. 2 * transformed SE transformed estimate longer ensure confidence intervals within correct range. precise way calculation calculate estimates, standard errors confidence intervals (untransformed) scale linear predictor back-transform.","code":""},{"path":"https://strengejacke.github.io/ggeffects/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Daniel Lüdecke. Author, maintainer. Frederik Aust. Contributor. Sam Crawley. Contributor. Mattan S. Ben-Shachar. Contributor. Sean C. Anderson. Contributor.","code":""},{"path":"https://strengejacke.github.io/ggeffects/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Lüdecke D (2018). “ggeffects: Tidy Data Frames Marginal Effects Regression Models.” Journal Open Source Software, 3(26), 772. doi:10.21105/joss.00772.","code":"@Article{,   title = {ggeffects: Tidy Data Frames of Marginal Effects from Regression Models.},   volume = {3},   doi = {10.21105/joss.00772},   number = {26},   journal = {Journal of Open Source Software},   author = {Daniel Lüdecke},   year = {2018},   pages = {772}, }"},{"path":"https://strengejacke.github.io/ggeffects/index.html","id":"ggeffects---estimated-marginal-means-and-adjusted-predictions-from-regression-models","dir":"","previous_headings":"","what":"Create Tidy Data Frames of Marginal Effects for ggplot from Model Outputs","title":"Create Tidy Data Frames of Marginal Effects for ggplot from Model Outputs","text":"Lüdecke D (2018). ggeffects: Tidy Data Frames Marginal Effects Regression Models. Journal Open Source Software, 3(26), 772. doi: 10.21105/joss.00772","code":""},{"path":"https://strengejacke.github.io/ggeffects/index.html","id":"why-do-we-need-marginalconditional-effects-or-adjusted-predicted-values","dir":"","previous_headings":"","what":"Why do we need (marginal/conditional) effects or (adjusted) predicted values?","title":"Create Tidy Data Frames of Marginal Effects for ggplot from Model Outputs","text":"fitting model, useful generate model-based estimates (expected values, adjusted predictions) response variable different combinations predictor values. estimates can used make inferences relationships variables - adjusted predictions tell : expected ouctome certain values levels predictors? Adjusted predictions marginal means often easier understand raw regression coefficients. particular, visualization allows intuitively get idea predictors outcome associated, even complex models.","code":""},{"path":"https://strengejacke.github.io/ggeffects/index.html","id":"aims-of-this-package","dir":"","previous_headings":"","what":"Aims of this package","title":"Create Tidy Data Frames of Marginal Effects for ggplot from Model Outputs","text":"ggeffects light-weight package aims easily calculating adjusted predictions estimated marginal means meaningful values covariates statistical models. Furthermore, possible compute contrasts pairwise comparisons, test predictions differences predictions statistical significance. Finally, can easily produce nice figures visualize results. basically need workflow : predict_response() (understand results) test_predictions() (check “significant” results) plot() (communicate results) Three core ideas describe philosophy function design help users achieve mentioned goals: Functions type-safe always return data frame , consistent structure; simple, unique approach calculate adjusted predictions estimated marginal means many different models; package supports “labelled data” (Lüdecke 2018), allows human readable annotations graphical outputs. means, users need care expensive steps modeling visualize results. returned data frame ready use ggplot2-package, however, also plot()-method easily create publication-ready figures. Adjusted predictions estimated marginal means always calculated response scale, easiest intuitive scale interpret results. easy start, just need one function: predict_response(), two arguments: model “focal terms”, .e. predictors mainly interested . Examples shown .","code":""},{"path":"https://strengejacke.github.io/ggeffects/index.html","id":"so-when-do-i-need-the-ggeffects-package","dir":"","previous_headings":"","what":"So, when do I need the ggeffects package?","title":"Create Tidy Data Frames of Marginal Effects for ggplot from Model Outputs","text":"use ggeffects… … want understand predictors outcome related, matter whether simple complex models, interaction transformed terms. See start vignette. syntax ggeffects functions super easy consistent across different type models complexity. … want perform pairwise comparisons, order see whether statistically significant differences association , instance, different groups categories predictors outcome (“effects”, sometimes “marginal effects”). several vignettes describing detail, starting vignette. … need impressive figures instead long, confusing tables describe results. several examples documentation, example vignette. … even want check, whether model appropriately describes data. See vignette learn use ggeffects model diagnostics. workflow R include using following functions order: predict_response(), plot(), test_predictions() - ’s need! See also example workflow using logistic regression.","code":""},{"path":"https://strengejacke.github.io/ggeffects/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Create Tidy Data Frames of Marginal Effects for ggplot from Model Outputs","text":"can run ggeffects::install_latest() install latest development version r-universe.","code":""},{"path":"https://strengejacke.github.io/ggeffects/index.html","id":"adjusted-predictions-at-marginalizing-over-non-focal-predictors","dir":"","previous_headings":"","what":"Adjusted predictions at…: marginalizing over non-focal predictors","title":"Create Tidy Data Frames of Marginal Effects for ggplot from Model Outputs","text":"predict_response() wrapper around three “workhorse” functions, ggpredict(), ggemmeans() ggaverage(). Depending value margin argument, predict_response() calls one functions, different arguments. ’s important note : Predictions always returned response scale, matter model used. intuitive scale interpret results (predicted values). response predicted values levels focal terms, .e. specify predictors mainly interested , using terms argument. predicted values calculated values, predictors marginalized . margin argument predict_response() indicates marginalize non-focal predictors, .e. variables specified terms. option answers slightly different questions. Possible values : \"mean_reference\" \"mean_mode\": \"mean_reference\" calls ggpredict(), .e. non-focal predictors set mean (numeric variables), reference level (factors), “common” value (mode) case character vectors. \"mean_mode\" calls ggpredict(typical = c(numeric = \"mean\", factor = \"mode\")), .e. non-focal predictors set mean (numeric variables) mode (factors, “common” value case character vectors). Question answered: “predicted (: expected) value response meaningful values levels focal terms ‘typical’ observation data?”, ‘typical’ refers certain characteristics remaining predictors. \"marginalmeans\": calls ggemmeans(), .e. non-focal predictors set mean (numeric variables) marginalized levels “values” factors character vectors. Marginalizing factor levels non-focal terms computes kind “weighted average” values terms hold constant. different weighting options can chosen weights argument. Question answered: “predicted (: expected) value response meaningful values levels focal terms ‘average’ observation data?”. refers randomly picking subject sample result get average. \"empirical\" (aliases, \"counterfactual\" \"average\"): calls ggaverage(), .e. non-focal predictors marginalized observations sample. response predicted subject data predicted values averaged across subjects, aggregated/grouped focal terms. Averaging applied “counterfactual” predictions (Dickerman Hernán 2020). detailed description vignette. Question answered: “predicted (: expected) value response meaningful values levels focal terms ‘average’ observation population?”. refer actual data sample, also “” data, data different population.","code":""},{"path":"https://strengejacke.github.io/ggeffects/index.html","id":"documentation-and-support","dir":"","previous_headings":"","what":"Documentation and Support","title":"Create Tidy Data Frames of Marginal Effects for ggplot from Model Outputs","text":"Please visit https://strengejacke.github.io/ggeffects/ documentation vignettes. questions functionality, may either contact via email also file issue.","code":""},{"path":"https://strengejacke.github.io/ggeffects/index.html","id":"ggeffects-supports-many-different-models-and-is-easy-to-use","dir":"","previous_headings":"","what":"ggeffects supports many different models and is easy to use","title":"Create Tidy Data Frames of Marginal Effects for ggplot from Model Outputs","text":"Adjusted predictions can calculated many different models. Currently supported model-objects : averaging, bamlss, bayesglm, bayesx, betabin, betareg, bglmer, bigglm, biglm, blmer, bracl, brglm, brmsfit, brmultinom, cgam, cgamm, clm, clm2, clmm, coxph, feglm, fixest, flac, flic, gam, Gam, gamlss, gamm, gamm4, gee, geeglm, glimML, glm, glm.nb, glm_weightit, glmer.nb, glmerMod, glmgee, glmmPQL, glmmTMB, glmrob, glmRob, glmx, gls, hurdle, ivreg, lm, lm_robust, lme, lmerMod, lmrob, lmRob, logistf, logitr, lrm, mblogit, mclogit, MCMCglmm, merMod, merModLmerTest, MixMod, mixor, mlogit, multinom, multinom_weightit, negbin, nestedLogit, nlmerMod, ols, ordinal_weightit, orm, phyloglm, phylolm, plm, polr, rlm, rlmerMod, rq, rqs, rqss, sdmTMB, speedglm, speedlm, stanreg, survreg, svyglm, svyglm.nb, tidymodels, tobit, truncreg, vgam, vglm, wblm, wbm, Zelig-relogit, zeroinfl, zerotrunc. Support models varies marginalization method (margin argument), .e. although predict_response() supports models, models supported exclusively one four downstream functions (ggpredict(), ggemmeans(), ggeffect() ggaverage()). means models work every margin option predict_response(). models listed might work well, currently tested. Interaction terms, splines polynomial terms also supported. generic plot()-method plot results using ggplot2.","code":""},{"path":"https://strengejacke.github.io/ggeffects/index.html","id":"examples","dir":"","previous_headings":"","what":"Examples","title":"Create Tidy Data Frames of Marginal Effects for ggplot from Model Outputs","text":"returned data frames always , consistent structure column names, ’s easy create ggplot-plots without need re-write function call. x predicted values x- y-axis. conf.low conf.high used ymin ymax aesthetics ribbons add confidence bands plot. group can used grouping-aesthetics, faceting. predict_response() requires least one, four terms specified terms-argument. Predicted values response, along values first term calculated, optionally grouped terms specified terms.","code":""},{"path":"https://strengejacke.github.io/ggeffects/index.html","id":"adjusted-predictions-for-one-focal-predictor","dir":"","previous_headings":"Examples","what":"Adjusted predictions for one focal predictor","title":"Create Tidy Data Frames of Marginal Effects for ggplot from Model Outputs","text":"possible call ggplot look like :  However, also plot()-method. method uses convenient defaults, easily create suitable plot predictions.","code":"library(ggeffects) library(splines) library(datawizard) data(efc, package = \"ggeffects\") efc <- to_factor(efc, c(\"c161sex\", \"e42dep\")) fit <- lm(barthtot ~ c12hour + bs(neg_c_7) * c161sex + e42dep, data = efc)  predict_response(fit, terms = \"c12hour\") #> # Predicted values of barthtot #>  #> c12hour | Predicted |       95% CI #> ---------------------------------- #>       4 |     89.91 | 84.18, 95.63 #>      12 |     89.34 | 83.62, 95.06 #>      22 |     88.63 | 82.90, 94.36 #>      36 |     87.64 | 81.88, 93.40 #>      49 |     86.72 | 80.90, 92.53 #>      70 |     85.23 | 79.30, 91.16 #>     100 |     83.10 | 76.92, 89.29 #>     168 |     78.28 | 71.24, 85.33 #>  #> Adjusted for: #> * neg_c_7 =       11.83 #> * c161sex =        Male #> *  e42dep = independent library(ggplot2) mydf <- predict_response(fit, terms = \"c12hour\") ggplot(mydf, aes(x, predicted)) +   geom_line() +   geom_ribbon(aes(ymin = conf.low, ymax = conf.high), alpha = 0.1) mydf <- predict_response(fit, terms = \"c12hour\") plot(mydf)"},{"path":"https://strengejacke.github.io/ggeffects/index.html","id":"adjusted-predictions-for-several-focal-predictors","dir":"","previous_headings":"Examples","what":"Adjusted predictions for several focal predictors","title":"Create Tidy Data Frames of Marginal Effects for ggplot from Model Outputs","text":"three variables, predictions can grouped faceted.  plot() works case, well:","code":"result <- predict_response(fit, terms = c(\"neg_c_7\", \"c161sex\", \"e42dep\")) # we want a more compact table, thus we use `print()` explicitly print(result, collapse_table = TRUE, collapse_ci = TRUE) #> # Predicted values of barthtot #>  #> neg_c_7 | c161sex |               e42dep |     Predicted (95% CI) #> ----------------------------------------------------------------- #>       7 |    Male |          independent |  93.73 (87.01, 100.44) #>      12 |         |                      |  86.89 (81.09,  92.70) #>      17 |         |                      |  80.62 (73.69,  87.54) #>      28 |         |                      | 148.54 (85.66, 211.42) #>       7 |         |   slightly dependent |  87.41 (81.27,  93.56) #>      12 |         |                      |  80.58 (76.32,  84.84) #>      17 |         |                      |  74.31 (68.46,  80.15) #>      28 |         |                      | 142.23 (79.71, 204.75) #>       7 |         | moderately dependent |  78.29 (72.08,  84.49) #>      12 |         |                      |  71.46 (67.64,  75.27) #>      17 |         |                      |  65.18 (59.75,  70.60) #>      28 |         |                      | 133.10 (70.44, 195.76) #>       7 |         |   severely dependent |  41.93 (35.66,  48.21) #>      12 |         |                      |  35.10 (30.98,  39.22) #>      17 |         |                      |  28.82 (23.41,  34.24) #>      28 |         |                      |  96.75 (34.08, 159.41) #>       7 |  Female |          independent |  98.04 (93.06, 103.02) #>      12 |         |                      |  86.61 (81.85,  91.37) #>      17 |         |                      |  82.58 (77.33,  87.82) #>      28 |         |                      |  81.57 (64.41,  98.73) #>       7 |         |   slightly dependent |  91.73 (87.89,  95.57) #>      12 |         |                      |  80.30 (77.43,  83.17) #>      17 |         |                      |  76.26 (72.57,  79.96) #>      28 |         |                      |  75.26 (58.64,  91.87) #>       7 |         | moderately dependent |  82.60 (78.62,  86.59) #>      12 |         |                      |  71.17 (68.79,  73.56) #>      17 |         |                      |  67.14 (63.95,  70.33) #>      28 |         |                      |  66.13 (49.52,  82.74) #>       7 |         |   severely dependent |  46.25 (41.93,  50.57) #>      12 |         |                      |  34.82 (32.27,  37.37) #>      17 |         |                      |  30.78 (27.67,  33.90) #>      28 |         |                      |  29.78 (13.33,  46.23) #>  #> Adjusted for: #> * c12hour = 42.10  ggplot(result, aes(x = x, y = predicted, colour = group)) +   geom_line() +   facet_wrap(~facet) plot(result)"},{"path":"https://strengejacke.github.io/ggeffects/index.html","id":"contrasts-and-pairwise-comparisons","dir":"","previous_headings":"Examples","what":"Contrasts and pairwise comparisons","title":"Create Tidy Data Frames of Marginal Effects for ggplot from Model Outputs","text":"Next, example interaction term. want know whether two slopes significantly different .  can achieved test_predictions(). can conclude slopes (“linear trends”) barthtot different groups c161sex statistically significantly different . features explained detail package-vignettes.","code":"fit <- lm(neg_c_7 ~ c12hour + barthtot * c161sex + e42dep, data = efc) result <- predict_response(fit, c(\"barthtot\", \"c161sex\")) plot(result) test_predictions(result) #> # (Average) Linear trend for barthtot #>  #> c161sex     | Contrast |      95% CI |     p #> -------------------------------------------- #> Male-Female |     0.01 | -0.01, 0.03 | 0.466"},{"path":"https://strengejacke.github.io/ggeffects/index.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Create Tidy Data Frames of Marginal Effects for ggplot from Model Outputs","text":"case want / cite package, please use citation('ggeffects') citation information: Lüdecke D (2018). ggeffects: Tidy Data Frames Marginal Effects Regression Models. Journal Open Source Software, 3(26), 772. doi: 10.21105/joss.00772","code":""},{"path":[]},{"path":"https://strengejacke.github.io/ggeffects/reference/coffee_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Sample dataset from a course about analysis of factorial designs — coffee_data","title":"Sample dataset from a course about analysis of factorial designs — coffee_data","text":"sample data set course analysis factorial designs, Mattan S. Ben-Shachar. See following link information: https://github.com/mattansb/Analysis--Factorial-Designs--Psychologists data consists five variables 120 observations: ID: unique identifier participant sex: participant's sex time: time day participant tested (morning, noon, afternoon) coffee: Group indicator, whether participant drank coffee (\"coffee\" \"control\"). alertness: participant's alertness score.","code":""},{"path":"https://strengejacke.github.io/ggeffects/reference/coffee_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sample dataset from a course about analysis of factorial designs — coffee_data","text":"","code":"# Attach coffee-data data(coffee_data)"},{"path":"https://strengejacke.github.io/ggeffects/reference/collapse_by_group.html","id":null,"dir":"Reference","previous_headings":"","what":"Collapse raw data by random effect groups — collapse_by_group","title":"Collapse raw data by random effect groups — collapse_by_group","text":"function extracts raw data points (.e. data used fit model) \"averages\" (.e. \"collapses\") response variable levels grouping factor given collapse_by. works mixed models.","code":""},{"path":"https://strengejacke.github.io/ggeffects/reference/collapse_by_group.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Collapse raw data by random effect groups — collapse_by_group","text":"","code":"collapse_by_group(grid, model, collapse_by = NULL, residuals = FALSE)"},{"path":"https://strengejacke.github.io/ggeffects/reference/collapse_by_group.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Collapse raw data by random effect groups — collapse_by_group","text":"grid data frame representing data grid, object class ggeffects, returned predict_response(). model model compute partial residuals. data grid grid match predictors model. collapse_by Name (random effects) grouping factor. Data collapsed levels factor. residuals Logical, TRUE, collapsed partial residuals instead raw data levels grouping factor.","code":""},{"path":"https://strengejacke.github.io/ggeffects/reference/collapse_by_group.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Collapse raw data by random effect groups — collapse_by_group","text":"data frame raw data points, averaged levels given grouping factor random effects. group level random effect saved column \"random\".","code":""},{"path":"https://strengejacke.github.io/ggeffects/reference/collapse_by_group.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Collapse raw data by random effect groups — collapse_by_group","text":"","code":"library(ggeffects) data(efc, package = \"ggeffects\") efc$e15relat <- as.factor(efc$e15relat) efc$c161sex <- as.factor(efc$c161sex) levels(efc$c161sex) <- c(\"male\", \"female\") model <- lme4::lmer(neg_c_7 ~ c161sex + (1 | e15relat), data = efc) me <- predict_response(model, terms = \"c161sex\") head(attributes(me)$rawdata) #>   response x group facet rowname #> 1       12 2     1     1       1 #> 2       20 2     1     1       2 #> 3       11 1     1     1       3 #> 4       10 1     1     1       4 #> 5       12 2     1     1       5 #> 6       19 1     1     1       6 collapse_by_group(me, model, \"e15relat\") #>    x group_col facet random  response #> 1  1         1     1      1 12.297872 #> 2  2         1     1      1 13.347107 #> 3  1         1     1      2 11.585586 #> 4  2         1     1      2 12.118310 #> 5  1         1     1      3 12.166667 #> 6  2         1     1      3 10.545455 #> 7  1         1     1      4 10.750000 #> 8  2         1     1      4 11.726027 #> 9  1         1     1      5 11.333333 #> 10 2         1     1      5 10.235294 #> 11 1         1     1      6  8.200000 #> 12 2         1     1      6  9.235294 #> 13 1         1     1      7 13.000000 #> 14 2         1     1      7 10.400000 #> 15 1         1     1      8  9.666667 #> 16 2         1     1      8 10.955882"},{"path":"https://strengejacke.github.io/ggeffects/reference/efc.html","id":null,"dir":"Reference","previous_headings":"","what":"Sample dataset from the EUROFAMCARE project — efc","title":"Sample dataset from the EUROFAMCARE project — efc","text":"SPSS sample data set, imported sjlabelled::read_spss() function. Consists 28 variables 908 observations. data set part EUROFAMCARE project, cross-national survey informal caregiving Europe.","code":""},{"path":"https://strengejacke.github.io/ggeffects/reference/efc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sample dataset from the EUROFAMCARE project — efc","text":"","code":"# Attach EFC-data data(efc)  # Show structure str(efc) #> 'data.frame':\t908 obs. of  28 variables: #>  $ c12hour : num  16 148 70 168 168 16 161 110 28 40 ... #>   ..- attr(*, \"label\")= chr \"average number of hours of care per week\" #>  $ e15relat: num  2 2 1 1 2 2 1 4 2 2 ... #>   ..- attr(*, \"label\")= chr \"relationship to elder\" #>   ..- attr(*, \"labels\")= Named num [1:8] 1 2 3 4 5 6 7 8 #>   .. ..- attr(*, \"names\")= chr [1:8] \"spouse/partner\" \"child\" \"sibling\" \"daughter or son -in-law\" ... #>  $ e16sex  : num  2 2 2 2 2 2 1 2 2 2 ... #>   ..- attr(*, \"label\")= chr \"elder's gender\" #>   ..- attr(*, \"labels\")= Named num [1:2] 1 2 #>   .. ..- attr(*, \"names\")= chr [1:2] \"male\" \"female\" #>  $ e17age  : num  83 88 82 67 84 85 74 87 79 83 ... #>   ..- attr(*, \"label\")= chr \"elder' age\" #>  $ e42dep  : num  3 3 3 4 4 4 4 4 4 4 ... #>   ..- attr(*, \"label\")= chr \"elder's dependency\" #>   ..- attr(*, \"labels\")= Named num [1:4] 1 2 3 4 #>   .. ..- attr(*, \"names\")= chr [1:4] \"independent\" \"slightly dependent\" \"moderately dependent\" \"severely dependent\" #>  $ c82cop1 : num  3 3 2 4 3 2 4 3 3 3 ... #>   ..- attr(*, \"label\")= chr \"do you feel you cope well as caregiver?\" #>   ..- attr(*, \"labels\")= Named num [1:4] 1 2 3 4 #>   .. ..- attr(*, \"names\")= chr [1:4] \"never\" \"sometimes\" \"often\" \"always\" #>  $ c83cop2 : num  2 3 2 1 2 2 2 2 2 2 ... #>   ..- attr(*, \"label\")= chr \"do you find caregiving too demanding?\" #>   ..- attr(*, \"labels\")= Named num [1:4] 1 2 3 4 #>   .. ..- attr(*, \"names\")= chr [1:4] \"Never\" \"Sometimes\" \"Often\" \"Always\" #>  $ c84cop3 : num  2 3 1 3 1 3 4 2 3 1 ... #>   ..- attr(*, \"label\")= chr \"does caregiving cause difficulties in your relationship with your friends?\" #>   ..- attr(*, \"labels\")= Named num [1:4] 1 2 3 4 #>   .. ..- attr(*, \"names\")= chr [1:4] \"Never\" \"Sometimes\" \"Often\" \"Always\" #>  $ c85cop4 : num  2 3 4 1 2 3 1 1 2 2 ... #>   ..- attr(*, \"label\")= chr \"does caregiving have negative effect on your physical health?\" #>   ..- attr(*, \"labels\")= Named num [1:4] 1 2 3 4 #>   .. ..- attr(*, \"names\")= chr [1:4] \"Never\" \"Sometimes\" \"Often\" \"Always\" #>  $ c86cop5 : num  1 4 1 1 2 3 1 1 2 1 ... #>   ..- attr(*, \"label\")= chr \"does caregiving cause difficulties in your relationship with your family?\" #>   ..- attr(*, \"labels\")= Named num [1:4] 1 2 3 4 #>   .. ..- attr(*, \"names\")= chr [1:4] \"Never\" \"Sometimes\" \"Often\" \"Always\" #>  $ c87cop6 : num  1 1 1 1 2 2 2 1 1 1 ... #>   ..- attr(*, \"label\")= chr \"does caregiving cause financial difficulties?\" #>   ..- attr(*, \"labels\")= Named num [1:4] 1 2 3 4 #>   .. ..- attr(*, \"names\")= chr [1:4] \"Never\" \"Sometimes\" \"Often\" \"Always\" #>  $ c88cop7 : num  2 3 1 1 1 2 4 2 3 1 ... #>   ..- attr(*, \"label\")= chr \"do you feel trapped in your role as caregiver?\" #>   ..- attr(*, \"labels\")= Named num [1:4] 1 2 3 4 #>   .. ..- attr(*, \"names\")= chr [1:4] \"Never\" \"Sometimes\" \"Often\" \"Always\" #>  $ c89cop8 : num  3 2 4 2 4 1 1 3 1 1 ... #>   ..- attr(*, \"label\")= chr \"do you feel supported by friends/neighbours?\" #>   ..- attr(*, \"labels\")= Named num [1:4] 1 2 3 4 #>   .. ..- attr(*, \"names\")= chr [1:4] \"never\" \"sometimes\" \"often\" \"always\" #>  $ c90cop9 : num  3 2 3 4 4 1 4 3 3 3 ... #>   ..- attr(*, \"label\")= chr \"do you feel caregiving worthwhile?\" #>   ..- attr(*, \"labels\")= Named num [1:4] 1 2 3 4 #>   .. ..- attr(*, \"names\")= chr [1:4] \"never\" \"sometimes\" \"often\" \"always\" #>  $ c160age : num  56 54 80 69 47 56 61 67 59 49 ... #>   ..- attr(*, \"label\")= chr \"carer' age\" #>  $ c161sex : num  2 2 1 1 2 1 2 2 2 2 ... #>   ..- attr(*, \"label\")= chr \"carer's gender\" #>   ..- attr(*, \"labels\")= Named num [1:2] 1 2 #>   .. ..- attr(*, \"names\")= chr [1:2] \"Male\" \"Female\" #>  $ c172code: num  2 2 1 2 2 2 2 2 NA 2 ... #>   ..- attr(*, \"label\")= chr \"carer's level of education\" #>   ..- attr(*, \"labels\")= Named num [1:3] 1 2 3 #>   .. ..- attr(*, \"names\")= chr [1:3] \"low level of education\" \"intermediate level of education\" \"high level of education\" #>  $ c175empl: num  1 1 0 0 0 1 0 0 0 0 ... #>   ..- attr(*, \"label\")= chr \"are you currently employed?\" #>   ..- attr(*, \"labels\")= Named num [1:2] 0 1 #>   .. ..- attr(*, \"names\")= chr [1:2] \"no\" \"yes\" #>  $ barthtot: num  75 75 35 0 25 60 5 35 15 0 ... #>   ..- attr(*, \"label\")= chr \"Total score BARTHEL INDEX\" #>  $ neg_c_7 : num  12 20 11 10 12 19 15 11 15 10 ... #>   ..- attr(*, \"label\")= chr \"Negative impact with 7 items\" #>  $ pos_v_4 : num  12 11 13 15 15 9 13 14 13 13 ... #>   ..- attr(*, \"label\")= chr \"Positive value with 4 items\" #>  $ quol_5  : num  14 10 7 12 19 8 20 20 8 15 ... #>   ..- attr(*, \"label\")= chr \"Quality of life 5 items\" #>  $ resttotn: num  0 4 0 2 2 1 0 0 0 1 ... #>   ..- attr(*, \"label\")= chr \"Job restrictions\" #>  $ tot_sc_e: num  4 0 1 0 1 3 0 1 2 1 ... #>   ..- attr(*, \"label\")= chr \"Services for elderly\" #>  $ n4pstu  : num  0 0 2 3 2 2 3 1 3 3 ... #>   ..- attr(*, \"label\")= chr \"Care level\" #>   ..- attr(*, \"labels\")= Named chr [1:5] \"0\" \"1\" \"2\" \"3\" ... #>   .. ..- attr(*, \"names\")= chr [1:5] \"No Care Level\" \"Care Level 1\" \"Care Level 2\" \"Care Level 3\" ... #>  $ nur_pst : num  NA NA 2 3 2 2 3 1 3 3 ... #>   ..- attr(*, \"label\")= chr \"Care level\" #>   ..- attr(*, \"labels\")= Named chr [1:3] \"1\" \"2\" \"3\" #>   .. ..- attr(*, \"names\")= chr [1:3] \"Care Level 1\" \"Care Level 2\" \"Care Level 3/3+\" #>  $ grp     : Factor w/ 8 levels \"spouse/partner\",..: 2 2 1 1 2 2 1 4 2 2 ... #>   ..- attr(*, \"label\")= chr \"relationship to elder\" #>  $ negc7d  : Factor w/ 2 levels \"0\",\"1\": 2 2 1 1 2 2 2 1 2 1 ... #>   ..- attr(*, \"label\")= chr \"Negative impact with 7 items\"  # show first rows head(efc) #>   c12hour e15relat e16sex e17age e42dep c82cop1 c83cop2 c84cop3 c85cop4 c86cop5 #> 1      16        2      2     83      3       3       2       2       2       1 #> 2     148        2      2     88      3       3       3       3       3       4 #> 3      70        1      2     82      3       2       2       1       4       1 #> 4     168        1      2     67      4       4       1       3       1       1 #> 5     168        2      2     84      4       3       2       1       2       2 #> 6      16        2      2     85      4       2       2       3       3       3 #>   c87cop6 c88cop7 c89cop8 c90cop9 c160age c161sex c172code c175empl barthtot #> 1       1       2       3       3      56       2        2        1       75 #> 2       1       3       2       2      54       2        2        1       75 #> 3       1       1       4       3      80       1        1        0       35 #> 4       1       1       2       4      69       1        2        0        0 #> 5       2       1       4       4      47       2        2        0       25 #> 6       2       2       1       1      56       1        2        1       60 #>   neg_c_7 pos_v_4 quol_5 resttotn tot_sc_e n4pstu nur_pst            grp negc7d #> 1      12      12     14        0        4      0      NA          child      1 #> 2      20      11     10        4        0      0      NA          child      1 #> 3      11      13      7        0        1      2       2 spouse/partner      0 #> 4      10      15     12        2        0      3       3 spouse/partner      0 #> 5      12      15     19        2        1      2       2          child      1 #> 6      19       9      8        1        3      2       2          child      1"},{"path":"https://strengejacke.github.io/ggeffects/reference/fish.html","id":null,"dir":"Reference","previous_headings":"","what":"Sample data set — fish","title":"Sample data set — fish","text":"sample data set, used tests examples. Useful demonstrating count models (without zero-inflation component). consists nine variables 250 observations.","code":""},{"path":"https://strengejacke.github.io/ggeffects/reference/get_predictions.html","id":null,"dir":"Reference","previous_headings":"","what":"S3-class definition for the ggeffects package — get_predictions","title":"S3-class definition for the ggeffects package — get_predictions","text":"get_predictions() core function return adjusted predictions model, calling ggpredict() predict_response() margin = \"mean_reference\" (default option margin). Basically, input contains model object data grid typically used newdata argument predict() method. get_predictions() can used S3-method classes, add support new models ggeffects relevant package developers. S3-class definitions ggemmeans() ggaverage(), functions simply call methods emmeans marginaleffects packages. Hence, methods written packages, , model-object work ggemmeans() ggaverage().","code":""},{"path":"https://strengejacke.github.io/ggeffects/reference/get_predictions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"S3-class definition for the ggeffects package — get_predictions","text":"","code":"get_predictions(model, ...)  # Default S3 method get_predictions(   model,   data_grid = NULL,   terms = NULL,   ci_level = 0.95,   type = NULL,   typical = NULL,   vcov = NULL,   vcov_args = NULL,   condition = NULL,   interval = \"confidence\",   bias_correction = FALSE,   link_inverse = insight::link_inverse(model),   model_info = NULL,   verbose = TRUE,   ... )"},{"path":"https://strengejacke.github.io/ggeffects/reference/get_predictions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"S3-class definition for the ggeffects package — get_predictions","text":"model, terms, ci_level, type, typical, vcov, vcov_args, condition, interval, bias_correction, verbose Arguments call predict_response() passed get_predictions(). Note bias_correction usally already processed predict_response() thus need handling get_predictions(), unless need re-calculate link-inverse-function (argument link_inverse) inside get_predictions() method. ... arguments, passed predict() methods used get_predictions(). data_grid data frame containing data grid (reference grid) relevant values predictors adjusted predictions made. Typically data frame passed newdata argument predict(). data grid can created functions like data_grid() insight::get_datagrid(). link_inverse model's family link-inverse function. Can retrieved using insight::link_inverse(). model_info object returned insight::model_info().","code":""},{"path":"https://strengejacke.github.io/ggeffects/reference/get_predictions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"S3-class definition for the ggeffects package — get_predictions","text":"data frame contains data grid (argument data_grid) columns predicted, conf.low, conf.high optionally, attribute \"std.error\" standard errors. Note predictions confidence intervals already transformed response scale (e.g., using insight::link_inverse()). standard errors always link scale (transformed). values available (example, confidence intervals), set value NA.","code":""},{"path":"https://strengejacke.github.io/ggeffects/reference/get_predictions.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"S3-class definition for the ggeffects package — get_predictions","text":"Adding support ggeffects quite easy. user-level function predict_response(), either calls ggpredict(), ggemmeans() ggaverage(). function, turn, call predict(), emmeans::emmeans() marginaleffects::avg_predictions(). Following needs done add support new model classes: emmeans: model supported emmeans, automatically supported ggemmeans(). Thus, need add corresponding methods package model class supported **emmeans. marginaleffects: similar emmeans, package supported marginaleffects package, works ggaverage(). predict: order make model class work ggpredict(), need add get_predictions() method. documented arguments passed predict_response() get_predictions(), matter required calculate predictions . Thus, necessary process arguments, can used modulate certain settings calculating predictions. Note method define mentioned arguments, still passed via ... - make sure methods get_predictions() method still work process .... important function returns data frame specific structure, namely data grid columns predicted, conf.low, conf.high. Predictions intervals response scale. simple example class-implementation Gaussian-alike models look like :   simple example class-implementation non-Gaussian-alike models look like (note use link-inverse function link_inverse(), passed link_inverse argument):","code":"get_predictions.own_class <- function(model, data_grid, ci_level = 0.95, ...) {   predictions <- predict(     model,     newdata = data_grid,     type = \"response\",     se.fit = !is.na(ci_level),     ...   )    # do we have standard errors?   if (is.na(ci_level)) {     # copy predictions     data_grid$predicted <- as.vector(predictions)   } else {     # copy predictions     data_grid$predicted <- predictions$fit      # calculate CI     data_grid$conf.low <- predictions$fit - qnorm(0.975) * predictions$se.fit     data_grid$conf.high <- predictions$fit + qnorm(0.975) * predictions$se.fit      # optional: copy standard errors     attr(data_grid, \"std.error\") <- predictions$se.fit   }    data_grid } get_predictions.own_class <- function(model,                                       data_grid,                                       ci_level = 0.95,                                       link_inverse = insight::link_inverse(model),                                       ...) {   predictions <- predict(     model,     newdata = data_grid,     type = \"link\", # for non-Gaussian, return on link-scale     se.fit = !is.na(ci_level),     ...   )    # do we have standard errors?   if (is.na(ci_level)) {     # copy predictions     data_grid$predicted <- link_inverse(as.vector(predictions))   } else {     # copy predictions, use link-inverse to back-transform     data_grid$predicted <- link_inverse(predictions$fit)      # calculate CI     data_grid$conf.low <- link_inverse(       predictions$fit - qnorm(0.975) * predictions$se.fit     )     data_grid$conf.high <- link_inverse(       predictions$fit + qnorm(0.975) * predictions$se.fit     )      # optional: copy standard errors     attr(data_grid, \"std.error\") <- predictions$se.fit   }    data_grid }"},{"path":"https://strengejacke.github.io/ggeffects/reference/get_title.html","id":null,"dir":"Reference","previous_headings":"","what":"Get titles and labels from data — get_title","title":"Get titles and labels from data — get_title","text":"Get variable value labels ggeffects-objects. predict_response() saves information variable names value labels additional attributes returned data frame. especially helpful labelled data (see sjlabelled), since labels can used set axis labels titles.","code":""},{"path":"https://strengejacke.github.io/ggeffects/reference/get_title.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get titles and labels from data — get_title","text":"","code":"get_title(x, case = NULL)  get_x_title(x, case = NULL)  get_y_title(x, case = NULL)  get_legend_title(x, case = NULL)  get_legend_labels(x, case = NULL)  get_x_labels(x, case = NULL)  get_complete_df(x, case = NULL)"},{"path":"https://strengejacke.github.io/ggeffects/reference/get_title.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get titles and labels from data — get_title","text":"x object class ggeffects, returned ggeffects-function; get_complete_df(), must list ggeffects-objects. case Desired target case. Labels automatically converted specified character case. See ?sjlabelled::convert_case details argument.","code":""},{"path":"https://strengejacke.github.io/ggeffects/reference/get_title.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get titles and labels from data — get_title","text":"titles labels character string, NULL, variables labels; get_complete_df() returns input list x single data frame, grouping variable indicates predicted values term.","code":""},{"path":"https://strengejacke.github.io/ggeffects/reference/get_title.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get titles and labels from data — get_title","text":"","code":"library(ggeffects) library(ggplot2) data(efc, package = \"ggeffects\") efc$c172code <- datawizard::to_factor(efc$c172code) fit <- lm(barthtot ~ c12hour + neg_c_7 + c161sex + c172code, data = efc)  mydf <- predict_response(fit, terms = c(\"c12hour\", \"c161sex\", \"c172code\"))  ggplot(mydf, aes(x = x, y = predicted, colour = group)) +   stat_smooth(method = \"lm\") +   facet_wrap(~facet, ncol = 2) +   labs(     x = get_x_title(mydf),     y = get_y_title(mydf),     colour = get_legend_title(mydf)   ) #> `geom_smooth()` using formula = 'y ~ x'   # adjusted predictions, a list of data frames (one data frame per term) eff <- ggeffect(fit) eff #> $c12hour #> # Predicted values of Total score BARTHEL INDEX #>  #> c12hour | Predicted |       95% CI #> ---------------------------------- #>       0 |     75.44 | 73.25, 77.63 #>      20 |     70.38 | 68.56, 72.19 #>      45 |     64.05 | 62.39, 65.70 #>      65 |     58.98 | 57.16, 60.81 #>      85 |     53.92 | 51.71, 56.12 #>     105 |     48.85 | 46.15, 51.55 #>     125 |     43.79 | 40.52, 47.06 #>     170 |     32.39 | 27.74, 37.05 #>  #>  #> Not all rows are shown in the output. Use `print(..., n = Inf)` to show #>   all rows. #>  #> $neg_c_7 #> # Predicted values of Total score BARTHEL INDEX #>  #> neg_c_7 | Predicted |       95% CI #> ---------------------------------- #>       6 |     78.07 | 75.01, 81.14 #>       8 |     73.51 | 71.14, 75.88 #>      12 |     64.39 | 62.73, 66.04 #>      14 |     59.82 | 57.91, 61.73 #>      16 |     55.26 | 52.79, 57.73 #>      20 |     46.13 | 42.16, 50.10 #>      22 |     41.57 | 36.78, 46.36 #>      28 |     27.88 | 20.55, 35.22 #>  #>  #> Not all rows are shown in the output. Use `print(..., n = Inf)` to show #>   all rows. #>  #> $c161sex #> # Predicted values of Total score BARTHEL INDEX #>  #> c161sex | Predicted |       95% CI #> ---------------------------------- #>       1 |     64.09 | 60.69, 67.49 #>       2 |     64.96 | 63.07, 66.86 #>  #>  #> $c172code #> # Predicted values of Total score BARTHEL INDEX #>  #> c172code                        | Predicted |       95% CI #> ---------------------------------------------------------- #> low level of education          |     62.79 | 59.21, 66.38 #> intermediate level of education |     65.68 | 63.55, 67.81 #> high level of education         |     64.01 | 60.14, 67.88 #>  #>  #> attr(,\"class\") #> [1] \"ggalleffects\" \"list\"         #> attr(,\"model.name\") #> [1] \"fit\" get_complete_df(eff) #> # Predicted values of Total score BARTHEL INDEX #>  #> : c12hour #>  #> c12hour | Predicted |       95% CI #> ---------------------------------- #>       0 |     75.44 | 73.25, 77.63 #>      35 |     66.58 | 64.91, 68.25 #>      70 |     57.71 | 55.81, 59.62 #>     100 |     50.12 | 47.55, 52.69 #>     170 |     32.39 | 27.74, 37.05 #>  #> : c161sex #>  #> c12hour | Predicted |       95% CI #> ---------------------------------- #>       1 |     64.09 | 60.69, 67.49 #>       2 |     64.96 | 63.07, 66.86 #>  #> : c172code #>  #> c12hour | Predicted |       95% CI #> ---------------------------------- #>       1 |     62.79 | 59.21, 66.38 #>       2 |     65.68 | 63.55, 67.81 #>       3 |     64.01 | 60.14, 67.88 #>  #> : neg_c_7 #>  #> c12hour | Predicted |       95% CI #> ---------------------------------- #>       6 |     78.07 | 75.01, 81.14 #>      10 |     68.95 | 67.11, 70.79 #>      14 |     59.82 | 57.91, 61.73 #>      20 |     46.13 | 42.16, 50.10 #>      28 |     27.88 | 20.55, 35.22 #>  #>  #> Not all rows are shown in the output. Use `print(..., n = Inf)` to show #>   all rows.  # adjusted predictions for education only, and get x-axis-labels mydat <- eff[[\"c172code\"]] ggplot(mydat, aes(x = x, y = predicted, group = group)) +   stat_summary(fun = sum, geom = \"line\") +   scale_x_discrete(labels = get_x_labels(mydat))"},{"path":"https://strengejacke.github.io/ggeffects/reference/ggpredict.html","id":null,"dir":"Reference","previous_headings":"","what":"Adjusted predictions from regression models — as.data.frame.ggeffects","title":"Adjusted predictions from regression models — as.data.frame.ggeffects","text":"fitting model, useful generate model-based estimates (expected values, adjusted predictions) response variable different combinations predictor values. estimates can used make inferences relationships variables. ggeffects package computes marginal means adjusted predicted values response, margin specific values levels certain model terms. package built around three core functions: predict_response() (understanding results), test_predictions() (testing results statistically significant differences) plot() (communicate results). default, adjusted predictions marginal means returned response scale, easiest intuitive scale interpret results. options specific models well, e.g. zero-inflation component (see documentation type-argument). result returned consistent data frame, nicely printed default. plot() can used easily create figures. main function calculate marginal means adjusted predictions predict_response(). previous versions ggeffects, functions ggpredict(), ggemmeans(), ggeffect() ggaverage() used calculate marginal means adjusted predictions. functions still available, predict_response() \"wrapper\" around functions preferred way now.","code":""},{"path":"https://strengejacke.github.io/ggeffects/reference/ggpredict.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Adjusted predictions from regression models — as.data.frame.ggeffects","text":"","code":"# S3 method for class 'ggeffects' as.data.frame(   x,   row.names = NULL,   optional = FALSE,   ...,   stringsAsFactors = FALSE,   terms_to_colnames = FALSE )  ggaverage(   model,   terms,   ci_level = 0.95,   type = \"fixed\",   typical = \"mean\",   condition = NULL,   back_transform = TRUE,   vcov = NULL,   vcov_args = NULL,   weights = NULL,   verbose = TRUE,   ... )  ggeffect(   model,   terms,   ci_level = 0.95,   bias_correction = FALSE,   verbose = TRUE,   ... )  ggemmeans(   model,   terms,   ci_level = 0.95,   type = \"fixed\",   typical = \"mean\",   condition = NULL,   interval = \"confidence\",   back_transform = TRUE,   vcov = NULL,   vcov_args = NULL,   bias_correction = FALSE,   weights = NULL,   verbose = TRUE,   ... )  ggpredict(   model,   terms,   ci_level = 0.95,   type = \"fixed\",   typical = \"mean\",   condition = NULL,   interval = \"confidence\",   back_transform = TRUE,   vcov = NULL,   vcov_args = NULL,   bias_correction = FALSE,   verbose = TRUE,   ... )"},{"path":"https://strengejacke.github.io/ggeffects/reference/ggpredict.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Adjusted predictions from regression models — as.data.frame.ggeffects","text":"x object class ggeffects, returned predict_response(), ggpredict(), ggeffect(), ggaverage() ggemmeans(). row.names NULL character vector giving row     names data frame.  Missing values allowed. optional logical. TRUE, setting row names     converting column names (syntactic names: see     make.names) optional.  Note R's     base package .data.frame() methods use     optional column names treatment, basically     meaning data.frame(*, check.names = !optional).     See also make.names argument matrix method. ... Arguments passed ggpredict() (predict()) ggemmeans() (thereby emmeans::emmeans()), type = \"simulate\", ... may also used set number simulation, e.g. nsim = 500. calling ggeffect(), arguments passed effects::Effect(). stringsAsFactors logical: character vector converted     factor? terms_to_colnames Logical, TRUE, standardized column names (like \"x\", \"group\" \"facet\") replaced variable names focal predictors specified terms. model model object, list model objects. terms Names terms model, predictions displayed (called focal terms). Can : character vector, specifying names focal terms. preferred probably flexible way specify focal terms, e.g. terms = \"x [40:60]\", calculate predictions values 40 60. list, element named vector, specifying focal terms values. \"classical\" R way specify focal terms, e.g. list(x = 40:60). formula, e.g. terms = ~ x + z, internally converted character vector. probably least flexible way, specify representative values focal terms. data frame representing \"data grid\" \"reference grid\". Predictions made combinations variables data frame. terms least requires one variable name. maximum length four terms, second fourth term indicate groups, .e. predictions first term grouped meaningful values levels remaining terms (see values_at()). also possible define specific values focal terms, adjusted predictions calculated (see details ). remaining covariates specified terms \"marginalized\", see margin argument ?predict_response. See also argument condition fix non-focal terms specific values, argument typical ggpredict() ggemmeans(). ci_level Numeric, level confidence intervals. Use ci_level = NA confidence intervals calculated (instance, due computation time). Typically, confidence intervals based returned standard errors predictions, assuming t- normal distribution (based model available degrees freedom, .e. roughly +/- 1.96 * SE). See introduction vignette details. type Character, indicating whether predictions conditioned specific model components , whether population unit-level predictions desired. Consequently, options apply survival models, mixed effects models /models zero-inflation (Bayesian counter-parts); exception type = \"simulate\", available model classes well (respond simulate()). Note 1: brmsfit-models zero-inflation component, type = \"zero_inflated\" type = \"zi_random\"; predicted values models always condition zero-inflation part model. true MixMod-models GLMMadaptive zero-inflation component (see 'Details'). Note 2: margin = \"empirical\", calling ggaverage() respectively, (.e. counterfactual predictions), type argument handled differently. set \"response\" default, usually accepts possible options type-argument model's respective predict() method. E.g., passing glm object allow options \"response\", \"link\", \"terms\". models zero-inflation component, mentioned options \"fixed\", \"zero_inflated\" \"zi_prob\" can also used \"translated\" corresponding type option model's respective predict()-method. Note 3: margin = \"marginalmeans\", calling ggemmeans() respectively, type = \"random\" type = \"zi_random\" available, .e. unit-level predictions possible. \"fixed\" (\"count\") Predicted values conditioned fixed effects conditional model . mixed models, predicted values population-level, .e. re.form = NA calling predict(). models zero-inflation component, type return predicted mean count component (without conditioning zero-inflation part). \"random\" applies mixed models, type = \"random\" condition zero-inflation component model. Use unit-level predictions, .e. predicted values level random effects groups. Add name related random effect term terms-argument (details, see vignette). \"zero_inflated\" (\"zi\") Predicted values conditioned fixed effects zero-inflation component, returning expected value response (mu*(1-p)). mixed models zero-inflation component (e.g. package glmmTMB), return expected response mu*(1-p) population-level. See 'Details'. \"zi_random\" (\"zero_inflated_random\") applies mixed models. Predicted values conditioned fixed effects zero-inflation component. Use unit-level predictions, .e. predicted values level random effects groups. Add name related random effect term terms-argument (details, see vignette). \"zi_prob\" Returns predicted zero-inflation probability, .e. probability structural \"true\" zero (see vignette short introduction zero-inflation models). \"simulate\" Predicted values confidence resp. prediction intervals based simulations, .e. calls simulate(). type prediction takes model uncertainty account. Currently supported models objects class lm, glm, glmmTMB, wbm, MixMod merMod. Use nsim set number simulated draws (see ... details). \"survival\", \"cumulative_hazard\" \"quantile\" \"survival\" \"cumulative_hazard\" apply coxph-objects survial-package. options calculate survival probability cumulative hazard event. type = \"quantile\" applies survreg-objects package survival, returns predicted quantiles. option, p argument passed predict(), quantiles different probabilities can calculated, e.g. predict_response(..., type = \"quantile\", p = c(0.2, 0.5, 0.8)). margin = \"empirical\" (calling ggaverage()), type argument accepts values type-argument model's respective predict()-method. typical Character vector, naming function applied covariates (non-focal terms) effect \"averaged\". default \"mean\". Can \"mean\", \"weighted.mean\", \"median\", \"mode\" \"zero\", call corresponding R functions (except \"mode\", calls internal function compute common value); \"zero\" simply returns 0. default, covariate factor, \"mode\" applicable; values (including default, \"mean\") reference level returned. character vectors, mode returned. can use named vector apply different functions integer, numeric categorical covariates, e.g. typical = c(numeric = \"median\", factor = \"mode\"). typical \"weighted.mean\", weights model used. weights available, function falls back \"mean\". Note argument ignored predict_response(), margin argument takes care . condition Named character vector, indicates covariates held constant specific values. Unlike typical, applies function covariates determine value used hold covariates constant, condition can used define exact values, instance condition = c(covariate1 = 20, covariate2 = 5). See 'Examples'. back_transform Logical, TRUE (default), predicted values log-, log-log, exp, sqrt similar transformed responses back-transformed original response-scale. See insight::find_transformation() details. vcov Variance-covariance matrix used compute uncertainty estimates (e.g., confidence intervals based robust standard errors). argument accepts covariance matrix, function returns covariance matrix, string identifies function used compute covariance matrix. covariance matrix function returns covariance matrix (e.g., stats::vcov()) string indicates kind uncertainty estimates return. Heteroskedasticity-consistent: \"HC\", \"HC0\", \"HC1\", \"HC2\", \"HC3\", \"HC4\", \"HC4m\", \"HC5\". See ?sandwich::vcovHC Cluster-robust: \"vcovCR\", \"CR0\", \"CR1\", \"CR1p\", \"CR1S\", \"CR2\", \"CR3\". See ?clubSandwich::vcovCR. Bootstrap: \"BS\", \"xy\", \"fractional\", \"jackknife\", \"residual\", \"wild\", \"mammen\", \"norm\", \"webb\". See ?sandwich::vcovBS sandwich package functions: \"HAC\", \"PC\", \"CL\", \"PL\". NULL, standard errors (confidence intervals) predictions based standard errors returned predict()-function. Note probably model objects work predict_response() also supported sandwich clubSandwich packages. See details vignette. vcov_args List arguments passed function identified vcov argument. function typically supplied sandwich clubSandwich packages. Please refer documentation (e.g., ?sandwich::vcovHAC) see list available arguments. estimation type (argument type) given, default type \"HC\" equals default sandwich package; type \"CR\" default set \"CR3\". defaults, refer documentation sandwich clubSandwich package. weights argument used two different ways, depending margin argument. margin = \"empirical\" (calling ggaverag()), weights can either character vector, naming weigthing variable data, vector weights (length number observations data). variable used weight adjusted predictions. margin = \"marginalmeans\" (calling ggemmeans()), weights must character vector passed emmeans::emmeans(), specifying weights use averaging non-focal categorical predictors. Options \"equal\", \"proportional\", \"outer\", \"cells\", \"flat\", \"show.levels\". See ?emmeans::emmeans details. verbose Toggle messages warnings. bias_correction Logical, TRUE, adjusts bias-correction back-transforming predicted values (response scale) non-Gaussian mixed models. Back-transforming population-level predictions ignores effect variation around population mean, result original data scale biased due Jensen's inequality. means, type = \"fixed\" (default) population level predictions returned, recommended set bias_correction = TRUE. apply bias-correction, valid value sigma required, extracted default using insight::get_variance_residual(). Optionally, provide estimates uncertainty, use sigma argument. Note bias_correction currently applies mixed models, additive random components involved bias-adjustment can appropriate. ggemmeans() called, bias-correction can also applied GEE-models. interval Type interval calculation, can either \"confidence\" (default) \"prediction\". May abbreviated. Unlike confidence intervals, prediction intervals include residual variance (sigma^2) account uncertainty predicted values. Note prediction intervals available models, models work insight::get_sigma(). Bayesian models, interval = \"confidence\", predictions based posterior draws linear predictor rstantools::posterior_epred(). interval = \"prediction\", rstantools::posterior_predict() called.","code":""},{"path":"https://strengejacke.github.io/ggeffects/reference/ggpredict.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Adjusted predictions from regression models — as.data.frame.ggeffects","text":"data frame (ggeffects class attribute) consistent data columns: \"x\": values first term terms, used x-position plots. \"predicted\": predicted values response, used y-position plots. \"std.error\": standard error predictions. Note standard errors always link-scale, back-transformed non-Gaussian models! \"conf.low\": lower bound confidence interval predicted values. \"conf.high\": upper bound confidence interval predicted values. \"group\": grouping level second term terms, used grouping-aesthetics plots. \"facet\": grouping level third term terms, used indicate facets plots. estimated marginal means (predicted values) always response scale! proportional odds logistic regression (see ?MASS::polr) resp. cumulative link models (e.g., see ?ordinal::clm), additional column \"response.level\" returned, indicates grouping predictions based level model's response. Note convenience reasons, columns intervals always named \"conf.low\" \"conf.high\", even though Bayesian models credible highest posterior density intervals returned. .data.frame() method objects class ggeffects, terms_to_colnames argument, use term names column names instead standardized names \"x\" etc.","code":""},{"path":"https://strengejacke.github.io/ggeffects/reference/ggpredict.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Adjusted predictions from regression models — as.data.frame.ggeffects","text":"Please see ?predict_response details examples.","code":""},{"path":"https://strengejacke.github.io/ggeffects/reference/install_latest.html","id":null,"dir":"Reference","previous_headings":"","what":"Update latest ggeffects-version from R-universe (GitHub) or CRAN — install_latest","title":"Update latest ggeffects-version from R-universe (GitHub) or CRAN — install_latest","text":"function can used install latest package version ggeffects, either development version (R-universe/GitHub) current version CRAN.","code":""},{"path":"https://strengejacke.github.io/ggeffects/reference/install_latest.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update latest ggeffects-version from R-universe (GitHub) or CRAN — install_latest","text":"","code":"install_latest(   source = c(\"development\", \"cran\"),   force = FALSE,   verbose = TRUE )"},{"path":"https://strengejacke.github.io/ggeffects/reference/install_latest.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update latest ggeffects-version from R-universe (GitHub) or CRAN — install_latest","text":"source Character. Either \"development\" \"cran\". \"cran\", ggeffects installed default CRAN mirror returned getOption(\"repos\")['CRAN']. \"development\" (default), ggeffects installed r-universe repository (https://strengejacke.r-universe.dev/). force Logical, FALSE, update installed newer version available. Use force=TRUE force installation, even version number locally installed package identical latest development-version. applies source=\"development\". verbose Toggle messages.","code":""},{"path":"https://strengejacke.github.io/ggeffects/reference/install_latest.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Update latest ggeffects-version from R-universe (GitHub) or CRAN — install_latest","text":"Invisible NULL.","code":""},{"path":"https://strengejacke.github.io/ggeffects/reference/install_latest.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Update latest ggeffects-version from R-universe (GitHub) or CRAN — install_latest","text":"","code":"if (FALSE) { # install latest development-version of ggeffects from the # r-universe repository install_latest() }"},{"path":"https://strengejacke.github.io/ggeffects/reference/johnson_neyman.html","id":null,"dir":"Reference","previous_headings":"","what":"Spotlight-analysis: Create Johnson-Neyman confidence intervals and plots — johnson_neyman","title":"Spotlight-analysis: Create Johnson-Neyman confidence intervals and plots — johnson_neyman","text":"Function conduct spotlight-analysis create -called Johnson-Neyman intervals. plot() method can used visualize results Johnson-Neyman test.","code":""},{"path":"https://strengejacke.github.io/ggeffects/reference/johnson_neyman.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Spotlight-analysis: Create Johnson-Neyman confidence intervals and plots — johnson_neyman","text":"","code":"johnson_neyman(x, precision = 500, p_adjust = NULL, ...)  spotlight_analysis(x, precision = 500, p_adjust = NULL, ...)  # S3 method for class 'ggjohnson_neyman' plot(   x,   colors = c(\"#f44336\", \"#2196F3\"),   show_association = TRUE,   show_rug = FALSE,   verbose = TRUE,   ... )"},{"path":"https://strengejacke.github.io/ggeffects/reference/johnson_neyman.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Spotlight-analysis: Create Johnson-Neyman confidence intervals and plots — johnson_neyman","text":"x object class ggeffects, returned functions package. precision Number values used range moderator variable calculate Johnson-Neyman interval. argument passed pretty(..., n = precision). Usually, default value 500 sufficient. Increasing value result smoother plot accurate values interval bounds, can also slightly increase computation time. p_adjust Character vector, NULL, indicates method adjust p-values. See stats::p.adjust() stats::p.adjust.methods details. possible adjustment methods \"tukey\" \"sidak\", johnson_neyman(), \"fdr\" (\"bh\") \"esarey\" (short-cut \"es\") available options. caution necessary adjusting p-value multiple comparisons. See also section P-value adjustment . ... Arguments passed test_predictions() (probably marginaleffects::slopes()). See ?test_predictions details. colors Colors used plot. Must vector two color values. used show_association = TRUE. show_association Logical, TRUE, highlights range values moderator positively negtatively associated outcome. show_rug Logical, TRUE, adds rug raw data moderator variable plot. helps visualizing distribution. verbose Show/hide printed message plots.","code":""},{"path":"https://strengejacke.github.io/ggeffects/reference/johnson_neyman.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Spotlight-analysis: Create Johnson-Neyman confidence intervals and plots — johnson_neyman","text":"data frame including contrasts test_predictions() given interaction terms; plot(), returns Johnson-Neyman plot.","code":""},{"path":"https://strengejacke.github.io/ggeffects/reference/johnson_neyman.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Spotlight-analysis: Create Johnson-Neyman confidence intervals and plots — johnson_neyman","text":"Johnson-Neyman intervals help understand slopes significant context interactions regression models. Thus, interval useful model contains least one interaction term. function accepts results call predict_response(). first last focal term used terms argument predict_response() must numeric. function test slopes first focal terms zero, different moderator values last focal term. one numeric focal term given, function create contrasts levels categorical focal term. Use plot() create plot results. avoid misleading interpretations plot, speak \"positive\" \"negative\" associations, respectively, \"clear\" associations (instead \"significant\" \"non-significant\"). prevent user considering non-significant range values moderator \"accepting null hypothesis\".","code":""},{"path":"https://strengejacke.github.io/ggeffects/reference/johnson_neyman.html","id":"p-value-adjustment-for-multiple-comparisons","dir":"Reference","previous_headings":"","what":"P-value adjustment for multiple comparisons","title":"Spotlight-analysis: Create Johnson-Neyman confidence intervals and plots — johnson_neyman","text":"Note p-value adjustment methods supported p.adjust() (see also p.adjust.methods), row considered one set comparisons, matter test specified. , instance, test_predictions() returns eight rows predictions (test = NULL), p_adjust = \"bonferroni\", p-values adjusted way test pairwise comparisons (test = \"pairwise\") eight rows comparisons returned. methods \"tukey\" \"sidak\", rank adjustment done based number combinations levels focal predictors terms. Thus, latter two methods may useful certain tests , particular pairwise comparisons. johnson_neyman(), available adjustment methods \"fdr\" (\"bh\") (Benjamini & Hochberg (1995)) \"esarey\" (\"es\") (Esarey Sumner 2017). usually return similar results. major difference \"fdr\" can slightly faster stable edge cases, however, confidence intervals updated. p-values adjusted. \"esarey\" slower, confidence intervals updated well.","code":""},{"path":"https://strengejacke.github.io/ggeffects/reference/johnson_neyman.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Spotlight-analysis: Create Johnson-Neyman confidence intervals and plots — johnson_neyman","text":"Bauer, D. J., & Curran, P. J. (2005). Probing interactions fixed multilevel regression: Inferential graphical techniques. Multivariate Behavioral Research, 40(3), 373-400. doi: 10.1207/s15327906mbr4003_5 Esarey, J., & Sumner, J. L. (2017). Marginal effects interaction models: Determining controlling false positive rate. Comparative Political Studies, 1–33. Advance online publication. doi: 10.1177/0010414017730080 Johnson, P.O. & Fay, L.C. (1950). Johnson-Neyman technique, theory application. Psychometrika, 15, 349-367. doi: 10.1007/BF02288864 McCabe CJ, Kim DS, King KM. Improving Present Practices Visual Display Interactions. Advances Methods Practices Psychological Science. 2018;1(2):147-165. doi:10.1177/2515245917746792 Spiller, S. ., Fitzsimons, G. J., Lynch, J. G., & McClelland, G. H. (2013). Spotlights, Floodlights, Magic Number Zero: Simple Effects Tests Moderated Regression. Journal Marketing Research, 50(2), 277–288. doi:10.1509/jmr.12.0420","code":""},{"path":"https://strengejacke.github.io/ggeffects/reference/johnson_neyman.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Spotlight-analysis: Create Johnson-Neyman confidence intervals and plots — johnson_neyman","text":"","code":"# \\dontrun{ data(efc, package = \"ggeffects\") efc$c172code <- as.factor(efc$c172code) m <- lm(neg_c_7 ~ c12hour * barthtot * c172code, data = efc)  pr <- predict_response(m, c(\"c12hour\", \"barthtot\")) johnson_neyman(pr) #> The association between `c12hour` and `neg_c_7` is negative for values #>   of `barthtot` lower than 47. There were no clear associations for values #>   of `barthtot` higher than 47. plot(johnson_neyman(pr)) #> The association between `c12hour` and `neg_c_7` is negative for values #>   of `barthtot` lower than 47. There were no clear associations for values #>   of `barthtot` higher than 47.   pr <- predict_response(m, c(\"c12hour\", \"c172code\", \"barthtot\")) johnson_neyman(pr) #> # Level `c172code = 1` #> The association between `c12hour` and `neg_c_7` is negative for values #>   of `barthtot` lower than 47. There were no clear associations for values #>   of `barthtot` higher than 47. #>  #> # Level `c172code = 2` #> The association between `c12hour` and `neg_c_7` is positive for values #>   of `barthtot` higher than 33.80. There were no clear associations for #>   values of `barthtot` lower than 33.80. #>  #> # Level `c172code = 3` #> There are no clear negative or positive associations between `c12hour` #>   and `neg_c_7` for any value of `barthtot`. plot(johnson_neyman(pr)) #> # Level `c172code = 1` #> The association between `c12hour` and `neg_c_7` is negative for values #>   of `barthtot` lower than 47. There were no clear associations for values #>   of `barthtot` higher than 47. #>  #> # Level `c172code = 2` #> The association between `c12hour` and `neg_c_7` is positive for values #>   of `barthtot` higher than 33.80. There were no clear associations for #>   values of `barthtot` lower than 33.80. #>  #> # Level `c172code = 3` #> There are no clear negative or positive associations between `c12hour` #>   and `neg_c_7` for any value of `barthtot`.   # robust standard errors if (requireNamespace(\"sandwich\")) {   johnson_neyman(pr, vcov = sandwich::vcovHC) } #> # Level `c172code = 1` #> The association between `c12hour` and `neg_c_7` is negative for values #>   of `barthtot` lower than 42.20. There were no clear associations for #>   values of `barthtot` higher than 42.20. #>  #> # Level `c172code = 2` #> The association between `c12hour` and `neg_c_7` is positive for values #>   of `barthtot` higher than 37.20. There were no clear associations for #>   values of `barthtot` lower than 37.20. #>  #> # Level `c172code = 3` #> There are no clear negative or positive associations between `c12hour` #>   and `neg_c_7` for any value of `barthtot`. # }"},{"path":"https://strengejacke.github.io/ggeffects/reference/lung2.html","id":null,"dir":"Reference","previous_headings":"","what":"Sample data set — lung2","title":"Sample data set — lung2","text":"sample data set, used tests examples survival models. dataset originally included survival package, convenience reasons also available package.","code":""},{"path":"https://strengejacke.github.io/ggeffects/reference/new_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a data frame from all combinations of predictor values — new_data","title":"Create a data frame from all combinations of predictor values — new_data","text":"Create data frame \"newdata\"-argument contains combinations values terms questions. Similar expand.grid(). terms-argument accepts shortcuts representative values predict_response().","code":""},{"path":"https://strengejacke.github.io/ggeffects/reference/new_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a data frame from all combinations of predictor values — new_data","text":"","code":"new_data(model, terms, typical = \"mean\", condition = NULL, ...)  data_grid(model, terms, typical = \"mean\", condition = NULL, ...)"},{"path":"https://strengejacke.github.io/ggeffects/reference/new_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a data frame from all combinations of predictor values — new_data","text":"model fitted model object. terms Character vector names terms model combinations values created. argument works way terms argument predict_response(). See also vignette. typical Character vector, naming function applied covariates (non-focal terms) effect \"averaged\". default \"mean\". Can \"mean\", \"weighted.mean\", \"median\", \"mode\" \"zero\", call corresponding R functions (except \"mode\", calls internal function compute common value); \"zero\" simply returns 0. default, covariate factor, \"mode\" applicable; values (including default, \"mean\") reference level returned. character vectors, mode returned. can use named vector apply different functions integer, numeric categorical covariates, e.g. typical = c(numeric = \"median\", factor = \"mode\"). typical \"weighted.mean\", weights model used. weights available, function falls back \"mean\". Note argument ignored predict_response(), margin argument takes care . condition Named character vector, indicates covariates held constant specific values. Unlike typical, applies function covariates determine value used hold covariates constant, condition can used define exact values, instance condition = c(covariate1 = 20, covariate2 = 5). See 'Examples'. ... Currently used.","code":""},{"path":"https://strengejacke.github.io/ggeffects/reference/new_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a data frame from all combinations of predictor values — new_data","text":"data frame containing one row combination values supplied variables.","code":""},{"path":"https://strengejacke.github.io/ggeffects/reference/new_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a data frame from all combinations of predictor values — new_data","text":"","code":"data(efc, package = \"ggeffects\") fit <- lm(barthtot ~ c12hour + neg_c_7 + c161sex + c172code, data = efc) new_data(fit, c(\"c12hour [meansd]\", \"c161sex\")) #>   c12hour c161sex  neg_c_7 c172code #> 1    -8.3       1 11.83804 1.970552 #> 2    42.2       1 11.83804 1.970552 #> 3    92.7       1 11.83804 1.970552 #> 4    -8.3       2 11.83804 1.970552 #> 5    42.2       2 11.83804 1.970552 #> 6    92.7       2 11.83804 1.970552  nd <- new_data(fit, c(\"c12hour [meansd]\", \"c161sex\")) pr <- predict(fit, type = \"response\", newdata = nd) nd$predicted <- pr nd #>   c12hour c161sex  neg_c_7 c172code predicted #> 1    -8.3       1 11.83804 1.970552  76.75375 #> 2    42.2       1 11.83804 1.970552  63.96204 #> 3    92.7       1 11.83804 1.970552  51.17033 #> 4    -8.3       2 11.83804 1.970552  77.79518 #> 5    42.2       2 11.83804 1.970552  65.00347 #> 6    92.7       2 11.83804 1.970552  52.21175  # compare to predict_response(fit, c(\"c12hour [meansd]\", \"c161sex\")) #> # Predicted values of Total score BARTHEL INDEX #>  #> c161sex: Male #>  #> c12hour | Predicted |       95% CI #> ---------------------------------- #>   -8.30 |     76.75 | 73.02, 80.49 #>   42.20 |     63.96 | 60.57, 67.35 #>   92.70 |     51.17 | 47.30, 55.04 #>  #> c161sex: Female #>  #> c12hour | Predicted |       95% CI #> ---------------------------------- #>   -8.30 |     77.80 | 75.20, 80.39 #>   42.20 |     65.00 | 63.11, 66.90 #>   92.70 |     52.21 | 49.68, 54.74 #>  #> Adjusted for: #> *  neg_c_7 = 11.84 #> * c172code =  1.97"},{"path":"https://strengejacke.github.io/ggeffects/reference/plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot ggeffects-objects — plot","title":"Plot ggeffects-objects — plot","text":"plot generic plot-method ggeffects-objects. ggeffects_palette() returns show_palettes()","code":""},{"path":"https://strengejacke.github.io/ggeffects/reference/plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot ggeffects-objects — plot","text":"","code":"# S3 method for class 'ggeffects' plot(   x,   show_ci = TRUE,   ci_style = c(\"ribbon\", \"errorbar\", \"dash\", \"dot\"),   show_data = FALSE,   show_residuals = FALSE,   show_residuals_line = FALSE,   data_labels = FALSE,   limit_range = FALSE,   collapse_group = FALSE,   show_legend = TRUE,   show_title = TRUE,   show_x_title = TRUE,   show_y_title = TRUE,   case = NULL,   colors = NULL,   alpha = 0.15,   dot_size = NULL,   dot_alpha = 0.35,   dot_shape = NULL,   line_size = NULL,   jitter = NULL,   dodge = 0.25,   use_theme = TRUE,   log_y = FALSE,   connect_lines = FALSE,   facets,   grid,   one_plot = TRUE,   n_rows = NULL,   verbose = TRUE,   ... )  theme_ggeffects(base_size = 11, base_family = \"\")  ggeffects_palette(palette = \"metro\", n = NULL)  show_palettes()"},{"path":"https://strengejacke.github.io/ggeffects/reference/plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot ggeffects-objects — plot","text":"x object class ggeffects, returned functions package. show_ci Logical, TRUE, confidence bands (continuous variables x-axis) resp. error bars (factors x-axis) plotted. ci_style Character vector, indicating style confidence bands. May either \"ribbon\", \"errorbar\", \"dash\" \"dot\", plot ribbon, error bars, dashed dotted lines confidence bands. show_data Logical, TRUE, layer raw data response predictor x-axis, plotted point-geoms, added plot. Note model transformed response variable, predicted values back-transformed (.e. back_transform = FALSE), raw data points plotted transformed scale, .e. scale predictions. show_residuals Logical, TRUE, layer partial residuals added plot. See vignette Effect Displays Partial Residuals. effects details partial residual plots. show_residuals_line Logical, TRUE, loess-fit line added partial residuals plot. applies residuals TRUE. data_labels Logical, TRUE row names data available, data points labelled related row name. limit_range Logical, TRUE, limits range prediction bands range data. collapse_group mixed effects models, name grouping variable random effects. collapse_group = TRUE, data points \"collapsed\" first random effect groups added plot. Else, collapse_group name group factor, data collapsed specific random effect. See collapse_by_group() details. show_legend Logical, shows hides plot legend. show_title Logical, shows hides plot title- show_x_title Logical, shows hides plot title x-axis. show_y_title Logical, shows hides plot title y-axis. case Desired target case. Labels automatically converted specified character case. See ?sjlabelled::convert_case details argument. colors Character vector color values hex-format, valid color value names (see demo(\"colors\")) name ggeffects-color-palette (see ggeffects_palette()). Following options valid colors: specified, color brewer palette \"Set1\" used. \"gs\", greyscale used. \"bw\", plot black/white uses different line types distinguish groups. pre-defined color-palettes package can used, e.g. colors = \"metro\". See show_palettes() show available palettes. Else specify color values names vector (e.g. colors = c(\"#f00000\", \"#00ff00\")). alpha Alpha value confidence bands. dot_size Numeric, size point geoms. dot_alpha Alpha value data points, show_data = TRUE. dot_shape Shape data points, show_data = TRUE. line_size Numeric, size line geoms. jitter Numeric, 0 1. NULL show_data = TRUE, adds small amount random variation location data points dots, avoid overplotting. Hence points reflect exact values data. May also numeric vector length two, add different horizontal vertical jittering. binary outcomes, raw data jittered default avoid data points exceed axis limits. dodge Value offsetting shifting error bars, avoid overlapping. applies, factor plotted x-axis (cases, confidence bands replaced error bars automatically), ci_style = \"errorbars\". use_theme Logical, TRUE, slightly tweaked version ggplot's minimal-theme, theme_ggeffects(), applied plot. FALSE, theme-modifications applied. log_y Logical, TRUE, y-axis scale log-transformed. might useful binomial models predicted probabilities y-axis. connect_lines Logical, TRUE plot point-geoms error bars (usually case x-axis discrete), points groups connected line. facets, grid Logical, defaults TRUE x column named facet, defaults FALSE x column. Set facets = TRUE wrap plot facets even grouping variables (see 'Examples'). grid alias facets. one_plot Logical, TRUE x panel column (.e. four terms used), single, integrated plot produced. n_rows Number rows align plots. default, plots aligned one row. facets, multiple panels, plots can also aligned multiiple rows, avoid plots small. verbose Logical, toggle warnings messages. ... arguments passed ggplot::scale_y*(), control appearance y-axis. base_size Base font size. base_family Base font family. palette Name pre-defined color-palette string. See show_palettes() show available palettes. Use NULL return list names color-codes avaibale palettes. n Number color-codes palette returned.","code":""},{"path":"https://strengejacke.github.io/ggeffects/reference/plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot ggeffects-objects — plot","text":"ggplot2-object.","code":""},{"path":"https://strengejacke.github.io/ggeffects/reference/plot.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot ggeffects-objects — plot","text":"proportional odds logistic regression (see ?MASS::polr) cumulative link models general, plots automatically facetted response.level, indicates grouping predictions based level model's response.","code":""},{"path":"https://strengejacke.github.io/ggeffects/reference/plot.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Plot ggeffects-objects — plot","text":"Load library(ggplot2) use theme_set(theme_ggeffects()) set ggeffects-theme default plotting theme. can use plot-modifiers, e.g. sjPlot, like legend_style() font_size() without losing theme-modifications. pre-defined colour palettes package. Use show_palettes() show available colour palettes plot, ggeffects_palette(palette = NULL) show color codes.","code":""},{"path":"https://strengejacke.github.io/ggeffects/reference/plot.html","id":"partial-residuals","dir":"Reference","previous_headings":"","what":"Partial Residuals","title":"Plot ggeffects-objects — plot","text":"generalized linear models (glms), residualized scores computed inv.link(link(Y) + r) Y predicted values response scale, r working residuals.  (generalized) linear mixed models, random effect also partialled .","code":""},{"path":"https://strengejacke.github.io/ggeffects/reference/plot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot ggeffects-objects — plot","text":"","code":"library(sjlabelled) #>  #> Attaching package: ‘sjlabelled’ #> The following object is masked from ‘package:ggplot2’: #>  #>     as_label #> The following objects are masked from ‘package:datawizard’: #>  #>     to_factor, to_numeric data(efc) efc$c172code <- as_label(efc$c172code) fit <- lm(barthtot ~ c12hour + neg_c_7 + c161sex + c172code, data = efc)  dat <- predict_response(fit, terms = \"c12hour\") plot(dat)   # \\donttest{ # facet by group, use pre-defined color palette dat <- predict_response(fit, terms = c(\"c12hour\", \"c172code\")) plot(dat, facet = TRUE, colors = \"hero\")   # don't use facets, b/w figure, w/o confidence bands dat <- predict_response(fit, terms = c(\"c12hour\", \"c172code\")) plot(dat, colors = \"bw\", show_ci = FALSE)   # factor at x axis, plot exact data points and error bars dat <- predict_response(fit, terms = c(\"c172code\", \"c161sex\")) plot(dat)   # for three variables, automatic facetting dat <- predict_response(fit, terms = c(\"c12hour\", \"c172code\", \"c161sex\")) plot(dat)  # }  # show color codes of specific palette ggeffects_palette(\"okabe-ito\") #> [1] \"#E69F00\" \"#56B4E9\" \"#009E73\" \"#CC79A7\" \"#F0E442\" \"#999999\" \"#000000\" #> [8] \"#0072B2\" \"#D55E00\"  # show all color palettes show_palettes()"},{"path":"https://strengejacke.github.io/ggeffects/reference/pool_comparisons.html","id":null,"dir":"Reference","previous_headings":"","what":"Pool contrasts and comparisons from test_predictions() — pool_comparisons","title":"Pool contrasts and comparisons from test_predictions() — pool_comparisons","text":"function \"pools\" (.e. combines) multiple ggcomparisons objects, returned test_predictions(), similar fashion mice::pool().","code":""},{"path":"https://strengejacke.github.io/ggeffects/reference/pool_comparisons.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pool contrasts and comparisons from test_predictions() — pool_comparisons","text":"","code":"pool_comparisons(x, ...)"},{"path":"https://strengejacke.github.io/ggeffects/reference/pool_comparisons.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pool contrasts and comparisons from test_predictions() — pool_comparisons","text":"x list ggcomparisons objects, returned test_predictions(). ... Currently used.","code":""},{"path":"https://strengejacke.github.io/ggeffects/reference/pool_comparisons.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pool contrasts and comparisons from test_predictions() — pool_comparisons","text":"data frame pooled comparisons contrasts predictions.","code":""},{"path":"https://strengejacke.github.io/ggeffects/reference/pool_comparisons.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Pool contrasts and comparisons from test_predictions() — pool_comparisons","text":"Averaging parameters follows Rubin's rules (Rubin, 1987, p. 76).","code":""},{"path":"https://strengejacke.github.io/ggeffects/reference/pool_comparisons.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Pool contrasts and comparisons from test_predictions() — pool_comparisons","text":"Rubin, D.B. (1987). Multiple Imputation Nonresponse Surveys. New York: John Wiley Sons.","code":""},{"path":"https://strengejacke.github.io/ggeffects/reference/pool_comparisons.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Pool contrasts and comparisons from test_predictions() — pool_comparisons","text":"","code":"data(\"nhanes2\", package = \"mice\") imp <- mice::mice(nhanes2, printFlag = FALSE) comparisons <- lapply(1:5, function(i) {   m <- lm(bmi ~ age + hyp + chl, data = mice::complete(imp, action = i))   test_predictions(m, \"age\") }) pool_comparisons(comparisons) #> # Pairwise comparisons #>  #> age         | Contrast |       95% CI |      p #> ---------------------------------------------- #> 20-39-40-59 |     5.84 |  1.47, 10.22 | < .001 #> 20-39-60-99 |     7.22 |  2.09, 12.34 | < .001 #> 40-59-60-99 |     1.37 | -2.79,  5.53 | 0.404"},{"path":"https://strengejacke.github.io/ggeffects/reference/pool_predictions.html","id":null,"dir":"Reference","previous_headings":"","what":"Pool Predictions or Estimated Marginal Means — pool_predictions","title":"Pool Predictions or Estimated Marginal Means — pool_predictions","text":"function \"pools\" (.e. combines) multiple ggeffects objects, similar fashion mice::pool().","code":""},{"path":"https://strengejacke.github.io/ggeffects/reference/pool_predictions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pool Predictions or Estimated Marginal Means — pool_predictions","text":"","code":"pool_predictions(x, ...)"},{"path":"https://strengejacke.github.io/ggeffects/reference/pool_predictions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pool Predictions or Estimated Marginal Means — pool_predictions","text":"x list ggeffects objects, returned predict_response(). ... Currently used.","code":""},{"path":"https://strengejacke.github.io/ggeffects/reference/pool_predictions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pool Predictions or Estimated Marginal Means — pool_predictions","text":"data frame pooled predictions.","code":""},{"path":"https://strengejacke.github.io/ggeffects/reference/pool_predictions.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Pool Predictions or Estimated Marginal Means — pool_predictions","text":"Averaging parameters follows Rubin's rules (Rubin, 1987, p. 76). Pooling applied predicted values scale linear predictor, response scale, order accurate pooled estimates standard errors. final pooled predicted values transformed response scale, using insight::link_inverse().","code":""},{"path":"https://strengejacke.github.io/ggeffects/reference/pool_predictions.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Pool Predictions or Estimated Marginal Means — pool_predictions","text":"Rubin, D.B. (1987). Multiple Imputation Nonresponse Surveys. New York: John Wiley Sons.","code":""},{"path":"https://strengejacke.github.io/ggeffects/reference/pool_predictions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Pool Predictions or Estimated Marginal Means — pool_predictions","text":"","code":"# example for multiple imputed datasets data(\"nhanes2\", package = \"mice\") imp <- mice::mice(nhanes2, printFlag = FALSE) predictions <- lapply(1:5, function(i) {   m <- lm(bmi ~ age + hyp + chl, data = mice::complete(imp, action = i))   predict_response(m, \"age\") }) pool_predictions(predictions) #> # Predicted values of bmi #>  #> age   | Predicted |       95% CI #> -------------------------------- #> 20-39 |     29.42 | 12.88, 45.96 #> 40-59 |     23.96 |  4.41, 43.52 #> 60-99 |     22.60 |  1.31, 43.90 #>  #> Adjusted for: #> * hyp =     no #> * chl = 194.64"},{"path":"https://strengejacke.github.io/ggeffects/reference/predict_response.html","id":null,"dir":"Reference","previous_headings":"","what":"Adjusted predictions and estimated marginal means from regression models — predict_response","title":"Adjusted predictions and estimated marginal means from regression models — predict_response","text":"fitting model, useful generate model-based estimates (expected values, adjusted predictions) response variable different combinations predictor values. estimates can used make inferences relationships variables. ggeffects package computes marginal means adjusted predicted values response, margin specific values levels certain model terms. package built around three core functions: predict_response() (understanding results), test_predictions() (importance results) plot() (communicate results). default, adjusted predictions marginal means returned response scale, easiest intuitive scale interpret results. options specific models well, e.g. zero-inflation component (see documentation type-argument). result returned structured data frame, nicely printed default. plot() can used easily create figures. main function calculate marginal means adjusted predictions predict_response(), returns adjusted predictions, marginal means averaged counterfactual predictions depending value margin-argument. previous versions ggeffects, functions ggpredict(), ggemmeans(), ggeffect() ggaverage() used calculate marginal means adjusted predictions. functions still available, predict_response() \"wrapper\" around functions preferred way calculate marginal means adjusted predictions now.","code":""},{"path":"https://strengejacke.github.io/ggeffects/reference/predict_response.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Adjusted predictions and estimated marginal means from regression models — predict_response","text":"","code":"predict_response(   model,   terms,   margin = \"mean_reference\",   ci_level = 0.95,   type = \"fixed\",   condition = NULL,   interval = \"confidence\",   back_transform = TRUE,   vcov = NULL,   vcov_args = NULL,   weights = NULL,   bias_correction = FALSE,   verbose = TRUE,   ... )"},{"path":"https://strengejacke.github.io/ggeffects/reference/predict_response.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Adjusted predictions and estimated marginal means from regression models — predict_response","text":"model model object. terms Names terms model, predictions displayed (called focal terms). Can : character vector, specifying names focal terms. preferred probably flexible way specify focal terms, e.g. terms = \"x [40:60]\", calculate predictions values 40 60. list, element named vector, specifying focal terms values. \"classical\" R way specify focal terms, e.g. list(x = 40:60). formula, e.g. terms = ~ x + z, internally converted character vector. probably least flexible way, specify representative values focal terms. data frame representing \"data grid\" \"reference grid\". Predictions made combinations variables data frame. terms least requires one variable name. maximum length four terms, second fourth term indicate groups, .e. predictions first term grouped meaningful values levels remaining terms (see values_at()). also possible define specific values focal terms, adjusted predictions calculated (see details ). remaining covariates specified terms \"marginalized\", see margin argument ?predict_response. See also argument condition fix non-focal terms specific values, argument typical ggpredict() ggemmeans(). margin Character string, indicating marginalize non-focal predictors, .e. variables specified terms. Possible values \"mean_reference\", \"mean_mode\", \"marginalmeans\" \"empirical\" (one aliases, \"counterfactual\" \"average\", aka average \"counterfactual\" predictions). can set default-option margin argument via options(), e.g. options(ggeffects_margin = \"empirical\"), specify preferred marginalization method time call predict_response(). See details documentation . ci_level Numeric, level confidence intervals. Use ci_level = NA confidence intervals calculated (instance, due computation time). Typically, confidence intervals based returned standard errors predictions, assuming t- normal distribution (based model available degrees freedom, .e. roughly +/- 1.96 * SE). See introduction vignette details. type Character, indicating whether predictions conditioned specific model components , whether population unit-level predictions desired. Consequently, options apply survival models, mixed effects models /models zero-inflation (Bayesian counter-parts); exception type = \"simulate\", available model classes well (respond simulate()). Note 1: brmsfit-models zero-inflation component, type = \"zero_inflated\" type = \"zi_random\"; predicted values models always condition zero-inflation part model. true MixMod-models GLMMadaptive zero-inflation component (see 'Details'). Note 2: margin = \"empirical\", calling ggaverage() respectively, (.e. counterfactual predictions), type argument handled differently. set \"response\" default, usually accepts possible options type-argument model's respective predict() method. E.g., passing glm object allow options \"response\", \"link\", \"terms\". models zero-inflation component, mentioned options \"fixed\", \"zero_inflated\" \"zi_prob\" can also used \"translated\" corresponding type option model's respective predict()-method. Note 3: margin = \"marginalmeans\", calling ggemmeans() respectively, type = \"random\" type = \"zi_random\" available, .e. unit-level predictions possible. \"fixed\" (\"count\") Predicted values conditioned fixed effects conditional model . mixed models, predicted values population-level, .e. re.form = NA calling predict(). models zero-inflation component, type return predicted mean count component (without conditioning zero-inflation part). \"random\" applies mixed models, type = \"random\" condition zero-inflation component model. Use unit-level predictions, .e. predicted values level random effects groups. Add name related random effect term terms-argument (details, see vignette). \"zero_inflated\" (\"zi\") Predicted values conditioned fixed effects zero-inflation component, returning expected value response (mu*(1-p)). mixed models zero-inflation component (e.g. package glmmTMB), return expected response mu*(1-p) population-level. See 'Details'. \"zi_random\" (\"zero_inflated_random\") applies mixed models. Predicted values conditioned fixed effects zero-inflation component. Use unit-level predictions, .e. predicted values level random effects groups. Add name related random effect term terms-argument (details, see vignette). \"zi_prob\" Returns predicted zero-inflation probability, .e. probability structural \"true\" zero (see vignette short introduction zero-inflation models). \"simulate\" Predicted values confidence resp. prediction intervals based simulations, .e. calls simulate(). type prediction takes model uncertainty account. Currently supported models objects class lm, glm, glmmTMB, wbm, MixMod merMod. Use nsim set number simulated draws (see ... details). \"survival\", \"cumulative_hazard\" \"quantile\" \"survival\" \"cumulative_hazard\" apply coxph-objects survial-package. options calculate survival probability cumulative hazard event. type = \"quantile\" applies survreg-objects package survival, returns predicted quantiles. option, p argument passed predict(), quantiles different probabilities can calculated, e.g. predict_response(..., type = \"quantile\", p = c(0.2, 0.5, 0.8)). margin = \"empirical\" (calling ggaverage()), type argument accepts values type-argument model's respective predict()-method. condition Named character vector, indicates covariates held constant specific values. Unlike typical, applies function covariates determine value used hold covariates constant, condition can used define exact values, instance condition = c(covariate1 = 20, covariate2 = 5). See 'Examples'. interval Type interval calculation, can either \"confidence\" (default) \"prediction\". May abbreviated. Unlike confidence intervals, prediction intervals include residual variance (sigma^2) account uncertainty predicted values. Note prediction intervals available models, models work insight::get_sigma(). Bayesian models, interval = \"confidence\", predictions based posterior draws linear predictor rstantools::posterior_epred(). interval = \"prediction\", rstantools::posterior_predict() called. back_transform Logical, TRUE (default), predicted values log-, log-log, exp, sqrt similar transformed responses back-transformed original response-scale. See insight::find_transformation() details. vcov Variance-covariance matrix used compute uncertainty estimates (e.g., confidence intervals based robust standard errors). argument accepts covariance matrix, function returns covariance matrix, string identifies function used compute covariance matrix. covariance matrix function returns covariance matrix (e.g., stats::vcov()) string indicates kind uncertainty estimates return. Heteroskedasticity-consistent: \"HC\", \"HC0\", \"HC1\", \"HC2\", \"HC3\", \"HC4\", \"HC4m\", \"HC5\". See ?sandwich::vcovHC Cluster-robust: \"vcovCR\", \"CR0\", \"CR1\", \"CR1p\", \"CR1S\", \"CR2\", \"CR3\". See ?clubSandwich::vcovCR. Bootstrap: \"BS\", \"xy\", \"fractional\", \"jackknife\", \"residual\", \"wild\", \"mammen\", \"norm\", \"webb\". See ?sandwich::vcovBS sandwich package functions: \"HAC\", \"PC\", \"CL\", \"PL\". NULL, standard errors (confidence intervals) predictions based standard errors returned predict()-function. Note probably model objects work predict_response() also supported sandwich clubSandwich packages. See details vignette. vcov_args List arguments passed function identified vcov argument. function typically supplied sandwich clubSandwich packages. Please refer documentation (e.g., ?sandwich::vcovHAC) see list available arguments. estimation type (argument type) given, default type \"HC\" equals default sandwich package; type \"CR\" default set \"CR3\". defaults, refer documentation sandwich clubSandwich package. weights argument used two different ways, depending margin argument. margin = \"empirical\" (calling ggaverag()), weights can either character vector, naming weigthing variable data, vector weights (length number observations data). variable used weight adjusted predictions. margin = \"marginalmeans\" (calling ggemmeans()), weights must character vector passed emmeans::emmeans(), specifying weights use averaging non-focal categorical predictors. Options \"equal\", \"proportional\", \"outer\", \"cells\", \"flat\", \"show.levels\". See ?emmeans::emmeans details. bias_correction Logical, TRUE, adjusts bias-correction back-transforming predicted values (response scale) non-Gaussian mixed models. Back-transforming population-level predictions ignores effect variation around population mean, result original data scale biased due Jensen's inequality. means, type = \"fixed\" (default) population level predictions returned, recommended set bias_correction = TRUE. apply bias-correction, valid value sigma required, extracted default using insight::get_variance_residual(). Optionally, provide estimates uncertainty, use sigma argument. Note bias_correction currently applies mixed models, additive random components involved bias-adjustment can appropriate. ggemmeans() called, bias-correction can also applied GEE-models. verbose Toggle messages warnings. ... margin set \"mean_reference\" \"mean_mode\", arguments passed ggpredict() (predict()); margin = \"marginalmeans\", arguments passed ggemmeans() thereby emmeans::emmeans(); margin = \"empirical\", arguments passed marginaleffects::avg_predictions(). type = \"simulate\", ... may also used set number simulation, e.g. nsim = 500. calling ggeffect(), arguments passed effects::Effect().","code":""},{"path":"https://strengejacke.github.io/ggeffects/reference/predict_response.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Adjusted predictions and estimated marginal means from regression models — predict_response","text":"data frame (ggeffects class attribute) consistent data columns: \"x\": values first term terms, used x-position plots. \"predicted\": predicted values response, used y-position plots. \"std.error\": standard error predictions. Note standard errors always link-scale, back-transformed non-Gaussian models! \"conf.low\": lower bound confidence interval predicted values. \"conf.high\": upper bound confidence interval predicted values. \"group\": grouping level second term terms, used grouping-aesthetics plots. \"facet\": grouping level third term terms, used indicate facets plots. estimated marginal means (predicted values) always response scale! proportional odds logistic regression (see ?MASS::polr) resp. cumulative link models (e.g., see ?ordinal::clm), additional column \"response.level\" returned, indicates grouping predictions based level model's response. Note convenience reasons, columns intervals always named \"conf.low\" \"conf.high\", even though Bayesian models credible highest posterior density intervals returned. .data.frame() method objects class ggeffects, terms_to_colnames argument, use term names column names instead standardized names \"x\" etc.","code":""},{"path":"https://strengejacke.github.io/ggeffects/reference/predict_response.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Adjusted predictions and estimated marginal means from regression models — predict_response","text":"Printing Results print() method gives clean output (especially predictions groups), indicates values covariates held constant. Furthermore, print() method several arguments customize output. See vignette details. Limitations support models, example package MCMCglmm, fully tested may fail certain models. encounter errors, please file issue Github.","code":""},{"path":"https://strengejacke.github.io/ggeffects/reference/predict_response.html","id":"supported-models","dir":"Reference","previous_headings":"","what":"Supported Models","title":"Adjusted predictions and estimated marginal means from regression models — predict_response","text":"list supported models can found package website. Support models varies marginalization method (margin argument), .e. although predict_response() supports models, models supported exclusively one four downstream functions (ggpredict(), ggemmeans(), ggeffect() ggaverage()). means models work every margin option predict_response().","code":""},{"path":"https://strengejacke.github.io/ggeffects/reference/predict_response.html","id":"holding-covariates-at-constant-values-or-how-to-marginalize-over-the-non-focal-predictors","dir":"Reference","previous_headings":"","what":"Holding covariates at constant values, or how to marginalize over the non-focal predictors","title":"Adjusted predictions and estimated marginal means from regression models — predict_response","text":"predict_response() wrapper around ggpredict(), ggemmeans() ggaverage(). Depending value margin argument, predict_response() calls one functions. margin argument indicates marginalize non-focal predictors, .e. variables specified terms. Possible values : \"mean_reference\" \"mean_mode\": \"mean_reference\", non-focal predictors set mean (numeric variables), reference level (factors), \"common\" value (mode) case character vectors. \"mean_mode\", non-focal predictors set mean (numeric variables) mode (factors, \"common\" value case character vectors). predictons represent rather \"theoretical\" view data, necessarily exactly reflect characteristics sample. helps answer question, \"predicted (: expected) value response meaningful values levels focal terms 'typical' observation data?\", 'typical' refers certain characteristics remaining predictors. \"marginalmeans\": non-focal predictors set mean (numeric variables) averaged levels \"values\" factors character vectors. Averaging factor levels non-focal terms computes kind \"weighted average\" values terms hold constant. Thus, non-focal categorical terms conditioned \"weighted averages\" levels. different weighting options can altered using weights argument. predictions come closer sample, possible values levels non-focal predictors taken account. answer question, \"predicted (: expected) value response meaningful values levels focal terms 'average' observation data?\". refers randomly picking subject sample result get average. \"empirical\" (\"counterfactual\" \"average\"): non-focal predictors averaged observations sample. response predicted subject data predicted values averaged across subjects, aggregated/grouped focal terms. particular, averaging applied counterfactual predictions (Dickerman Hernan 2020). detailed description vignette. Counterfactual predictions useful, insofar results can also transferred contexts. answers question, \"predicted (: expected) value response meaningful values levels focal terms 'average' observation population?\". refer actual data sample, also \"\" data, data different population. \"counterfactual\" refers . can set default-option margin argument via options(), e.g. options(ggeffects_margin = \"empirical\"), specify \"default\" marginalization method time call predict_response(). Use options(ggeffects_margin = NULL) remove setting. condition argument can used fix non-focal terms specific values.","code":""},{"path":"https://strengejacke.github.io/ggeffects/reference/predict_response.html","id":"marginal-means-and-adjusted-predictions-at-specific-values","dir":"Reference","previous_headings":"","what":"Marginal Means and Adjusted Predictions at Specific Values","title":"Adjusted predictions and estimated marginal means from regression models — predict_response","text":"Meaningful values focal terms can specified via terms argument. Specifying meaningful representative values string pattern preferred way ggeffects package. However, also possible use list() focal terms prefer \"classical\" R way. terms can also data (reference) grid provided data frame. options described vignette. Indicating levels square brackets allows selecting certain groups values resp. value ranges. term name start levels brackets must separated whitespace character, e.g. terms = c(\"age\", \"education [1,3]\"). Numeric ranges, separated colon, also allowed: terms = c(\"education\", \"age [30:60]\"). stepsize ranges can adjusted using , e.g. terms = \"age [30:60 =5]\". terms argument also supports shortcuts values argument values_at(). terms = \"age [meansd]\" return predictions values one standard deviation mean age, mean age one SD mean age. terms = \"age [quart2]\" calculate predictions value lower, median upper quartile age. Furthermore, possible specify function name. Values predictions transformed, e.g. terms = \"income [exp]\". useful model predictors transformed fitting model back-transformed original scale predictions. also possible define functions (see vignette). Instead function, also possible define name variable specific values, e.g. define vector v = c(1000, 2000, 3000) use terms = \"income [v]\". can take random sample size sample=n, e.g terms = \"income [sample=8]\", sample eight values possible values variable income. option especially useful plotting predictions certain levels random effects group levels, group factor many levels completely plotted. details, see vignette. Finally, numeric vectors specific values given, \"pretty range\" calculated (see pretty_range()), avoid memory allocation problems vectors many unique values. numeric vector specified second third term (.e. focal term used \"stratification\"), representative values (see values_at()) chosen (unless values specified), typically mean value, well one standard deviation mean. values numeric vector used compute predictions, may use e.g. terms = \"age []\". See also package vignettes. create pretty range smaller larger default range (.e. specific values given), use n tag, e.g. terms=\"age [n=5]\" terms=\"age [n=12]\". Larger values n return larger range predicted values.","code":""},{"path":"https://strengejacke.github.io/ggeffects/reference/predict_response.html","id":"bayesian-regression-models","dir":"Reference","previous_headings":"","what":"Bayesian Regression Models","title":"Adjusted predictions and estimated marginal means from regression models — predict_response","text":"predict_response() also works Stan-models rstanarm brms-packages. predicted values median value drawn posterior samples. Standard errors median absolute deviation posterior samples. confidence intervals Stan-models Bayesian predictive intervals. default, predictions based rstantools::posterior_epred() hence limitations uncertainty error term (residual variance) taken account. recommendation use posterior predictive distribution (rstantools::posterior_predict()), .e. setting interval = \"prediction\".","code":""},{"path":"https://strengejacke.github.io/ggeffects/reference/predict_response.html","id":"mixed-multilevel-models","dir":"Reference","previous_headings":"","what":"Mixed (multilevel) Models","title":"Adjusted predictions and estimated marginal means from regression models — predict_response","text":"mixed models, following options possible: Predictions can made population-level (type = \"fixed\", default) level grouping variable (unit-level). unit-level predictions requested, need set type = \"random\"`` specify grouping variable(s) terms` argument. Population-level predictions can either conditional (predictions \"typical\" group) marginal (average predictions across groups). default predict_response() calculated conditional predictions. Set margin = \"empirical\" marginal predictions. Prediction intervals, .e. interval = \"predictions\" also account uncertainty random effects. See details vignette.","code":""},{"path":"https://strengejacke.github.io/ggeffects/reference/predict_response.html","id":"zero-inflated-and-zero-inflated-mixed-models-with-brms","dir":"Reference","previous_headings":"","what":"Zero-Inflated and Zero-Inflated Mixed Models with brms","title":"Adjusted predictions and estimated marginal means from regression models — predict_response","text":"Models class brmsfit always condition zero-inflation component, model component. Hence, type = \"zero_inflated\" type = \"zi_random\" brmsfit-models, predictions based draws posterior distribution, already account zero-inflation part model. Zero-Inflated Zero-Inflated Mixed Models glmmTMB model class glmmTMB, hurdle, zeroinfl zerotrunc, margin set \"empirical,  simulations multivariate normal distribution (see ?MASS::mvrnorm) drawn calculate mu*(1-p). Confidence intervals based quantiles results. type = \"zi_random\", prediction intervals also take uncertainty random-effect paramters account (see also Brooks et al. 2017, pp.391-392 details). alternative models fitted glmmTMB take model uncertainties account simulations based simulate(), used type = \"simulate\" (see Brooks et al. 2017, pp.392-393 details). Finally, margin = \"empirical\", returned predictions already conditioned zero-inflation part (possible random effects) model, thus comparable type = \"simulate\" option. words, model components taken account predictions, consider using margin = \"empirical\".","code":""},{"path":"https://strengejacke.github.io/ggeffects/reference/predict_response.html","id":"mixmod-models-from-glmmadaptive","dir":"Reference","previous_headings":"","what":"MixMod-models from GLMMadaptive","title":"Adjusted predictions and estimated marginal means from regression models — predict_response","text":"Predicted values fixed effects component (type = \"fixed\" type = \"zero_inflated\") based predict(..., type = \"mean_subject\"), predicted values random effects components (type = \"random\" type = \"zi_random\") calculated predict(..., type = \"subject_specific\") (see ?GLMMadaptive::predict.MixMod details). latter option requires response variable defined newdata-argument predict(), set typical value (see values_at()).","code":""},{"path":"https://strengejacke.github.io/ggeffects/reference/predict_response.html","id":"multinomial-models","dir":"Reference","previous_headings":"","what":"Multinomial Models","title":"Adjusted predictions and estimated marginal means from regression models — predict_response","text":"polr, clm models, generally speaking, models ordinal multinominal outcomes, additional column response.level, indicates level response variable predicted values associated.","code":""},{"path":"https://strengejacke.github.io/ggeffects/reference/predict_response.html","id":"averaged-model-predictions-package-mumin-","dir":"Reference","previous_headings":"","what":"Averaged model predictions (package MuMIn)","title":"Adjusted predictions and estimated marginal means from regression models — predict_response","text":"averaged model predictions, .e. input model object class \"averaging\" (MuMIn::model.avg()), predictions made full averaged coefficients.","code":""},{"path":"https://strengejacke.github.io/ggeffects/reference/predict_response.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Adjusted predictions and estimated marginal means from regression models — predict_response","text":"Brooks , Kristensen K, Benthem KJ van, Magnusson , Berg CW, Nielsen , et al. glmmTMB Balances Speed Flexibility Among Packages Zero-inflated Generalized Linear Mixed Modeling. R Journal. 2017;9: 378-400. Johnson PC. 2014. Extension Nakagawa & Schielzeth's R2GLMM random slopes models. Methods Ecol Evol, 5: 944-946. Dickerman BA, Hernan, MA. Counterfactual prediction causal inference. Eur J Epidemiol 35, 615–617 (2020).","code":""},{"path":"https://strengejacke.github.io/ggeffects/reference/predict_response.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Adjusted predictions and estimated marginal means from regression models — predict_response","text":"","code":"library(sjlabelled) data(efc) fit <- lm(barthtot ~ c12hour + neg_c_7 + c161sex + c172code, data = efc)  predict_response(fit, terms = \"c12hour\") #> # Predicted values of Total score BARTHEL INDEX #>  #> c12hour | Predicted |       95% CI #> ---------------------------------- #>       0 |     75.44 | 73.25, 77.63 #>      20 |     70.38 | 68.56, 72.19 #>      45 |     64.05 | 62.39, 65.70 #>      65 |     58.98 | 57.15, 60.80 #>      85 |     53.91 | 51.71, 56.12 #>     105 |     48.85 | 46.14, 51.55 #>     125 |     43.78 | 40.51, 47.05 #>     170 |     32.38 | 27.73, 37.04 #>  #> Adjusted for: #> *  neg_c_7 = 11.84 #> *  c161sex =  1.76 #> * c172code =  1.97 #>  #> Not all rows are shown in the output. Use `print(..., n = Inf)` to show #>   all rows. predict_response(fit, terms = c(\"c12hour\", \"c172code\")) #> # Predicted values of Total score BARTHEL INDEX #>  #> c172code: low level of education #>  #> c12hour | Predicted |       95% CI #> ---------------------------------- #>       0 |     74.75 | 71.26, 78.23 #>      30 |     67.15 | 64.03, 70.26 #>      55 |     60.81 | 57.77, 63.86 #>      85 |     53.22 | 49.95, 56.48 #>     115 |     45.62 | 41.86, 49.37 #>     170 |     31.69 | 26.59, 36.78 #>  #> c172code: intermediate level of education #>  #> c12hour | Predicted |       95% CI #> ---------------------------------- #>       0 |     75.46 | 73.28, 77.65 #>      30 |     67.87 | 66.16, 69.57 #>      55 |     61.53 | 59.82, 63.25 #>      85 |     53.93 | 51.72, 56.14 #>     115 |     46.34 | 43.35, 49.32 #>     170 |     32.40 | 27.74, 37.07 #>  #> c172code: high level of education #>  #> c12hour | Predicted |       95% CI #> ---------------------------------- #>       0 |     76.18 | 72.81, 79.55 #>      30 |     68.58 | 65.41, 71.76 #>      55 |     62.25 | 59.00, 65.50 #>      85 |     54.65 | 51.03, 58.27 #>     115 |     47.05 | 42.85, 51.26 #>     170 |     33.12 | 27.50, 38.74 #>  #> Adjusted for: #> * neg_c_7 = 11.84 #> * c161sex =  1.76 #>  #> Not all rows are shown in the output. Use `print(..., n = Inf)` to show #>   all rows. # more compact table layout for printing out <- predict_response(fit, terms = c(\"c12hour\", \"c172code\", \"c161sex\")) print(out, collapse_table = TRUE) #> # Predicted values of Total score BARTHEL INDEX #>  #> c12hour |                        c172code |    c161sex | Predicted |       95% CI #> --------------------------------------------------------------------------------- #>       0 |          low level of education |   [1] Male |     73.95 | 69.35, 78.56 #>      45 |                                 |            |     62.56 | 58.22, 66.89 #>      85 |                                 |            |     52.42 | 47.89, 56.96 #>     170 |                                 |            |     30.89 | 24.84, 36.95 #>       0 |                                 | [2] Female |     75.00 | 71.40, 78.59 #>      45 |                                 |            |     63.60 | 60.45, 66.74 #>      85 |                                 |            |     53.46 | 50.12, 56.80 #>     170 |                                 |            |     31.93 | 26.82, 37.05 #>       0 | intermediate level of education |   [1] Male |     74.67 | 71.05, 78.29 #>      45 |                                 |            |     63.27 | 59.88, 66.67 #>      85 |                                 |            |     53.14 | 49.39, 56.89 #>     170 |                                 |            |     31.61 | 25.97, 37.25 #>       0 |                                 | [2] Female |     75.71 | 73.31, 78.12 #>      45 |                                 |            |     64.32 | 62.41, 66.22 #>      85 |                                 |            |     54.18 | 51.81, 56.56 #>     170 |                                 |            |     32.65 | 27.94, 37.37 #>       0 |         high level of education |   [1] Male |     75.39 | 71.03, 79.75 #>      45 |                                 |            |     63.99 | 59.72, 68.26 #>      85 |                                 |            |     53.86 | 49.22, 58.50 #>     170 |                                 |            |     32.33 | 25.94, 38.72 #>       0 |                                 | [2] Female |     76.43 | 72.88, 79.98 #>      45 |                                 |            |     65.03 | 61.67, 68.39 #>      85 |                                 |            |     54.90 | 51.15, 58.65 #>     170 |                                 |            |     33.37 | 27.69, 39.05 #>  #> Adjusted for: #> * neg_c_7 = 11.84 #>  #> Not all rows are shown in the output. Use `print(..., n = Inf)` to show #>   all rows.  # specified as formula predict_response(fit, terms = ~ c12hour + c172code + c161sex) #> # Predicted values of Total score BARTHEL INDEX #>  #> c172code: low level of education #> c161sex: [1] Male #>  #> c12hour | Predicted |       95% CI #> ---------------------------------- #>       0 |     73.95 | 69.35, 78.56 #>      45 |     62.56 | 58.22, 66.89 #>      85 |     52.42 | 47.89, 56.96 #>     170 |     30.89 | 24.84, 36.95 #>  #> c172code: low level of education #> c161sex: [2] Female #>  #> c12hour | Predicted |       95% CI #> ---------------------------------- #>       0 |     75.00 | 71.40, 78.59 #>      45 |     63.60 | 60.45, 66.74 #>      85 |     53.46 | 50.12, 56.80 #>     170 |     31.93 | 26.82, 37.05 #>  #> c172code: intermediate level of education #> c161sex: [1] Male #>  #> c12hour | Predicted |       95% CI #> ---------------------------------- #>       0 |     74.67 | 71.05, 78.29 #>      45 |     63.27 | 59.88, 66.67 #>      85 |     53.14 | 49.39, 56.89 #>     170 |     31.61 | 25.97, 37.25 #>  #> c172code: intermediate level of education #> c161sex: [2] Female #>  #> c12hour | Predicted |       95% CI #> ---------------------------------- #>       0 |     75.71 | 73.31, 78.12 #>      45 |     64.32 | 62.41, 66.22 #>      85 |     54.18 | 51.81, 56.56 #>     170 |     32.65 | 27.94, 37.37 #>  #> c172code: high level of education #> c161sex: [1] Male #>  #> c12hour | Predicted |       95% CI #> ---------------------------------- #>       0 |     75.39 | 71.03, 79.75 #>      45 |     63.99 | 59.72, 68.26 #>      85 |     53.86 | 49.22, 58.50 #>     170 |     32.33 | 25.94, 38.72 #>  #> c172code: high level of education #> c161sex: [2] Female #>  #> c12hour | Predicted |       95% CI #> ---------------------------------- #>       0 |     76.43 | 72.88, 79.98 #>      45 |     65.03 | 61.67, 68.39 #>      85 |     54.90 | 51.15, 58.65 #>     170 |     33.37 | 27.69, 39.05 #>  #> Adjusted for: #> * neg_c_7 = 11.84 #>  #> Not all rows are shown in the output. Use `print(..., n = Inf)` to show #>   all rows.  # only range of 40 to 60 for variable 'c12hour' predict_response(fit, terms = \"c12hour [40:60]\") #> # Predicted values of Total score BARTHEL INDEX #>  #> c12hour | Predicted |       95% CI #> ---------------------------------- #>      40 |     65.31 | 63.66, 66.96 #>      43 |     64.55 | 62.90, 66.20 #>      45 |     64.05 | 62.39, 65.70 #>      47 |     63.54 | 61.88, 65.20 #>      50 |     62.78 | 61.11, 64.45 #>      53 |     62.02 | 60.33, 63.71 #>      55 |     61.51 | 59.80, 63.22 #>      60 |     60.25 | 58.49, 62.01 #>  #> Adjusted for: #> *  neg_c_7 = 11.84 #> *  c161sex =  1.76 #> * c172code =  1.97 #>  #> Not all rows are shown in the output. Use `print(..., n = Inf)` to show #>   all rows.  # terms as named list predict_response(fit, terms = list(c12hour = 40:60)) #> # Predicted values of Total score BARTHEL INDEX #>  #> c12hour | Predicted |       95% CI #> ---------------------------------- #>      40 |     65.31 | 63.66, 66.96 #>      43 |     64.55 | 62.90, 66.20 #>      45 |     64.05 | 62.39, 65.70 #>      47 |     63.54 | 61.88, 65.20 #>      50 |     62.78 | 61.11, 64.45 #>      53 |     62.02 | 60.33, 63.71 #>      55 |     61.51 | 59.80, 63.22 #>      60 |     60.25 | 58.49, 62.01 #>  #> Adjusted for: #> *  neg_c_7 = 11.84 #> *  c161sex =  1.76 #> * c172code =  1.97 #>  #> Not all rows are shown in the output. Use `print(..., n = Inf)` to show #>   all rows.  # covariate \"neg_c_7\" is held constant at a value of 11.84 (its mean value). # To use a different value, use \"condition\" predict_response(fit, terms = \"c12hour [40:60]\", condition = c(neg_c_7 = 20)) #> # Predicted values of Total score BARTHEL INDEX #>  #> c12hour | Predicted |       95% CI #> ---------------------------------- #>      40 |     46.56 | 42.58, 50.55 #>      43 |     45.80 | 41.84, 49.76 #>      45 |     45.30 | 41.35, 49.24 #>      47 |     44.79 | 40.86, 48.72 #>      50 |     44.03 | 40.11, 47.94 #>      53 |     43.27 | 39.37, 47.17 #>      55 |     42.76 | 38.87, 46.65 #>      60 |     41.50 | 37.62, 45.37 #>  #> Adjusted for: #> *  c161sex = 1.76 #> * c172code = 1.97 #>  #> Not all rows are shown in the output. Use `print(..., n = Inf)` to show #>   all rows.  # to plot ggeffects-objects, you can use the 'plot()'-function. # the following examples show how to build your ggplot by hand.  # \\donttest{ # plot predicted values, remaining covariates held constant library(ggplot2) mydf <- predict_response(fit, terms = \"c12hour\") ggplot(mydf, aes(x, predicted)) +   geom_line() +   geom_ribbon(aes(ymin = conf.low, ymax = conf.high), alpha = 0.1)   # three variables, so we can use facets and groups mydf <- predict_response(fit, terms = c(\"c12hour\", \"c161sex\", \"c172code\")) ggplot(mydf, aes(x = x, y = predicted, colour = group)) +   stat_smooth(method = \"lm\", se = FALSE) +   facet_wrap(~facet, ncol = 2) #> `geom_smooth()` using formula = 'y ~ x'   # select specific levels for grouping terms mydf <- predict_response(fit, terms = c(\"c12hour\", \"c172code [1,3]\", \"c161sex\")) ggplot(mydf, aes(x = x, y = predicted, colour = group)) +   stat_smooth(method = \"lm\", se = FALSE) +   facet_wrap(~facet) +   labs(     y = get_y_title(mydf),     x = get_x_title(mydf),     colour = get_legend_title(mydf)   ) #> `geom_smooth()` using formula = 'y ~ x'   # level indication also works for factors with non-numeric levels # and in combination with numeric levels for other variables data(efc) efc$c172code <- sjlabelled::as_label(efc$c172code) fit <- lm(barthtot ~ c12hour + neg_c_7 + c161sex + c172code, data = efc) predict_response(fit, terms = c(   \"c12hour\",   \"c172code [low level of education, high level of education]\",   \"c161sex [1]\" )) #> # Predicted values of Total score BARTHEL INDEX #>  #> c172code: low level of education #>  #> c12hour | Predicted |       95% CI #> ---------------------------------- #>       0 |     72.81 | 67.90, 77.72 #>      30 |     65.22 | 60.53, 69.90 #>      55 |     58.89 | 54.22, 63.55 #>      85 |     51.29 | 46.45, 56.13 #>     115 |     43.69 | 38.48, 48.90 #>     170 |     29.76 | 23.48, 36.05 #>  #> c172code: high level of education #>  #> c12hour | Predicted |       95% CI #> ---------------------------------- #>       0 |     74.03 | 69.23, 78.83 #>      30 |     66.43 | 61.74, 71.13 #>      55 |     60.10 | 55.33, 64.88 #>      85 |     52.51 | 47.45, 57.56 #>     115 |     44.91 | 39.39, 50.43 #>     170 |     30.98 | 24.28, 37.68 #>  #> Adjusted for: #> * neg_c_7 = 11.84 #>  #> Not all rows are shown in the output. Use `print(..., n = Inf)` to show #>   all rows.  # when \"terms\" is a named list predict_response(fit, terms = list(   c12hour = seq(0, 170, 30),   c172code = c(\"low level of education\", \"high level of education\"),   c161sex = 1 )) #> # Predicted values of Total score BARTHEL INDEX #>  #> c172code: low level of education #>  #> c12hour | Predicted |       95% CI #> ---------------------------------- #>       0 |     72.81 | 67.90, 77.72 #>      30 |     65.22 | 60.53, 69.90 #>      60 |     57.62 | 52.94, 62.29 #>      90 |     50.02 | 45.14, 54.91 #>     120 |     42.43 | 37.14, 47.72 #>     150 |     34.83 | 28.98, 40.67 #>  #> c172code: high level of education #>  #> c12hour | Predicted |       95% CI #> ---------------------------------- #>       0 |     74.03 | 69.23, 78.83 #>      30 |     66.43 | 61.74, 71.13 #>      60 |     58.84 | 54.03, 63.64 #>      90 |     51.24 | 46.11, 56.36 #>     120 |     43.64 | 38.03, 49.26 #>     150 |     36.05 | 29.82, 42.28 #>  #> Adjusted for: #> * neg_c_7 = 11.84  # use categorical value on x-axis, use axis-labels, add error bars dat <- predict_response(fit, terms = c(\"c172code\", \"c161sex\")) ggplot(dat, aes(x, predicted, colour = group)) +   geom_point(position = position_dodge(0.1)) +   geom_errorbar(     aes(ymin = conf.low, ymax = conf.high),     position = position_dodge(0.1)   ) +   scale_x_discrete(breaks = 1:3, labels = get_x_labels(dat))   # 3-way-interaction with 2 continuous variables data(efc) # make categorical efc$c161sex <- as_factor(efc$c161sex) fit <- lm(neg_c_7 ~ c12hour * barthtot * c161sex, data = efc) # select only levels 30, 50 and 70 from continuous variable Barthel-Index dat <- predict_response(fit, terms = c(\"c12hour\", \"barthtot [30,50,70]\", \"c161sex\")) ggplot(dat, aes(x = x, y = predicted, colour = group)) +   stat_smooth(method = \"lm\", se = FALSE, fullrange = TRUE) +   facet_wrap(~facet) +   labs(     colour = get_legend_title(dat),     x = get_x_title(dat),     y = get_y_title(dat),     title = get_title(dat)   ) #> `geom_smooth()` using formula = 'y ~ x'   # or with ggeffects' plot-method plot(dat, show_ci = FALSE)  # }  # predictions for polynomial terms data(efc) fit <- glm(   tot_sc_e ~ c12hour + e42dep + e17age + I(e17age^2) + I(e17age^3),   data = efc,   family = poisson() ) predict_response(fit, terms = \"e17age\") #> # Predicted counts of Services for elderly #>  #> e17age | Predicted |     95% CI #> ------------------------------- #>     65 |      1.25 | 1.00, 1.55 #>     69 |      0.97 | 0.87, 1.09 #>     74 |      0.90 | 0.80, 1.01 #>     78 |      0.94 | 0.85, 1.04 #>     82 |      1.01 | 0.92, 1.11 #>     87 |      1.06 | 0.94, 1.18 #>     91 |      0.97 | 0.84, 1.12 #>    103 |      0.22 | 0.07, 0.72 #>  #> Adjusted for: #> * c12hour = 42.29 #> *  e42dep =  2.94 #>  #> Not all rows are shown in the output. Use `print(..., n = Inf)` to show #>   all rows."},{"path":"https://strengejacke.github.io/ggeffects/reference/pretty_range.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a pretty sequence over a range of a vector — pretty_range","title":"Create a pretty sequence over a range of a vector — pretty_range","text":"Creates evenly spaced, pretty sequence numbers range vector.","code":""},{"path":"https://strengejacke.github.io/ggeffects/reference/pretty_range.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a pretty sequence over a range of a vector — pretty_range","text":"","code":"pretty_range(x, n = NULL, length = NULL)"},{"path":"https://strengejacke.github.io/ggeffects/reference/pretty_range.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a pretty sequence over a range of a vector — pretty_range","text":"x numeric vector. n Numeric value, indicating size many values used create pretty sequence. x large value range (> 100), n something 1 5. x rather small amount unique values, n something 10 20. n = NULL, pretty_range() automatically tries find pretty sequence. length Integer value, alternative n, defines number intervals returned.","code":""},{"path":"https://strengejacke.github.io/ggeffects/reference/pretty_range.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a pretty sequence over a range of a vector — pretty_range","text":"numeric vector range corresponding minimum maximum values x. x missing, function, pre-programmed n length returned. See examples.","code":""},{"path":"https://strengejacke.github.io/ggeffects/reference/pretty_range.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a pretty sequence over a range of a vector — pretty_range","text":"","code":"data(iris) # pretty range for vectors with decimal points pretty_range(iris$Petal.Length) #>  [1] 1.0 1.5 2.0 2.5 3.0 3.5 4.0 4.5 5.0 5.5 6.0 6.5 7.0  # pretty range for large range, increasing by 50 pretty_range(1:1000) #>  [1]    0   50  100  150  200  250  300  350  400  450  500  550  600  650  700 #> [16]  750  800  850  900  950 1000  # increasing by 20 pretty_range(1:1000, n = 7) #>  [1]    0   20   40   60   80  100  120  140  160  180  200  220  240  260  280 #> [16]  300  320  340  360  380  400  420  440  460  480  500  520  540  560  580 #> [31]  600  620  640  660  680  700  720  740  760  780  800  820  840  860  880 #> [46]  900  920  940  960  980 1000  # return 10 intervals pretty_range(1:1000, length = 10) #>  [1]    0  100  200  300  400  500  600  700  800  900 1000  # same result pretty_range(1:1000, n = 2.5) #>  [1]    0  100  200  300  400  500  600  700  800  900 1000  # function factory range_n_5 <- pretty_range(n = 5) range_n_5(1:1000) #>  [1]    0   50  100  150  200  250  300  350  400  450  500  550  600  650  700 #> [16]  750  800  850  900  950 1000"},{"path":"https://strengejacke.github.io/ggeffects/reference/print.html","id":null,"dir":"Reference","previous_headings":"","what":"Print and format ggeffects-objects — format.ggeffects","title":"Print and format ggeffects-objects — format.ggeffects","text":"generic print-method ggeffects-objects.","code":""},{"path":"https://strengejacke.github.io/ggeffects/reference/print.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print and format ggeffects-objects — format.ggeffects","text":"","code":"# S3 method for class 'ggeffects' format(   x,   variable_labels = FALSE,   value_labels = FALSE,   group_name = FALSE,   row_header_separator = \", \",   digits = 2,   collapse_ci = FALSE,   collapse_tables = FALSE,   n,   ... )  # S3 method for class 'ggcomparisons' format(x, collapse_ci = FALSE, collapse_p = FALSE, combine_levels = FALSE, ...)  # S3 method for class 'ggeffects' print(x, group_name = TRUE, digits = 2, verbose = TRUE, ...)  # S3 method for class 'ggeffects' print_md(x, group_name = TRUE, digits = 2, ...)  # S3 method for class 'ggeffects' print_html(   x,   group_name = TRUE,   digits = 2,   theme = NULL,   engine = c(\"tt\", \"gt\"),   ... )  # S3 method for class 'ggcomparisons' print(x, collapse_tables = FALSE, ...)  # S3 method for class 'ggcomparisons' print_html(   x,   collapse_ci = FALSE,   collapse_p = FALSE,   theme = NULL,   engine = c(\"tt\", \"gt\"),   ... )  # S3 method for class 'ggcomparisons' print_md(x, collapse_ci = FALSE, collapse_p = FALSE, theme = NULL, ...)"},{"path":"https://strengejacke.github.io/ggeffects/reference/print.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print and format ggeffects-objects — format.ggeffects","text":"x object class ggeffects, returned functions package. variable_labels Logical, TRUE variable labels used column headers. FALSE, variable names used. value_labels Logical, TRUE, value labels used values table output. FALSE, numeric values factor levels used. group_name Logical, TRUE, name focal terms used sub-headings table. FALSE, values focal terms used. row_header_separator Character, separator different subgroups table output. digits Number digits print. collapse_ci Logical, TRUE, columns predicted values confidence intervals collapsed one column, e.g. Predicted (95% CI). collapse_tables Logical, TRUE, tables combined one. tables split focal terms, rather added columns. works one focal term. n Number rows print per subgroup. NULL, default number rows printed, depending number subgroups. ... arguments passed format.ggeffects(), also passed insight::format_table() insight::format_value(). collapse_p Logical, TRUE, columns predicted values p-values collapsed one column, significant p-values indicated asterisks. combine_levels Logical, TRUE, levels first comparison focal term second combined one column. useful comparing multiple focal terms, e.g. education = low-high gender = male-female combined first = low-male second = high-female. verbose Toggle messages. theme theme apply table. One \"grid\", \"striped\", \"bootstrap\", \"darklines\". engine engine use printing. One \"tt\" (default) \"gt\". \"tt\" uses tinytable package, \"gt\" uses gt package.","code":""},{"path":"https://strengejacke.github.io/ggeffects/reference/print.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print and format ggeffects-objects — format.ggeffects","text":"format() return formatted data frame, print() prints formatted data frame console. print_html() returns tinytable object default (unless changed engine = \"gt\"), printed HTML, markdown LaTeX table (depending context print_html() called, see tinytable::tt() details).","code":""},{"path":"https://strengejacke.github.io/ggeffects/reference/print.html","id":"global-options-to-customize-tables-when-printing","dir":"Reference","previous_headings":"","what":"Global Options to Customize Tables when Printing","title":"Print and format ggeffects-objects — format.ggeffects","text":"verbose argument can used display silence messages warnings. Furthermore, options() can used set defaults print() print_html() method. following options available, can simply run console: ggeffects_ci_brackets: Define character vector length two, indicating opening closing parentheses encompass confidence intervals values, e.g. options(ggeffects_ci_brackets = c(\"[\", \"]\")). ggeffects_collapse_ci: Logical, TRUE, columns predicted values (contrasts) confidence intervals collapsed one column, e.g. options(ggeffects_collapse_ci = TRUE). ggeffects_collapse_p: Logical, TRUE, columns predicted values (contrasts) p-values collapsed one column, e.g. options(ggeffects_collapse_p = TRUE). Note p-values replaced asterisk-symbols (stars) empty strings ggeffects_collapse_p = TRUE, depending significance level. ggeffects_collapse_tables: Logical, TRUE, multiple tables subgroups combined one table. works one focal term, e.g. options(ggeffects_collapse_tables = TRUE). ggeffects_output_format: String, either \"text\", \"markdown\" \"html\". Defines default output format predict_response(). \"html\", formatted HTML table created printed view pane. \"markdown\" creates markdown-formatted table inside Rmarkdown documents, prints text-format table console used interactively. \"text\" NULL, formatted table printed console, e.g. options(ggeffects_output_format = \"html\"). ggeffects_html_engine: String, either \"tt\" \"gt\". Defines default engine use printing HTML tables. \"tt\", tinytable package used, \"gt\", gt package used, e.g. options(ggeffects_html_engine = \"gt\"). Use options(<option_name> = NULL) remove option.","code":""},{"path":"https://strengejacke.github.io/ggeffects/reference/print.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print and format ggeffects-objects — format.ggeffects","text":"","code":"data(efc, package = \"ggeffects\") fit <- lm(barthtot ~ c12hour + e42dep, data = efc)  # default print predict_response(fit, \"e42dep\") #> # Predicted values of Total score BARTHEL INDEX #>  #> e42dep | Predicted |         95% CI #> ----------------------------------- #>      1 |    104.42 | 101.21, 107.64 #>      2 |     83.81 |  81.91,  85.72 #>      3 |     63.20 |  61.94,  64.47 #>      4 |     42.59 |  40.54,  44.65 #>  #> Adjusted for: #> * c12hour = 42.25  # surround CI values with parentheses print(predict_response(fit, \"e42dep\"), ci_brackets = c(\"(\", \")\")) #> # Predicted values of Total score BARTHEL INDEX #>  #> e42dep | Predicted |           95% CI #> ------------------------------------- #>      1 |    104.42 | (101.21, 107.64) #>      2 |     83.81 | ( 81.91,  85.72) #>      3 |     63.20 | ( 61.94,  64.47) #>      4 |     42.59 | ( 40.54,  44.65) #>  #> Adjusted for: #> * c12hour = 42.25 # you can also use `options(ggeffects_ci_brackets = c(\"[\", \"]\"))` # to set this globally  # collapse CI columns into column with predicted values print(predict_response(fit, \"e42dep\"), collapse_ci = TRUE) #> # Predicted values of Total score BARTHEL INDEX #>  #> e42dep |      Predicted (95% CI) #> -------------------------------- #>      1 | 104.42 (101.21, 107.64) #>      2 |  83.81  (81.91,  85.72) #>      3 |  63.20  (61.94,  64.47) #>      4 |  42.59  (40.54,  44.65) #>  #> Adjusted for: #> * c12hour = 42.25  # include value labels print(predict_response(fit, \"e42dep\"), value_labels = TRUE) #> # Predicted values of Total score BARTHEL INDEX #>  #>                   e42dep | Predicted |         95% CI #> ----------------------------------------------------- #>          [1] independent |    104.42 | 101.21, 107.64 #>   [2] slightly dependent |     83.81 |  81.91,  85.72 #> [3] moderately dependent |     63.20 |  61.94,  64.47 #>   [4] severely dependent |     42.59 |  40.54,  44.65 #>  #> Adjusted for: #> * c12hour = 42.25  # include variable labels in column headers print(predict_response(fit, \"e42dep\"), variable_labels = TRUE) #> # Predicted values of Total score BARTHEL INDEX #>  #> elder's dependency | Predicted values of Total score BARTHEL INDEX |         95% CI #> ----------------------------------------------------------------------------------- #>                  1 |                                        104.42 | 101.21, 107.64 #>                  2 |                                         83.81 |  81.91,  85.72 #>                  3 |                                         63.20 |  61.94,  64.47 #>                  4 |                                         42.59 |  40.54,  44.65 #>  #> Adjusted for: #> * c12hour = 42.25  # include value labels and variable labels print(predict_response(fit, \"e42dep\"), variable_labels = TRUE, value_labels = TRUE) #> # Predicted values of Total score BARTHEL INDEX #>  #>       elder's dependency | Predicted values of Total score BARTHEL INDEX |         95% CI #> ----------------------------------------------------------------------------------------- #>          [1] independent |                                        104.42 | 101.21, 107.64 #>   [2] slightly dependent |                                         83.81 |  81.91,  85.72 #> [3] moderately dependent |                                         63.20 |  61.94,  64.47 #>   [4] severely dependent |                                         42.59 |  40.54,  44.65 #>  #> Adjusted for: #> * c12hour = 42.25  data(iris) m <- lm(Sepal.Length ~ Species * Petal.Length, data = iris)  # default print with subgroups predict_response(m, c(\"Petal.Length\", \"Species\")) #> # Predicted values of Sepal.Length #>  #> Species: setosa #>  #> Petal.Length | Predicted |      95% CI #> -------------------------------------- #>         1.00 |      4.76 | 4.49,  5.03 #>         2.00 |      5.30 | 4.99,  5.61 #>         3.00 |      5.84 | 4.99,  6.69 #>         4.00 |      6.38 | 4.99,  7.77 #>         5.00 |      6.92 | 4.99,  8.86 #>         7.00 |      8.01 | 4.98, 11.04 #>  #> Species: versicolor #>  #> Petal.Length | Predicted |      95% CI #> -------------------------------------- #>         1.00 |      3.24 | 2.57,  3.90 #>         2.00 |      4.06 | 3.60,  4.53 #>         3.00 |      4.89 | 4.62,  5.16 #>         4.00 |      5.72 | 5.61,  5.83 #>         5.00 |      6.55 | 6.37,  6.73 #>         7.00 |      8.21 | 7.64,  8.77 #>  #> Species: virginica #>  #> Petal.Length | Predicted |      95% CI #> -------------------------------------- #>         1.00 |      2.06 | 1.27,  2.84 #>         2.00 |      3.05 | 2.43,  3.67 #>         3.00 |      4.05 | 3.60,  4.50 #>         4.00 |      5.04 | 4.76,  5.33 #>         5.00 |      6.04 | 5.90,  6.17 #>         7.00 |      8.03 | 7.76,  8.30 #>  #>  #> Not all rows are shown in the output. Use `print(..., n = Inf)` to show #>   all rows.  # omit name of grouping variable in subgroup table headers print(predict_response(m, c(\"Petal.Length\", \"Species\")), group_name = FALSE) #> # Predicted values of Sepal.Length #>  #> setosa #>  #> Petal.Length | Predicted |      95% CI #> -------------------------------------- #>         1.00 |      4.76 | 4.49,  5.03 #>         2.00 |      5.30 | 4.99,  5.61 #>         3.00 |      5.84 | 4.99,  6.69 #>         4.00 |      6.38 | 4.99,  7.77 #>         5.00 |      6.92 | 4.99,  8.86 #>         7.00 |      8.01 | 4.98, 11.04 #>  #> versicolor #>  #> Petal.Length | Predicted |      95% CI #> -------------------------------------- #>         1.00 |      3.24 | 2.57,  3.90 #>         2.00 |      4.06 | 3.60,  4.53 #>         3.00 |      4.89 | 4.62,  5.16 #>         4.00 |      5.72 | 5.61,  5.83 #>         5.00 |      6.55 | 6.37,  6.73 #>         7.00 |      8.21 | 7.64,  8.77 #>  #> virginica #>  #> Petal.Length | Predicted |      95% CI #> -------------------------------------- #>         1.00 |      2.06 | 1.27,  2.84 #>         2.00 |      3.05 | 2.43,  3.67 #>         3.00 |      4.05 | 3.60,  4.50 #>         4.00 |      5.04 | 4.76,  5.33 #>         5.00 |      6.04 | 5.90,  6.17 #>         7.00 |      8.03 | 7.76,  8.30 #>  #>  #> Not all rows are shown in the output. Use `print(..., n = Inf)` to show #>   all rows.  # collapse tables into one print(predict_response(m, c(\"Petal.Length\", \"Species\")), collapse_tables = TRUE, n = 3) #> # Predicted values of Sepal.Length #>  #> Petal.Length |    Species | Predicted |      95% CI #> --------------------------------------------------- #>         1.00 |     setosa |      4.76 | 4.49,  5.03 #>         3.00 |            |      5.84 | 4.99,  6.69 #>         7.00 |            |      8.01 | 4.98, 11.04 #>         1.00 | versicolor |      3.24 | 2.57,  3.90 #>         3.00 |            |      4.89 | 4.62,  5.16 #>         7.00 |            |      8.21 | 7.64,  8.77 #>         1.00 |  virginica |      2.06 | 1.27,  2.84 #>         3.00 |            |      4.05 | 3.60,  4.50 #>         7.00 |            |      8.03 | 7.76,  8.30 #>  #>  #> Not all rows are shown in the output. Use `print(..., n = Inf)` to show #>   all rows.  # increase number of digits print(predict_response(fit, \"e42dep\"), digits = 5) #> # Predicted values of Total score BARTHEL INDEX #>  #> e42dep | Predicted |               95% CI #> ----------------------------------------- #>      1 | 104.42339 | 101.21081, 107.63598 #>      2 |  83.81330 |  81.90728,  85.71932 #>      3 |  63.20320 |  61.93656,  64.46985 #>      4 |  42.59311 |  40.53516,  44.65105 #>  #> Adjusted for: #> * c12hour = 42.25"},{"path":"https://strengejacke.github.io/ggeffects/reference/reexports.html","id":null,"dir":"Reference","previous_headings":"","what":"Objects exported from other packages — reexports","title":"Objects exported from other packages — reexports","text":"objects imported packages. Follow links see documentation. insight print_html, print_md","code":""},{"path":"https://strengejacke.github.io/ggeffects/reference/residualize_over_grid.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute partial residuals from a data grid — residualize_over_grid","title":"Compute partial residuals from a data grid — residualize_over_grid","text":"function computes partial residuals based data grid, data grid usually data frame combinations factor variables certain values numeric vectors. data grid usually used newdata argument predict(), can created new_data().","code":""},{"path":"https://strengejacke.github.io/ggeffects/reference/residualize_over_grid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute partial residuals from a data grid — residualize_over_grid","text":"","code":"residualize_over_grid(grid, model, ...)  # S3 method for class 'data.frame' residualize_over_grid(grid, model, predictor_name, ...)  # S3 method for class 'ggeffects' residualize_over_grid(grid, model, protect_names = TRUE, ...)"},{"path":"https://strengejacke.github.io/ggeffects/reference/residualize_over_grid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute partial residuals from a data grid — residualize_over_grid","text":"grid data frame representing data grid, object class ggeffects, returned predict_response(). model model compute partial residuals. data grid grid match predictors model. ... Currently used. predictor_name name focal predictor, partial residuals computed. protect_names Logical, TRUE, preserves column names ggeffects objects used grid.","code":""},{"path":"https://strengejacke.github.io/ggeffects/reference/residualize_over_grid.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute partial residuals from a data grid — residualize_over_grid","text":"data frame residuals focal predictor.","code":""},{"path":"https://strengejacke.github.io/ggeffects/reference/residualize_over_grid.html","id":"partial-residuals","dir":"Reference","previous_headings":"","what":"Partial Residuals","title":"Compute partial residuals from a data grid — residualize_over_grid","text":"generalized linear models (glms), residualized scores computed inv.link(link(Y) + r) Y predicted values response scale, r working residuals.  (generalized) linear mixed models, random effect also partialled .","code":""},{"path":"https://strengejacke.github.io/ggeffects/reference/residualize_over_grid.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Compute partial residuals from a data grid — residualize_over_grid","text":"Fox J, Weisberg S. Visualizing Fit Lack Fit Complex Regression Models Predictor Effect Plots Partial Residuals. Journal Statistical Software 2018;87.","code":""},{"path":"https://strengejacke.github.io/ggeffects/reference/residualize_over_grid.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute partial residuals from a data grid — residualize_over_grid","text":"","code":"library(ggeffects) set.seed(1234) x <- rnorm(200) z <- rnorm(200) # quadratic relationship y <- 2 * x + x^2 + 4 * z + rnorm(200)  d <- data.frame(x, y, z) model <- lm(y ~ x + z, data = d)  pr <- predict_response(model, c(\"x [all]\", \"z\")) head(residualize_over_grid(pr, model)) #>          x group predicted #> 53  -1.207  0.07 -1.797239 #> 402  0.277  1.08  4.888712 #> 518  1.084  0.07  3.232202 #> 9   -2.346  1.08  4.133561 #> 428  0.429  0.07  1.801594 #> 441  0.506  1.08  5.659527"},{"path":"https://strengejacke.github.io/ggeffects/reference/test_predictions.html","id":null,"dir":"Reference","previous_headings":"","what":"(Pairwise) comparisons between predictions (marginal effects) — test_predictions","title":"(Pairwise) comparisons between predictions (marginal effects) — test_predictions","text":"Function test differences adjusted predictions statistical significance. usually called contrasts (pairwise) comparisons, \"marginal effects\". hypothesis_test() alias.","code":""},{"path":"https://strengejacke.github.io/ggeffects/reference/test_predictions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"(Pairwise) comparisons between predictions (marginal effects) — test_predictions","text":"","code":"test_predictions(object, ...)  hypothesis_test(object, ...)  # Default S3 method test_predictions(   object,   terms = NULL,   by = NULL,   test = \"pairwise\",   test_args = NULL,   equivalence = NULL,   scale = \"response\",   p_adjust = NULL,   df = NULL,   ci_level = 0.95,   collapse_levels = FALSE,   margin = \"mean_reference\",   condition = NULL,   engine = \"marginaleffects\",   verbose = TRUE,   ... )  # S3 method for class 'ggeffects' test_predictions(   object,   by = NULL,   test = \"pairwise\",   equivalence = NULL,   scale = \"response\",   p_adjust = NULL,   df = NULL,   collapse_levels = FALSE,   engine = \"marginaleffects\",   verbose = TRUE,   ... )"},{"path":"https://strengejacke.github.io/ggeffects/reference/test_predictions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"(Pairwise) comparisons between predictions (marginal effects) — test_predictions","text":"object fitted model object, object class ggeffects. object class ggeffects, arguments terms, margin ci_level taken ggeffects object need specified. ... Arguments passed data_grid() creating reference grid marginaleffects::predictions() resp. marginaleffects::slopes(). instance, arguments type transform can used back-transform comparisons contrasts different scales. vcov can used calculate heteroscedasticity-consistent standard errors contrasts. See examples bottom vignette details. define heteroscedasticity-consistent variance-covariance matrix, can either use arguments predict_response() etc., namely vcov vcov_args. transformed matrix passed vcov argument marginaleffects. directly use vcov argument. See ?marginaleffects::slopes details. terms object object class ggeffects, terms argument used predictions, .e. terms can ignored. Else, object model object, terms must character vector names focal terms object, contrasts comparisons displayed. least one term required, maximum length three terms. first focal term numeric, contrasts comparisons slopes numeric predictor computed (possibly grouped levels categorical focal predictors). Character vector specifying names predictors condition . Hypothesis test carried focal terms level variables. useful especially interaction terms, want test interaction within \"groups\". relevant categorical predictors. test Hypothesis test, defined character string. Can one : \"pairwise\" (default), test pairwise comparisons. \"trend\" (\"slope\") test linear trend/slope (usually) continuous predictors. options just aliases setting trend = NULL. \"contrast\" test simple contrasts (.e. level tested average levels). \"exclude\" test simple contrasts (.e. level tested average levels, excluding contrast tested). \"interaction\" test interaction contrasts (difference--difference contrasts). flexible interaction contrasts can calcualted using test_args argument. \"consecutive\" test contrasts consecutive levels predictor. \"polynomial\" test orthogonal polynomial contrasts, assuming equally-spaced factor levels. character string custom hypothesis, e.g. \"b2 = b1\". test second level predictor different first level. Custom hypotheses flexible. also possible test interaction contrasts (difference--difference contrasts) custom hypotheses, e.g. \"(b2 - b1) = (b4 - b3)\". See also section Introduction contrasts pairwise comparisons. data frame custom contrasts. See 'Examples'. NULL, case simple contrasts computed. Technical details packages used back-end calculate contrasts pairwise comparisons provided section Packages used back-end calculate contrasts pairwise comparisons . test_args Optional arguments passed test, typically provided named list. applies options use emmeans package backend, e.g. test = \"interaction\", test_args passed emmeans::contrast(interaction = test_args). emmeans options (like \"cotrast\", \"exclude\", \"consecutive\" ), test_args passed option argument emmeans::contrast(). equivalence ROPE's lower higher bounds. \"default\" vector length two (e.g., c(-0.1, 0.1)). \"default\", bayestestR::rope_range() used. Instead using equivalence argument, also possible call equivalence_test() method directly. requires parameters package loaded. using equivalence_test(), two columns information ROPE coverage decision H0 added. Furthermore, possible plot() results equivalence_test(). See bayestestR::equivalence_test() resp. parameters::equivalence_test.lm() details. scale Character string, indicating scale contrasts comparisons represented. Can one : \"response\" (default), return contrasts response scale (e.g. logistic regression, probabilities); \"link\" return contrasts scale linear predictors (e.g. logistic regression, log-odds); \"probability\" (\"probs\") returns contrasts probability scale, required model classes, like MASS::polr(); \"oddsratios\" return contrasts odds ratio scale (applies logistic regression models); \"irr\" return contrasts odds ratio scale (applies count models); transformation function like \"exp\" \"log\", return transformed (exponentiated respectively logarithmic) contrasts; note transformations applied response scale. Note: scale argument supported provided object, automatically changed supported scale-type (message printed verbose = TRUE). p_adjust Character vector, NULL, indicates method adjust p-values. See stats::p.adjust() stats::p.adjust.methods details. possible adjustment methods \"tukey\" \"sidak\", johnson_neyman(), \"fdr\" (\"bh\") \"esarey\" (short-cut \"es\") available options. caution necessary adjusting p-value multiple comparisons. See also section P-value adjustment . df Degrees freedom used compute p-values confidence intervals. NULL, degrees freedom extracted model using insight::get_df() type = \"wald\". ci_level Numeric, level confidence intervals. object object class ggeffects, ci_level argument used predictions, .e. ci_level can ignored. collapse_levels Logical, TRUE, term labels refer identical levels longer separated \"-\", instead collapsed unique term label (e.g., \"level -level \" becomes \"level \"). See 'Examples'. margin Character string, indicates method marginalize non-focal terms. See predict_response() details. object object class ggeffects, margin argument used predictions, .e. margin can ignored. condition Named character vector, indicates covariates held constant specific values, instance condition = c(covariate1 = 20, covariate2 = 5). engine Character string, indicates package use computing contrasts comparisons. Usually, argument can ignored, unless want explicitly use another package marginaleffects calculate contrasts pairwise comparisons. engine can either \"marginaleffects\" (default) \"emmeans\". latter useful marginaleffects package available, emmeans package preferred. Note using emmeans back-end currently feature rich default (marginaleffects) still development. Setting engine = \"emmeans\" provides additional test options: \"interaction\" calculate interaction contrasts, \"consecutive\" calculate contrasts consecutive levels predictor, data frame custom contrasts (see also test). experimental option well, engine = \"ggeffects\". However, currently work--progress offers much less options default engine, \"marginaleffects\". can faster cases, though, works comparing predicted random effects mixed models, predicted probabilities zero-inflation component. marginaleffects package installed, emmeans package used automatically. package installed well, engine = \"ggeffects\" used. verbose Toggle messages warnings.","code":""},{"path":"https://strengejacke.github.io/ggeffects/reference/test_predictions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"(Pairwise) comparisons between predictions (marginal effects) — test_predictions","text":"data frame containing predictions (e.g. test = NULL), contrasts pairwise comparisons adjusted predictions estimated marginal means.","code":""},{"path":"https://strengejacke.github.io/ggeffects/reference/test_predictions.html","id":"introduction-into-contrasts-and-pairwise-comparisons","dir":"Reference","previous_headings":"","what":"Introduction into contrasts and pairwise comparisons","title":"(Pairwise) comparisons between predictions (marginal effects) — test_predictions","text":"many ways test contrasts pairwise comparisons. detailed introduction many (visual) examples shown vignette.","code":""},{"path":"https://strengejacke.github.io/ggeffects/reference/test_predictions.html","id":"simple-workflow-for-pairwise-comparisons","dir":"Reference","previous_headings":"","what":"Simple workflow for pairwise comparisons","title":"(Pairwise) comparisons between predictions (marginal effects) — test_predictions","text":"simple workflow includes calculating adjusted predictions passing results directly test_predictions(), e.g.:   See also vignette.","code":"# 1. fit your model model <- lm(mpg ~ hp + wt + am, data = mtcars) # 2. calculate adjusted predictions pr <- predict_response(model, \"am\") pr # 3. test pairwise comparisons test_predictions(pr)"},{"path":"https://strengejacke.github.io/ggeffects/reference/test_predictions.html","id":"packages-used-as-back-end-to-calculate-contrasts-and-pairwise-comparisons","dir":"Reference","previous_headings":"","what":"Packages used as back-end to calculate contrasts and pairwise comparisons","title":"(Pairwise) comparisons between predictions (marginal effects) — test_predictions","text":"test argument used define kind contrast comparison calculated. default use marginaleffects package. technical details packages used back-end. test ... \"pairwise\" (default), pairwise comparisons based marginaleffects package. \"trend\" \"slope\" also uses marginaleffects package. \"contrast\" uses emmeans package, .e. emmeans::contrast(method = \"eff\") called. \"exclude\" relies emmeans package, .e. emmeans::contrast(method = \"del.eff\") called. \"polynomial\" relies emmeans package, .e. emmeans::contrast(method = \"poly\") called. \"interaction\" uses emmeans package, .e. emmeans::contrast(interaction = ...) called. \"consecutive\" also relies emmeans package, .e. emmeans::contrast(method = \"consec\") called. character string custom hypothesis, marginaleffects package used. data frame custom contrasts, emmeans used . NULL calls functions marginaleffects package hypothesis = NULL. focal terms present random effects mixed model, predicted probabilities zero-inflation component model tested, functions ggeffects package used. example pairwise comparisons random effects vignette.","code":""},{"path":"https://strengejacke.github.io/ggeffects/reference/test_predictions.html","id":"p-value-adjustment-for-multiple-comparisons","dir":"Reference","previous_headings":"","what":"P-value adjustment for multiple comparisons","title":"(Pairwise) comparisons between predictions (marginal effects) — test_predictions","text":"Note p-value adjustment methods supported p.adjust() (see also p.adjust.methods), row considered one set comparisons, matter test specified. , instance, test_predictions() returns eight rows predictions (test = NULL), p_adjust = \"bonferroni\", p-values adjusted way test pairwise comparisons (test = \"pairwise\") eight rows comparisons returned. methods \"tukey\" \"sidak\", rank adjustment done based number combinations levels focal predictors terms. Thus, latter two methods may useful certain tests , particular pairwise comparisons. johnson_neyman(), available adjustment methods \"fdr\" (\"bh\") (Benjamini & Hochberg (1995)) \"esarey\" (\"es\") (Esarey Sumner 2017). usually return similar results. major difference \"fdr\" can slightly faster stable edge cases, however, confidence intervals updated. p-values adjusted. \"esarey\" slower, confidence intervals updated well.","code":""},{"path":"https://strengejacke.github.io/ggeffects/reference/test_predictions.html","id":"global-options-to-choose-package-for-calculating-comparisons","dir":"Reference","previous_headings":"","what":"Global options to choose package for calculating comparisons","title":"(Pairwise) comparisons between predictions (marginal effects) — test_predictions","text":"ggeffects_test_engine can used option either use marginaleffects package computing contrasts comparisons (default), emmeans package (e.g. options(ggeffects_test_engine = \"emmeans\")). latter useful marginaleffects package available, emmeans package preferred. can also provide engine directly, e.g. test_predictions(..., engine = \"emmeans\"). Note using emmeans backend currently feature rich default (marginaleffects) still development. engine = \"emmeans\", test argument can also \"interaction\" calculate interaction contrasts (difference--difference contrasts), \"consecutive\" calculate contrasts consecutive levels predictor, data frame custom contrasts. test one latter options, engine specified, engine automatically set \"emmeans\". Additionally, test_args argument can used specify options contrasts. See 'Examples' documentation test_args. marginaleffects package installed, emmeans package used automatically. package installed well, engine = \"ggeffects\" used.","code":""},{"path":"https://strengejacke.github.io/ggeffects/reference/test_predictions.html","id":"global-options-to-customize-tables-when-printing","dir":"Reference","previous_headings":"","what":"Global Options to Customize Tables when Printing","title":"(Pairwise) comparisons between predictions (marginal effects) — test_predictions","text":"verbose argument can used display silence messages warnings. Furthermore, options() can used set defaults print() print_html() method. following options available, can simply run console: ggeffects_ci_brackets: Define character vector length two, indicating opening closing parentheses encompass confidence intervals values, e.g. options(ggeffects_ci_brackets = c(\"[\", \"]\")). ggeffects_collapse_ci: Logical, TRUE, columns predicted values (contrasts) confidence intervals collapsed one column, e.g. options(ggeffects_collapse_ci = TRUE). ggeffects_collapse_p: Logical, TRUE, columns predicted values (contrasts) p-values collapsed one column, e.g. options(ggeffects_collapse_p = TRUE). Note p-values replaced asterisk-symbols (stars) empty strings ggeffects_collapse_p = TRUE, depending significance level. ggeffects_collapse_tables: Logical, TRUE, multiple tables subgroups combined one table. works one focal term, e.g. options(ggeffects_collapse_tables = TRUE). ggeffects_output_format: String, either \"text\", \"markdown\" \"html\". Defines default output format predict_response(). \"html\", formatted HTML table created printed view pane. \"markdown\" creates markdown-formatted table inside Rmarkdown documents, prints text-format table console used interactively. \"text\" NULL, formatted table printed console, e.g. options(ggeffects_output_format = \"html\"). ggeffects_html_engine: String, either \"tt\" \"gt\". Defines default engine use printing HTML tables. \"tt\", tinytable package used, \"gt\", gt package used, e.g. options(ggeffects_html_engine = \"gt\"). Use options(<option_name> = NULL) remove option.","code":""},{"path":"https://strengejacke.github.io/ggeffects/reference/test_predictions.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"(Pairwise) comparisons between predictions (marginal effects) — test_predictions","text":"Esarey, J., & Sumner, J. L. (2017). Marginal effects interaction models: Determining controlling false positive rate. Comparative Political Studies, 1–33. Advance online publication. doi: 10.1177/0010414017730080","code":""},{"path":[]},{"path":"https://strengejacke.github.io/ggeffects/reference/test_predictions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"(Pairwise) comparisons between predictions (marginal effects) — test_predictions","text":"","code":"if (FALSE) { # requireNamespace(\"marginaleffects\") && requireNamespace(\"parameters\") && interactive() # \\donttest{ data(efc) efc$c172code <- as.factor(efc$c172code) efc$c161sex <- as.factor(efc$c161sex) levels(efc$c161sex) <- c(\"male\", \"female\") m <- lm(barthtot ~ c12hour + neg_c_7 + c161sex + c172code, data = efc)  # direct computation of comparisons test_predictions(m, \"c172code\")  # passing a `ggeffects` object pred <- predict_response(m, \"c172code\") test_predictions(pred)  # test for slope test_predictions(m, \"c12hour\")  # interaction - contrasts by groups m <- lm(barthtot ~ c12hour + c161sex * c172code + neg_c_7, data = efc) test_predictions(m, c(\"c161sex\", \"c172code\"), test = NULL)  # interaction - pairwise comparisons by groups test_predictions(m, c(\"c161sex\", \"c172code\"))  # equivalence testing test_predictions(m, c(\"c161sex\", \"c172code\"), equivalence = c(-2.96, 2.96))  # equivalence testing, using the parameters package pr <- predict_response(m, c(\"c161sex\", \"c172code\")) parameters::equivalence_test(pr)  # interaction - collapse unique levels test_predictions(m, c(\"c161sex\", \"c172code\"), collapse_levels = TRUE)  # p-value adjustment test_predictions(m, c(\"c161sex\", \"c172code\"), p_adjust = \"tukey\")  # not all comparisons, only by specific group levels test_predictions(m, \"c172code\", by = \"c161sex\")  # specific comparisons test_predictions(m, c(\"c161sex\", \"c172code\"), test = \"b2 = b1\")  # interaction - slope by groups m <- lm(barthtot ~ c12hour + neg_c_7 * c172code + c161sex, data = efc) test_predictions(m, c(\"neg_c_7\", \"c172code\"))  # Interaction and consecutive contrasts ----------------- # ------------------------------------------------------- data(coffee_data, package = \"ggeffects\") m <- lm(alertness ~ time * coffee + sex, data = coffee_data)  # consecutive contrasts test_predictions(m, \"time\", by = \"coffee\", test = \"consecutive\")  # interaction contrasts - difference-in-difference comparisons pr <- predict_response(m, c(\"time\", \"coffee\"), margin = \"marginalmeans\") test_predictions(pr, test = \"interaction\")  # Custom contrasts -------------------------------------- # ------------------------------------------------------- wakeup_time <- data.frame(   \"wakeup vs later\" = c(-2, 1, 1) / 2, # make sure each \"side\" sums to (+/-)1!   \"start vs end of day\" = c(-1, 0, 1) ) test_predictions(m, \"time\", by = \"coffee\", test = wakeup_time)  # Example: marginal effects ----------------------------- # ------------------------------------------------------- data(iris) m <- lm(Petal.Width ~ Petal.Length + Species, data = iris)  # we now want the marginal effects for \"Species\". We can calculate # the marginal effect using the \"marginaleffects\" package marginaleffects::avg_slopes(m, variables = \"Species\")  # finally, test_predictions() returns the same. while the previous results # report the marginal effect compared to the reference level \"setosa\", # test_predictions() returns the marginal effects for all pairwise comparisons test_predictions(m, \"Species\") # } }"},{"path":"https://strengejacke.github.io/ggeffects/reference/values_at.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate representative values of a vector — values_at","title":"Calculate representative values of a vector — values_at","text":"function calculates representative values vector, like minimum/maximum values lower, median upper quartile etc., can used numeric vectors plot adjusted predictions representative values.","code":""},{"path":"https://strengejacke.github.io/ggeffects/reference/values_at.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate representative values of a vector — values_at","text":"","code":"values_at(x, values = \"meansd\")  representative_values(x, values = \"meansd\")"},{"path":"https://strengejacke.github.io/ggeffects/reference/values_at.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate representative values of a vector — values_at","text":"x numeric vector. values Character vector, naming pattern representative values calculcated. \"minmax\": (default) minimum maximum values (lower upper bounds) moderator used plot interaction independent variable moderator. \"meansd\": uses mean value moderator well one standard deviation mean value plot effect moderator independent variable. \"zeromax\": similar \"minmax\" option, however, 0 always used minimum value moderator. may useful predictors empirical zero-value, absence moderation simulated using 0 minimum. \"threenum\": calculates three number summary (lower-hinge, median, upper-hinge) moderator value. \"fivenum\": calculates uses Tukey's five number summary (minimum, lower-hinge, median, upper-hinge, maximum) moderator value. \"quartiles\": calculates uses quartiles (lower, median upper) moderator value, including minimum maximum value. \"quartiles2\": calculates uses quartiles (lower, median upper) moderator value, excluding minimum maximum value. \"terciles\": calculates uses terciles (lower upper third) moderator value, including minimum maximum value. \"terciles2\": calculates uses terciles (lower upper third) moderator value, excluding minimum maximum value. option compute range percentiles also possible, using \"percentile\", followed percentage range. example, \"percentile95\" calculate 95% range variable. \"\": uses values moderator variable.","code":""},{"path":"https://strengejacke.github.io/ggeffects/reference/values_at.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate representative values of a vector — values_at","text":"numeric vector length two three, representing required values x, like minimum/maximum value mean +/- 1 SD. x missing, function, pre-programmed n length returned. See examples.","code":""},{"path":"https://strengejacke.github.io/ggeffects/reference/values_at.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate representative values of a vector — values_at","text":"","code":"data(efc) values_at(efc$c12hour) #> [1] -8.4 42.4 93.2 values_at(efc$c12hour, \"quartiles2\") #> [1] 10.0 20.0 42.8  mean_sd <- values_at(values = \"meansd\") mean_sd(efc$c12hour) #> [1] -8.4 42.4 93.2"},{"path":"https://strengejacke.github.io/ggeffects/reference/vcov.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate variance-covariance matrix for adjusted predictions — vcov","title":"Calculate variance-covariance matrix for adjusted predictions — vcov","text":"Returns variance-covariance matrix predicted values object.","code":""},{"path":"https://strengejacke.github.io/ggeffects/reference/vcov.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate variance-covariance matrix for adjusted predictions — vcov","text":"","code":"# S3 method for class 'ggeffects' vcov(object, vcov = NULL, vcov_args = NULL, verbose = TRUE, ...)"},{"path":"https://strengejacke.github.io/ggeffects/reference/vcov.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate variance-covariance matrix for adjusted predictions — vcov","text":"object object class \"ggeffects\", returned predict_response(). vcov Variance-covariance matrix used compute uncertainty estimates (e.g., confidence intervals based robust standard errors). argument accepts covariance matrix, function returns covariance matrix, string identifies function used compute covariance matrix. covariance matrix function returns covariance matrix (e.g., stats::vcov()) string indicates kind uncertainty estimates return. Heteroskedasticity-consistent: \"HC\", \"HC0\", \"HC1\", \"HC2\", \"HC3\", \"HC4\", \"HC4m\", \"HC5\". See ?sandwich::vcovHC Cluster-robust: \"vcovCR\", \"CR0\", \"CR1\", \"CR1p\", \"CR1S\", \"CR2\", \"CR3\". See ?clubSandwich::vcovCR. Bootstrap: \"BS\", \"xy\", \"fractional\", \"jackknife\", \"residual\", \"wild\", \"mammen\", \"norm\", \"webb\". See ?sandwich::vcovBS sandwich package functions: \"HAC\", \"PC\", \"CL\", \"PL\". NULL, standard errors (confidence intervals) predictions based standard errors returned predict()-function. Note probably model objects work predict_response() also supported sandwich clubSandwich packages. See details vignette. vcov_args List arguments passed function identified vcov argument. function typically supplied sandwich clubSandwich packages. Please refer documentation (e.g., ?sandwich::vcovHAC) see list available arguments. estimation type (argument type) given, default type \"HC\" equals default sandwich package; type \"CR\" default set \"CR3\". defaults, refer documentation sandwich clubSandwich package. verbose Toggle messages warnings. ... Currently used.","code":""},{"path":"https://strengejacke.github.io/ggeffects/reference/vcov.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate variance-covariance matrix for adjusted predictions — vcov","text":"variance-covariance matrix predicted values object.","code":""},{"path":"https://strengejacke.github.io/ggeffects/reference/vcov.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate variance-covariance matrix for adjusted predictions — vcov","text":"returned matrix many rows (columns) possible combinations predicted values predict_response() call. example, two variables terms-argument predict_response() 3 4 levels , 3*4 combinations predicted values, returned matrix 12x12 dimension. short, nrow(object) always equal nrow(vcov(object)). See also 'Examples'.","code":""},{"path":"https://strengejacke.github.io/ggeffects/reference/vcov.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate variance-covariance matrix for adjusted predictions — vcov","text":"","code":"data(efc) model <- lm(barthtot ~ c12hour + neg_c_7 + c161sex + c172code, data = efc) result <- predict_response(model, c(\"c12hour [meansd]\", \"c161sex\"))  vcov(result) #>             1           2            3            4           5           6 #> 1  3.62642428  0.71518593  2.922676591  0.011438238  2.21892890 -0.69230945 #> 2  0.71518593  1.74243837 -0.073477976  0.953774462 -0.86214188  0.16511056 #> 3  2.92267659 -0.07347798  2.987294098 -0.008860469  3.05191160  0.05575704 #> 4  0.01143824  0.95377446 -0.008860469  0.933475755 -0.02915918  0.91317705 #> 5  2.21892890 -0.86214188  3.051911604 -0.029159177  3.88489431  0.80382353 #> 6 -0.69230945  0.16511056  0.055757037  0.913177047  0.80382353  1.66124354  # compare standard errors sqrt(diag(vcov(result))) #>         1         2         3         4         5         6  #> 1.9043173 1.3200145 1.7283790 0.9661655 1.9710135 1.2888924  as.data.frame(result) #>      x predicted std.error conf.low conf.high  group #> 1 -8.3  76.75375 1.9043173 73.01577  80.49173   Male #> 2 -8.3  77.79518 1.3200145 75.20412  80.38623 Female #> 3 42.2  63.96204 1.7283790 60.56941  67.35467   Male #> 4 42.2  65.00347 0.9661655 63.10698  66.89995 Female #> 5 92.7  51.17033 1.9710135 47.30143  55.03923   Male #> 6 92.7  52.21175 1.2888924 49.68179  54.74172 Female  # only two predicted values, no further terms # vcov() returns a 2x2 matrix result <- predict_response(model, \"c161sex\") vcov(result) #>              1            2 #> 1  2.987290958 -0.008861546 #> 2 -0.008861546  0.933476742  # 2 levels for c161sex multiplied by 3 levels for c172code # result in 6 combinations of predicted values # thus vcov() returns a 6x6 matrix result <- predict_response(model, c(\"c161sex\", \"c172code\")) vcov(result) #>             1            2           3           4            5           6 #> 1  4.87803294  3.024738355  1.17144377  1.76091479 -0.092379792 -1.94567437 #> 2  3.02473835  2.983277938  2.94181752  0.03225611 -0.009204306 -0.05066472 #> 3  1.17144377  2.941817522  4.71219127 -1.69640257  0.073971180  1.84434493 #> 4  1.76091479  0.032256111 -1.69640257  2.58228744  0.853628756 -0.87502993 #> 5 -0.09237979 -0.009204306  0.07397118  0.85362876  0.936804241  1.01997973 #> 6 -1.94567437 -0.050664722  1.84434493 -0.87502993  1.019979727  2.91498938"},{"path":[]},{"path":"https://strengejacke.github.io/ggeffects/news/index.html","id":"changes-2-0-1","dir":"Changelog","previous_headings":"","what":"Changes","title":"ggeffects 2.0.1","text":"values_at() gains new \"threenum\" option. \"quartiles\" \"quartiles2\" can used full-name alternatives \"quart\" \"quart2\".","code":""},{"path":"https://strengejacke.github.io/ggeffects/news/index.html","id":"ggeffects-200","dir":"Changelog","previous_headings":"","what":"ggeffects 2.0.0","title":"ggeffects 2.0.0","text":"CRAN release: 2024-11-27","code":""},{"path":"https://strengejacke.github.io/ggeffects/news/index.html","id":"breaking-changes-2-0-0","dir":"Changelog","previous_headings":"","what":"Breaking changes","title":"ggeffects 2.0.0","text":"way type = \"random\" works revised. type = \"random\" longer returns predictions intervals. Instead, use interval = \"prediction\". type = \"random\" now mainly responsible unit-level predictions mixed models, opposed type = \"fixed\", used population-level predictions. separation type = \"random\" interval argument makes handling mixed models easier, intuitive consistent. Accordingly, vignette regarding introduction mixed models ggeffects largely revised. vcov_fun vcov_type argument removed now replaced single vcov argument, line handling heteroscedasticity-consistent standard errors packages (mainly: easystats eco-system). deprecated arguments ggpredict(), vcov(), ggeffect() ggemmeans() removed. deprecated arguments plot() method removed. Options type = \"random\" type = \"zi_random\" longer available ggemmeans(). responsible set prediction intervals, can done interval = \"prediction\" now.","code":""},{"path":"https://strengejacke.github.io/ggeffects/news/index.html","id":"changes-2-0-0","dir":"Changelog","previous_headings":"","what":"Changes","title":"ggeffects 2.0.0","text":"Added get_preditions() method, can used implement S3-classes add support new models ggeffects. corresponding vignette, . plot() method gets dot_shape argument, change shape data points show_data = TRUE. test_predictions gains test_args argument, optionally pass options test emmeans engine/options. vcov() returns informative warning, variance-covariance matrix extracted due problems creating model matrix (prevents confidence intervals calculated). Added Okabe-Ito color scale available color ggeffects-palettes. models class survreg, argument type can also \"quantile\".","code":""},{"path":"https://strengejacke.github.io/ggeffects/news/index.html","id":"bug-fixes-2-0-0","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"ggeffects 2.0.0","text":"Fixed issue argument condition ggaverage(). Fixed issues missing confidence intervals objects class averaging.","code":""},{"path":"https://strengejacke.github.io/ggeffects/news/index.html","id":"ggeffects-172","dir":"Changelog","previous_headings":"","what":"ggeffects 1.7.2","title":"ggeffects 1.7.2","text":"CRAN release: 2024-10-13","code":""},{"path":"https://strengejacke.github.io/ggeffects/news/index.html","id":"breaking-changes-1-7-2","dir":"Changelog","previous_headings":"","what":"Breaking changes","title":"ggeffects 1.7.2","text":"deprecated argument ppd removed. deprecated arguments plot() removed. Pooling functions now use model’s degrees freedom calculate critical values confidence intervals.","code":""},{"path":"https://strengejacke.github.io/ggeffects/news/index.html","id":"changes-1-7-2","dir":"Changelog","previous_headings":"","what":"Changes","title":"ggeffects 1.7.2","text":"test = \"slope\" (test = \"trend\") aliases test_predictions() test = NULL numeric predictors. predict_response() (ggpredict(), ggemmeans() ggeffect()) get argument bias_correction, correct bias back-transforming predictions non-Gaussian mixed models.","code":""},{"path":"https://strengejacke.github.io/ggeffects/news/index.html","id":"ggeffects-171","dir":"Changelog","previous_headings":"","what":"ggeffects 1.7.1","title":"ggeffects 1.7.1","text":"CRAN release: 2024-09-01","code":""},{"path":"https://strengejacke.github.io/ggeffects/news/index.html","id":"general-1-7-1","dir":"Changelog","previous_headings":"","what":"General","title":"ggeffects 1.7.1","text":"Added support models class glm_weightit, ordinal_weightit, multinom_weightit package WeightIt.","code":""},{"path":"https://strengejacke.github.io/ggeffects/news/index.html","id":"bug-fixes-1-7-1","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"ggeffects 1.7.1","text":"Fixed issues multivariate response models due changes last insight package updates. Fixed issue swapped lower higher confidence interval values models inverse-link. Fixed CRAN check issues due breaking changes last marginaleffects update.","code":""},{"path":"https://strengejacke.github.io/ggeffects/news/index.html","id":"ggeffects-170","dir":"Changelog","previous_headings":"","what":"ggeffects 1.7.0","title":"ggeffects 1.7.0","text":"CRAN release: 2024-06-20","code":""},{"path":"https://strengejacke.github.io/ggeffects/news/index.html","id":"breaking-1-7-0","dir":"Changelog","previous_headings":"","what":"Breaking","title":"ggeffects 1.7.0","text":"deprecated argument ci.lvl test_predictions() removed.","code":""},{"path":"https://strengejacke.github.io/ggeffects/news/index.html","id":"general-1-7-0","dir":"Changelog","previous_headings":"","what":"General","title":"ggeffects 1.7.0","text":"ggpredict() now supports models class glmgee (package glmtoolbox). ggemmeans() gains arguments vcov_fun, vcov_type vcov_args specify variance-covariance matrix marginal means, similar already available ggpredict() ggaverage(). test = \"contrast\", engine automatically set \"emmeans\" test_predictions(). ggaverage() (predict_response(..., margin = \"empirical\")) now also supports following type options zero-inflated models: \"zi_prob\", \"zero_inflated\" \"fixed\". Support zero-inflated models massively improved test_predictions(), , instance, now also supports scale = \"zprob\" calculate contrasts zero-inflation probability zero-inflated models glmmTMB pscl. Furthermore, predictions zero-inflation probabilities calculated using pr <- predict_response(..., type = \"zi_prob\"), corresponding contrasts calculated test_predictions(pr) automatically. Additionally, types models zero-inflation component (\"zero_inflated\", \"fixed\") supported well. ggeffect() now warns user arguments supported ggpredict() ggemmeans(), function (e.g., vcov_fun). Improved accuracy standard errors test_predictions(..., engine = \"ggeffects\"). terms argument now also accepts shortcut \"percentile\" (plus numeric value) select range percentiles continuous variables, e.g. terms = \"x [percentile90]\" select range 90% percentile.","code":""},{"path":"https://strengejacke.github.io/ggeffects/news/index.html","id":"bug-fixes-1-7-0","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"ggeffects 1.7.0","text":"Fixed issue brms models monotonic effects formula (mo()). Fixed issue vcov() ggeffects objects, occur rare situations predictors character vectors. Fixed issue calculation standard errors one focal term character vector. Fixed issue plot() method show_data = TRUE, certain situations raw data points colored groups present. Fixed issue plot() many data points collapsing random effects groups.","code":""},{"path":"https://strengejacke.github.io/ggeffects/news/index.html","id":"ggeffects-160","dir":"Changelog","previous_headings":"","what":"ggeffects 1.6.0","title":"ggeffects 1.6.0","text":"CRAN release: 2024-05-18","code":""},{"path":"https://strengejacke.github.io/ggeffects/news/index.html","id":"general-1-6-0","dir":"Changelog","previous_headings":"","what":"General","title":"ggeffects 1.6.0","text":"ggpredict() now works models class clm2 package ordinal, however, confidence intervals yet supported models. ggeffect() now passes latent argument models ordinal outcome effects::Effect(), plot effects ordinal models latent scale. argument test test_predictions() \"interaction\", \"consecutive\", data frame, emmeans automatically used backend, relevant package supports argument types. format() (hence, print()) test_predictions() gains combine_levels argument, combine levels focal term output table. engine argument test_predictions() can now also \"ggeffects\". However, currently work--progress offers muss less options default engine, \"marginaleffects\". can faster cases, though, works comparing predicted random effects mixed models. test_predictions() now automatically falls back engines \"emmeans\" \"ggeffects\" marginaleffects (emmeans) package installed. predict_response(), test_predictions() ggpredict() warn user focal terms included random effects model appropriate type margin specified. avoid meaningless results. plot() gets n_rows argument, define number rows panel alignment. useful number facets large default alignment optimal. ppd argument Bayesian models superseded interval argument, .e. ppd = TRUE equivalent interval = \"prediction\" (ppd = FALSE equivalent interval = \"confidence\"). back_transform = FALSE, model transformed response variable, plot() method ggeffects objects now rescales raw data points. ensures raw data points plotted scale predicted values show_data = TRUE. Minor revisions documentation vignettes, improve readability clarity. Several arguments deprecated replaced new argument names. warning printed deprecated arguments used. deprecated arguments removed future release.","code":""},{"path":"https://strengejacke.github.io/ggeffects/news/index.html","id":"bug-fixes-1-6-0","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"ggeffects 1.6.0","text":"Fixed issue print() ggeffect() models ordinal outcome, one column much output. Fixed issue test_predictions() wrong order term labels focal term character vector. Fixed issue ggpredict() wbm models package panelr. Fixed issue ggemmeans() glmmTMB models zero-inflation, terms included variables specified conditional, zero-inflation model formula. Fixed issue ggpredict() Stan models (packages rstanarm brms) ci_level argument correctly recognized. Fixed CRAN check issues due latest marginaleffects update.","code":""},{"path":"https://strengejacke.github.io/ggeffects/news/index.html","id":"ggeffects-152","dir":"Changelog","previous_headings":"","what":"ggeffects 1.5.2","title":"ggeffects 1.5.2","text":"CRAN release: 2024-04-15","code":""},{"path":"https://strengejacke.github.io/ggeffects/news/index.html","id":"general-1-5-2","dir":"Changelog","previous_headings":"","what":"General","title":"ggeffects 1.5.2","text":"ggemmeans() (hence, predict_response(..., margin = \"marginalmeans\")) now supports type = \"zi_prob\" zero-inflated models package glmmTMB, .e. can now predict zero-inflation probability. test_predictions() ggaverage() updated work latest release marginaleffects package. release fixed issues inaccurate standard errors glmmTMB models. test_predictions() gains margin argument, indicate marginalize non-focal terms. ensures estimates pairwise comparisons line estimates predictions. test_predictions() gains engine argument, indicate package use compute pairwise comparisons contrasts. default, marginaleffects package used, can also use emmeans package.","code":""},{"path":"https://strengejacke.github.io/ggeffects/news/index.html","id":"bug-fixes-1-5-2","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"ggeffects 1.5.2","text":"Fixed issue ggeffect() representative values focal term included zero, e.g. terms = \"focal [0,3,5]\".","code":""},{"path":"https://strengejacke.github.io/ggeffects/news/index.html","id":"ggeffects-151","dir":"Changelog","previous_headings":"","what":"ggeffects 1.5.1","title":"ggeffects 1.5.1","text":"CRAN release: 2024-03-26","code":""},{"path":"https://strengejacke.github.io/ggeffects/news/index.html","id":"general-1-5-1","dir":"Changelog","previous_headings":"","what":"General","title":"ggeffects 1.5.1","text":"Overhaul documentation (), provide clarity terminology “adjusted predictions”, “marginal means” “marginal effects”, calculate quantities using ggeffects package. print_html() methods updated work latest release tinytable. New print_md() method, print output markdown table. useful inside RMarkdown Quarto documents, output can directly included.","code":""},{"path":"https://strengejacke.github.io/ggeffects/news/index.html","id":"ggeffects-150","dir":"Changelog","previous_headings":"","what":"ggeffects 1.5.0","title":"ggeffects 1.5.0","text":"CRAN release: 2024-02-24","code":""},{"path":"https://strengejacke.github.io/ggeffects/news/index.html","id":"new-functions-1-5-0","dir":"Changelog","previous_headings":"","what":"New functions","title":"ggeffects 1.5.0","text":"predict_response() “generic” high-level function, replacement ggpredict(), ggemmeans() ggaverage(). new function clear function marginalizes non-focal terms. margin argument can used specify marginalize non-focal terms, .e. function internally used compute marginal effects.","code":""},{"path":"https://strengejacke.github.io/ggeffects/news/index.html","id":"general-1-5-0","dir":"Changelog","previous_headings":"","what":"General","title":"ggeffects 1.5.0","text":"documentation revised, provide clarity package functions decide, function method calculate marginal effects appropriate. Improved calculation prediction intervals Poisson regression models. Improved handling vcov_fun argument. argument now accepts estimation type string, e.g. vcov_fun = \"HC0\", used compute variance-covariance matrix. Thus, longer necessary define vcov_fun vcov_type, variance-covariance matrix covered one pre-defined estimation types. See ?ggpredict details. hypothesis_test() now also accepts vcov_fun argument, vcov. ensures consistency vcov_fun argument ggpredict(). Furthermore, information type variance-covariance matrix saved ggeffects object returned ggpredict(), predict_response() etc., information available, automatically used hypothesis_test() ggeffects object passed function.","code":""},{"path":"https://strengejacke.github.io/ggeffects/news/index.html","id":"bug-fixes-1-5-0","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"ggeffects 1.5.0","text":"Fixed bug wrong order printed (sub-)tables predictions. Fixed wrong table column name confidence interval columns confidence levels default 95% print() ggeffects objects. Fixed issue ggpredict() models class fixest cluster variable numeric.","code":""},{"path":"https://strengejacke.github.io/ggeffects/news/index.html","id":"ggeffects-140","dir":"Changelog","previous_headings":"","what":"ggeffects 1.4.0","title":"ggeffects 1.4.0","text":"CRAN release: 2024-02-05","code":""},{"path":"https://strengejacke.github.io/ggeffects/news/index.html","id":"breaking-changes-1-4-0","dir":"Changelog","previous_headings":"","what":"Breaking Changes","title":"ggeffects 1.4.0","text":"print() method revised. format() method added, allows format output ggpredict() (ggeffect() etc.) printing. refactoring print() method makes code base easier maintain easier enhance print-functionality. Now possible create HTML tables well, using print_html(). style output also slightly changed. default, confidence intervals longer enclosed parentheses. can change behaviour passing ci_brackets argument print() (see examples), permanently define custom parentheses brackets , e.g., options(ggeffects_ci_brackets = c(\"[\", \"]\")). Additionally, new arguments control output tables: collapse_ci can used collapse confidence intervals single column together predicted values. collapse_tables can used collapse multiple tables single table (applies one focal term). , settings can permanently defined via options (see ?print.ggeffects details).","code":""},{"path":"https://strengejacke.github.io/ggeffects/news/index.html","id":"new-functions-1-4-0","dir":"Changelog","previous_headings":"","what":"New functions","title":"ggeffects 1.4.0","text":"print_html(), print output HTML table. method available objects ggpredict() (alike) well hypothesis_test().","code":""},{"path":"https://strengejacke.github.io/ggeffects/news/index.html","id":"general-1-4-0","dir":"Changelog","previous_headings":"","what":"General","title":"ggeffects 1.4.0","text":"new vignette added, showing examples new print-functionality.","code":""},{"path":"https://strengejacke.github.io/ggeffects/news/index.html","id":"bug-fixes-1-4-0","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"ggeffects 1.4.0","text":"Fixed issue ggpredict() models class vglm multivariate responses.","code":""},{"path":"https://strengejacke.github.io/ggeffects/news/index.html","id":"ggeffects-134","dir":"Changelog","previous_headings":"","what":"ggeffects 1.3.4","title":"ggeffects 1.3.4","text":"CRAN release: 2023-12-18","code":""},{"path":"https://strengejacke.github.io/ggeffects/news/index.html","id":"general-1-3-4","dir":"Changelog","previous_headings":"","what":"General","title":"ggeffects 1.3.4","text":"ggpredict() now supports models class rqs package quantreg. Fixed issues compatible forthcoming update emmeans.","code":""},{"path":"https://strengejacke.github.io/ggeffects/news/index.html","id":"ggeffects-133","dir":"Changelog","previous_headings":"","what":"ggeffects 1.3.3","title":"ggeffects 1.3.3","text":"CRAN release: 2023-12-15","code":""},{"path":"https://strengejacke.github.io/ggeffects/news/index.html","id":"new-functions-1-3-3","dir":"Changelog","previous_headings":"","what":"New functions","title":"ggeffects 1.3.3","text":"ggaverage(), compute average predicted values. function based marginaleffects::avg_predictons(). pool_comparisons(), pool results multiple calls hypothesis_test(), e.g. imputed data sets.","code":""},{"path":"https://strengejacke.github.io/ggeffects/news/index.html","id":"general-1-3-3","dir":"Changelog","previous_headings":"","what":"General","title":"ggeffects 1.3.3","text":"Support sdmTMB (sdmTMB) models. Improved support logistf package, including models flic() flac(). Confidence intervals predictions merMod models (package lme4) now use standard errors returned predict(..., se.fit = TRUE). affect numerical results, can robust certain edge cases. Note standard errors based predict() tpye = \"fixed\". type = \"random\", standard errors still based model’s variance-covariance matrix, taking uncertainty random effects account. hypothesis_test() now suppports models package parsnip. johnson_neyman() gains p_adjust argument, adjust p-values multiple comparisons. Currently, p_adjust = \"esarey\" (resp. p_adjust = \"es\") p_adjust = \"fdr\" (resp. p_adjust = \"bh\") supported.","code":""},{"path":"https://strengejacke.github.io/ggeffects/news/index.html","id":"bug-fixes-1-3-3","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"ggeffects 1.3.3","text":"ggpredict() now computes appropriate predicted probabilites models class rms::lrm() ordinal outcome. Fixed issue ggpredict() type = \"random\" sampling random effects levels, levels numeric characters pattern like \"001\", \"002\", etc. Fixed minor issue plot.ggalleffects(). ... arguments ggpredict() now passed predict() method mgcv::gam() models.","code":""},{"path":"https://strengejacke.github.io/ggeffects/news/index.html","id":"ggeffects-132","dir":"Changelog","previous_headings":"","what":"ggeffects 1.3.2","title":"ggeffects 1.3.2","text":"CRAN release: 2023-10-17","code":""},{"path":"https://strengejacke.github.io/ggeffects/news/index.html","id":"breaking-changes-1-3-2","dir":"Changelog","previous_headings":"","what":"Breaking changes","title":"ggeffects 1.3.2","text":"function arguments renamed, achieve consistency across package across packages ’m involved development. soft transition, .e. old argument names still work package updates.","code":""},{"path":"https://strengejacke.github.io/ggeffects/news/index.html","id":"changes-1-3-2","dir":"Changelog","previous_headings":"","what":"Changes","title":"ggeffects 1.3.2","text":"typical argument now supports mix functions different variable types numeric categorical covariates (non-focal terms) held constant. Clarification re.form argument set using type = \"random\" resp. type = \"fixed\" ggpredict(). hypothesis_test() now returns standard error contrasts pairwise comparisons attribute standard_error. can used compute test-statistic, required. forthcoming updates, methods insight::get_statistic() parameters::model_parameters() include standard errors test-statistics output. test_predictions() added alias hypothesis_test().","code":""},{"path":"https://strengejacke.github.io/ggeffects/news/index.html","id":"bug-fixes-1-3-2","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"ggeffects 1.3.2","text":"Fixed issue hypothesis_test() mixed models, sometimes failed random effects group variables numeric, factors.","code":""},{"path":"https://strengejacke.github.io/ggeffects/news/index.html","id":"ggeffects-131","dir":"Changelog","previous_headings":"","what":"ggeffects 1.3.1","title":"ggeffects 1.3.1","text":"CRAN release: 2023-09-05","code":""},{"path":"https://strengejacke.github.io/ggeffects/news/index.html","id":"new-functions-1-3-1","dir":"Changelog","previous_headings":"","what":"New functions","title":"ggeffects 1.3.1","text":"johnson_neyman(), create Johnson-Neyman intervals plots ggeffects objects.","code":""},{"path":"https://strengejacke.github.io/ggeffects/news/index.html","id":"changes-1-3-1","dir":"Changelog","previous_headings":"","what":"Changes","title":"ggeffects 1.3.1","text":"Better automatic handling offset-terms, predictions generating plots raw data. model formula contains offset-term, offset term fixed specific value, response variable now automatically transformed back original scale, offset-term added predicted values. warning printed model contains transformed offset-terms fixed, e.g. via condition argument. ggeffect() now supports nestedLogit models.","code":""},{"path":"https://strengejacke.github.io/ggeffects/news/index.html","id":"bug-fixes-1-3-1","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"ggeffects 1.3.1","text":"Fixed issue hypothesis_test(), argument work together collapse_levels argument. Fixed issue plot() method adding raw data points data frame now row names.","code":""},{"path":"https://strengejacke.github.io/ggeffects/news/index.html","id":"ggeffects-130","dir":"Changelog","previous_headings":"","what":"ggeffects 1.3.0","title":"ggeffects 1.3.0","text":"CRAN release: 2023-08-21","code":""},{"path":"https://strengejacke.github.io/ggeffects/news/index.html","id":"breaking-1-3-0","dir":"Changelog","previous_headings":"","what":"Breaking","title":"ggeffects 1.3.0","text":"avoid confusion adding raw data residuals plots, jitter argument used add noice data points avoid overlapping now defaults NULL. Formerly, small jitter added default, leading confusion data points match original data.","code":""},{"path":"https://strengejacke.github.io/ggeffects/news/index.html","id":"changes-1-3-0","dir":"Changelog","previous_headings":"","what":"Changes","title":"ggeffects 1.3.0","text":"plot() method gets label.data argument, add row names data points add.data = TRUE. tibbles always converted data frames, avoid issues. hypothesis_test() gains argument, specify variable used group comparisons contrasts. useful models interaction terms.","code":""},{"path":"https://strengejacke.github.io/ggeffects/news/index.html","id":"bug-fixes-1-3-0","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"ggeffects 1.3.0","text":"Plotting residuals work model object passed ggpredict() inside list, called inside functions (scoping issues). Fixed issue plotting raw data (.e. plot(..., add.data = TRUE)) work missing data weight variables (.e. regression model used weights). Fixes issue plot() term specified call ggpredict(). Fixed issues robust estimation models package pscl. Fixed issues introduced breaking changes marginaleffects.","code":""},{"path":"https://strengejacke.github.io/ggeffects/news/index.html","id":"ggeffects-123","dir":"Changelog","previous_headings":"","what":"ggeffects 1.2.3","title":"ggeffects 1.2.3","text":"CRAN release: 2023-06-11","code":""},{"path":"https://strengejacke.github.io/ggeffects/news/index.html","id":"general-1-2-3","dir":"Changelog","previous_headings":"","what":"General","title":"ggeffects 1.2.3","text":"Support nestedLogit (nestedLogit) models. hyothesis_test() gains scale argument, explicitely modulate scale contrasts comparisons (e.g. \"response\" \"link\", \"exp\" return transformed contrasts/comparisons). hyothesis_test() now includes response level models ordinal outcomes (alike). ggpredict() used inside functions name vector variable (passed argument function) terms used, variable now correctly recognized. Partial residuals (plot(..., residuals = TRUE)) now supports linear (mixed) models, including models package lme (gls() lme()). mixed models, type = \"random\" used calculate prediction intervals always accounted random effects variances, leading larger intervals. Using interval = \"confidence\" together type = \"random\" now allows calculate “usual” confidence intervals random effects. usefule predictions specific group levels random effects (focal terms fixed effects, use type = \"fixed\" regular confidence intervals). vcov.fun argument can now also function returns variance-covariance matrix. verbose argument ggpredict() hypothesis_test() now also toggle messages respective print() methods. print() method hypothesis_test() revised now provides details possible transformation scale comparisons contrasts. print() method now shows rows default focal term factor. rows shown output, message printed inform user truncated output. new vignette using ggeffects context intersectional multilevel analysis individual heterogeneity, using MAIHDA framework.","code":""},{"path":"https://strengejacke.github.io/ggeffects/news/index.html","id":"bug-fixes-1-2-3","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"ggeffects 1.2.3","text":"Fixed issue wrong order x-axis-labels plots focal term x-axis character vector, alphabetical order values match order predictions. Fixed issues hyothesis_test() models ordinal outcomes (alike).","code":""},{"path":"https://strengejacke.github.io/ggeffects/news/index.html","id":"ggeffects-122","dir":"Changelog","previous_headings":"","what":"ggeffects 1.2.2","title":"ggeffects 1.2.2","text":"CRAN release: 2023-05-04","code":""},{"path":"https://strengejacke.github.io/ggeffects/news/index.html","id":"general-1-2-2","dir":"Changelog","previous_headings":"","what":"General","title":"ggeffects 1.2.2","text":"Added new [.ggeffects function, allows subset ggeffects objects way regular data frames, .e. now possible : Using name vector variable terms now works inside functions. E.g., can now : colors argument plot() can now also applied single-colored plots. hyothesis_test() gains collapse_level argument, collapse term labels refer levels singel unique level string.","code":"gge <- ggpredict(model, \"x1\") gge[c(1:2)] foo <- function(data) {   fit <- lm(barthtot ~ c12hour + c172code, data = data)   v <- c(20, 50, 70)   ggpredict(fit, terms = \"c12hour [v]\") } foo(efc)"},{"path":"https://strengejacke.github.io/ggeffects/news/index.html","id":"bug-fixes-1-2-2","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"ggeffects 1.2.2","text":"Fixed issue misplaced residuals x-axis categorical factor levels alphabetical order. pool_predictions() now correctly handles models transformed response variables (like log(y)) returns correct back-transformed pooled predictions (confidence intervals). Fixed issue wrong computation confidence intervals models class clm package ordinal. Fixed failing tests due changes logistf package, now also supports emmeans. means, ggemmeans() now also works models package logistf. Fixed bug plot() partial residuals added (.e. residuals = TRUE) collapse.group provided (case mixed models). Fixed issue --fly created factors inside formulas, correctly treated factors plot() method. bug related recent changes insight::get_data(). Fixed issue wrong labels hyothesis_test() comparisons many rows, betas starting digit specified (e.g. test = \"(b1-b13)=(b3-b15)\"). Fixed issue hyothesis_test() mixed models focal terms included factors factor levels contained comma. Fixed issue missing confidence intervals mixed models one variable names contains white space characters (e.g. y ~ 'x ' + xb).","code":""},{"path":"https://strengejacke.github.io/ggeffects/news/index.html","id":"ggeffects-121","dir":"Changelog","previous_headings":"","what":"ggeffects 1.2.1","title":"ggeffects 1.2.1","text":"CRAN release: 2023-04-02","code":""},{"path":"https://strengejacke.github.io/ggeffects/news/index.html","id":"general-1-2-1","dir":"Changelog","previous_headings":"","what":"General","title":"ggeffects 1.2.1","text":"Support mblogit (mclogit), phylolm phyloglm (phylolm) models.","code":""},{"path":"https://strengejacke.github.io/ggeffects/news/index.html","id":"changes-to-functions-1-2-1","dir":"Changelog","previous_headings":"","what":"Changes to functions","title":"ggeffects 1.2.1","text":"hypothesis_test() gains equivalence argument, compute tests practical equivalence contrasts comparisons. message whether contrasts comparisons hypothesis_test() link-scale now printed table. Dot arguments (...) hypothesis_test() now passed functions marginaleffects, thereby allowing use options functions marginaleffects::predictions(), like transform etc.","code":""},{"path":"https://strengejacke.github.io/ggeffects/news/index.html","id":"bug-fixes-1-2-1","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"ggeffects 1.2.1","text":"Fixed issues hypothesis_test() mixed models one focal term , term categorical.","code":""},{"path":"https://strengejacke.github.io/ggeffects/news/index.html","id":"ggeffects-120","dir":"Changelog","previous_headings":"","what":"ggeffects 1.2.0","title":"ggeffects 1.2.0","text":"CRAN release: 2023-02-24","code":""},{"path":"https://strengejacke.github.io/ggeffects/news/index.html","id":"breaking-1-2-0","dir":"Changelog","previous_headings":"","what":"Breaking","title":"ggeffects 1.2.0","text":"Confidence intervals adjusted predictions now take model’s degrees freedom account, thereby leading slightly larger intervals models infinite degrees freedom (like linear models t-statistic).","code":""},{"path":"https://strengejacke.github.io/ggeffects/news/index.html","id":"new-functions-1-2-0","dir":"Changelog","previous_headings":"","what":"New functions","title":"ggeffects 1.2.0","text":"hypothesis_test(), compute contrasts comparisons predictions test differences statistical significance. Additionally, accompanying vignette explains new function detail added. install_latest(), install latest official package version CRAN, latest development version r-universe. .data.frame() method added, converts ggeffects objects returned ggpredict() data frame, standard column names replaced related variable names.","code":""},{"path":"https://strengejacke.github.io/ggeffects/news/index.html","id":"general-1-2-0","dir":"Changelog","previous_headings":"","what":"General","title":"ggeffects 1.2.0","text":"Response values now also back-transformed transformed using log2(), log10() log1p(). terms argument can now also named list. Thus, instead terms = c(\"score [30,50,70]\", \"status [low, middle]\") one also write terms = list(score = c(30,50,70), status = c(\"low\", \"middle\")).","code":""},{"path":"https://strengejacke.github.io/ggeffects/news/index.html","id":"ggeffects-115","dir":"Changelog","previous_headings":"","what":"ggeffects 1.1.5","title":"ggeffects 1.1.5","text":"CRAN release: 2023-01-25","code":""},{"path":"https://strengejacke.github.io/ggeffects/news/index.html","id":"general-1-1-5","dir":"Changelog","previous_headings":"","what":"General","title":"ggeffects 1.1.5","text":"Minor changes meet forthcoming update insight. ggpredict() ggemmeans() get verbose argument suppress messages warnings calling","code":""},{"path":"https://strengejacke.github.io/ggeffects/news/index.html","id":"ggeffects-114","dir":"Changelog","previous_headings":"","what":"ggeffects 1.1.4","title":"ggeffects 1.1.4","text":"CRAN release: 2022-10-23","code":""},{"path":"https://strengejacke.github.io/ggeffects/news/index.html","id":"general-1-1-4","dir":"Changelog","previous_headings":"","what":"General","title":"ggeffects 1.1.4","text":"Reduced package dependencies. Packages sjlabelled MASS moved imports suggests. ggeffects now lightweight package compute adjusted predictions estimated marginal means.","code":""},{"path":"https://strengejacke.github.io/ggeffects/news/index.html","id":"new-supported-models-1-1-4","dir":"Changelog","previous_headings":"","what":"New supported models","title":"ggeffects 1.1.4","text":"logitr (package logitr)","code":""},{"path":"https://strengejacke.github.io/ggeffects/news/index.html","id":"bug-fixes-1-1-4","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"ggeffects 1.1.4","text":"Fixed issue wrong standard errors predicting random effect groups multiple levels. Fixed issue ggemmeans(), correctly averaged character vectors hold constant. Fixed bug models class lme type = \"re\" requested.","code":""},{"path":"https://strengejacke.github.io/ggeffects/news/index.html","id":"ggeffects-113","dir":"Changelog","previous_headings":"","what":"ggeffects 1.1.3","title":"ggeffects 1.1.3","text":"CRAN release: 2022-08-07","code":""},{"path":"https://strengejacke.github.io/ggeffects/news/index.html","id":"bug-fixes-1-1-3","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"ggeffects 1.1.3","text":"Fix wrong computations predictions arm::bayesglm() models. Fix CRAN check issues.","code":""},{"path":"https://strengejacke.github.io/ggeffects/news/index.html","id":"ggeffects-112","dir":"Changelog","previous_headings":"","what":"ggeffects 1.1.2","title":"ggeffects 1.1.2","text":"CRAN release: 2022-04-10","code":""},{"path":"https://strengejacke.github.io/ggeffects/news/index.html","id":"general-1-1-2","dir":"Changelog","previous_headings":"","what":"General","title":"ggeffects 1.1.2","text":"Speed improvement models calculating uncertainty intervals predictions. Minor fixes.","code":""},{"path":"https://strengejacke.github.io/ggeffects/news/index.html","id":"ggeffects-111","dir":"Changelog","previous_headings":"","what":"ggeffects 1.1.1","title":"ggeffects 1.1.1","text":"CRAN release: 2021-07-29","code":""},{"path":"https://strengejacke.github.io/ggeffects/news/index.html","id":"changes-to-functions-1-1-1","dir":"Changelog","previous_headings":"","what":"Changes to functions","title":"ggeffects 1.1.1","text":"Add informative error message brmsfit models using mo() numeric predictors, allow predict values actually present data.","code":""},{"path":"https://strengejacke.github.io/ggeffects/news/index.html","id":"bug-fixes-1-1-1","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"ggeffects 1.1.1","text":"Fixed issue adding raw data points plots logistic regression models, response variable factor numeric levels. Fixed issues CRAN checks.","code":""},{"path":"https://strengejacke.github.io/ggeffects/news/index.html","id":"ggeffects-110","dir":"Changelog","previous_headings":"","what":"ggeffects 1.1.0","title":"ggeffects 1.1.0","text":"CRAN release: 2021-04-30","code":""},{"path":"https://strengejacke.github.io/ggeffects/news/index.html","id":"new-supported-models-1-1-0","dir":"Changelog","previous_headings":"","what":"New supported models","title":"ggeffects 1.1.0","text":"orm (package rms)","code":""},{"path":"https://strengejacke.github.io/ggeffects/news/index.html","id":"breaking-changes-1-1-0","dir":"Changelog","previous_headings":"","what":"Breaking Changes","title":"ggeffects 1.1.0","text":"Prediction intervals (possible, type = \"random\"), now always based sigma^2 (.e. insight::get_sigma(model)^2). line interval = \"prediction\" lm, predictions based simulations (type = \"simulate\"). print() now uses name focal variable column name (instead) \"x\").","code":""},{"path":"https://strengejacke.github.io/ggeffects/news/index.html","id":"new-function-1-1-0","dir":"Changelog","previous_headings":"","what":"New function","title":"ggeffects 1.1.0","text":"collapse_by_group(), generate data frame response value raw data averaged levels (random effect) grouping factor.","code":""},{"path":"https://strengejacke.github.io/ggeffects/news/index.html","id":"general-1-1-0","dir":"Changelog","previous_headings":"","what":"General","title":"ggeffects 1.1.0","text":"new vignette added related definition meaning “marginal effects” “adjusted predictions”. strict avoid confusion term “marginal effect”, meaning may vary across fields, either “marginal effects” replaced “adjusted predictions”, “adjusted predictions” added term throughout package’s documentation vignettes. Allow confidence intervals predictions conditioned random effect groups (.e. type = \"random\" terms includes random effect group factor). Predicted response values based simulate() (.e. type = \"simulate\") now possible model classes (see ?ggpredict). ggpredict() now computes confidence intervals edge cases previously failed (e.g. models compute standard errors predictions, factor included model focal term). plot() gains collapse.group argument, - conjunction add.data - averages (“collapses”) raw data levels group factors (random effects). data_grid() added common alias new_data().","code":""},{"path":"https://strengejacke.github.io/ggeffects/news/index.html","id":"bug-fixes-1-1-0","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"ggeffects 1.1.0","text":"ggpredict() plot() survival-models now always start time = 1. Fixed issue print() survival-models. Fixed issue type = \"simulate\" glmmTMB models. Fixed issue gamlss models random() function model formula. Fixed issue incorrect back-transformation predictions geeglm models.","code":""},{"path":"https://strengejacke.github.io/ggeffects/news/index.html","id":"ggeffects-102","dir":"Changelog","previous_headings":"","what":"ggeffects 1.0.2","title":"ggeffects 1.0.2","text":"CRAN release: 2021-03-17","code":""},{"path":"https://strengejacke.github.io/ggeffects/news/index.html","id":"breaking-changes-1-0-2","dir":"Changelog","previous_headings":"","what":"Breaking changes","title":"ggeffects 1.0.2","text":"residuals.type argument plot() deprecated. Always using \"working\" residuals.","code":""},{"path":"https://strengejacke.github.io/ggeffects/news/index.html","id":"general-1-0-2","dir":"Changelog","previous_headings":"","what":"General","title":"ggeffects 1.0.2","text":"pretty_range() values_at() can now also used function factories. plot() gains limit.range argument, limit range prediction bands range data.","code":""},{"path":"https://strengejacke.github.io/ggeffects/news/index.html","id":"bug-fixes-1-0-2","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"ggeffects 1.0.2","text":"Fixed issue unnecessary back-transformation log-transformed offset-terms glmmTMB models. Fixed issues plotting raw data predictor x-axis character vector. Fixed issues CRAN checks.","code":""},{"path":"https://strengejacke.github.io/ggeffects/news/index.html","id":"ggeffects-101","dir":"Changelog","previous_headings":"","what":"ggeffects 1.0.1","title":"ggeffects 1.0.1","text":"CRAN release: 2020-12-14","code":""},{"path":"https://strengejacke.github.io/ggeffects/news/index.html","id":"general-1-0-1","dir":"Changelog","previous_headings":"","what":"General","title":"ggeffects 1.0.1","text":"Fixed CRAN check issues. Added argument interval ggemmeans(), either compute confidence prediction intervals.","code":""},{"path":"https://strengejacke.github.io/ggeffects/news/index.html","id":"ggeffects-100","dir":"Changelog","previous_headings":"","what":"ggeffects 1.0.0","title":"ggeffects 1.0.0","text":"CRAN release: 2020-11-29","code":""},{"path":"https://strengejacke.github.io/ggeffects/news/index.html","id":"new-supported-models-1-0-0","dir":"Changelog","previous_headings":"","what":"New supported models","title":"ggeffects 1.0.0","text":"averaging (package MuMIn)","code":""},{"path":"https://strengejacke.github.io/ggeffects/news/index.html","id":"new-functions-1-0-0","dir":"Changelog","previous_headings":"","what":"New functions","title":"ggeffects 1.0.0","text":"pool_predictions(), pool multiple ggeffects objects. can used predicted values estimated marginal means calculated models fit multiple imputed datasets.","code":""},{"path":"https://strengejacke.github.io/ggeffects/news/index.html","id":"general-1-0-0","dir":"Changelog","previous_headings":"","what":"General","title":"ggeffects 1.0.0","text":"function residualize_over_grid() now exported. back-transformation response-variable (log- square root-transformed model) now also works square root-transformations correctly handles log1p() log(mu + x). Since standard errors link-scale back-transformed non-Gaussian models, now longer printed (avoid confusion standard errors link-scale predictions confidence intervals response-scale).","code":""},{"path":"https://strengejacke.github.io/ggeffects/news/index.html","id":"bug-fixes-1-0-0","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"ggeffects 1.0.0","text":"Fixed issue mixed models predictions conditioned random effects variances (e.g. type = \"random\" \"zi_random\"), random effects variances calculated almost zero. Fixed issue confidence intervals multinom models ggemmeans(). Fixed issue ggemmeans() models nlme. Fixed issue plot() models ggeffect(). Fixed issue computation confidence intervals zero-inflated models offset-term.","code":""},{"path":"https://strengejacke.github.io/ggeffects/news/index.html","id":"ggeffects-0160","dir":"Changelog","previous_headings":"","what":"ggeffects 0.16.0","title":"ggeffects 0.16.0","text":"CRAN release: 2020-09-13","code":""},{"path":"https://strengejacke.github.io/ggeffects/news/index.html","id":"breaking-changes-0-16-0","dir":"Changelog","previous_headings":"","what":"Breaking changes","title":"ggeffects 0.16.0","text":"Package insight since version 0.9.5 now returns “raw” (untransformed, .e. original) data used fit model also log-transformed variables. Thus, exponentiation like using terms = \"predictor [exp]\" longer necessary.","code":""},{"path":"https://strengejacke.github.io/ggeffects/news/index.html","id":"new-supported-models-0-16-0","dir":"Changelog","previous_headings":"","what":"New supported models","title":"ggeffects 0.16.0","text":"mlogit (package mlogit)","code":""},{"path":"https://strengejacke.github.io/ggeffects/news/index.html","id":"general-0-16-0","dir":"Changelog","previous_headings":"","what":"General","title":"ggeffects 0.16.0","text":"plot() now can also create partial residuals plots. , arguments residuals, residuals.type residuals.line added add partial residuals, type residuals possible loess-fit regression line residual data.","code":""},{"path":"https://strengejacke.github.io/ggeffects/news/index.html","id":"bug-fixes-0-16-0","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"ggeffects 0.16.0","text":"message models back-transformation response scale (non-Gaussian models), standard errors still link-scale, show models class glm since time. fixed now. Fixed issue ggpredict() rlmerMods models using factors adjusted terms. Fixed issue brms-multi-response models.","code":""},{"path":"https://strengejacke.github.io/ggeffects/news/index.html","id":"ggeffects-0151","dir":"Changelog","previous_headings":"","what":"ggeffects 0.15.1","title":"ggeffects 0.15.1","text":"CRAN release: 2020-07-27","code":""},{"path":"https://strengejacke.github.io/ggeffects/news/index.html","id":"new-supported-models-0-15-1","dir":"Changelog","previous_headings":"","what":"New supported models","title":"ggeffects 0.15.1","text":"mclogit (package mclogit)","code":""},{"path":"https://strengejacke.github.io/ggeffects/news/index.html","id":"bug-fixes-0-15-1","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"ggeffects 0.15.1","text":"Fixed issues due latest rstanarm update. Fixed issues around categorical/cumulative brms models outcome numeric. Fixed bug factor level ordering plotting raw data ggeffect().","code":""},{"path":"https://strengejacke.github.io/ggeffects/news/index.html","id":"ggeffects-0150","dir":"Changelog","previous_headings":"","what":"ggeffects 0.15.0","title":"ggeffects 0.15.0","text":"CRAN release: 2020-06-16","code":""},{"path":"https://strengejacke.github.io/ggeffects/news/index.html","id":"changes-to-functions-0-15-0","dir":"Changelog","previous_headings":"","what":"Changes to functions","title":"ggeffects 0.15.0","text":"ggpredict() gets new type-option, \"zi.prob\", predict zero-inflation probability (models pscl, glmmTMB GLMMadaptive). model log-transformed response variable add.data = TRUE plot(), raw data points also transformed accordingly. plot() add.data = TRUE first adds layer raw data, points / lines marginal effects, raw data points overlay predicted values. terms-argument now also accepts name variable define specific values. See vignette Marginal Effects Specific Values.","code":""},{"path":"https://strengejacke.github.io/ggeffects/news/index.html","id":"bug-fixes-0-15-0","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"ggeffects 0.15.0","text":"Fix issues cluster-robust variance-covariance estimation vcov.type specified.","code":""},{"path":"https://strengejacke.github.io/ggeffects/news/index.html","id":"ggeffects-0143","dir":"Changelog","previous_headings":"","what":"ggeffects 0.14.3","title":"ggeffects 0.14.3","text":"CRAN release: 2020-04-20","code":""},{"path":"https://strengejacke.github.io/ggeffects/news/index.html","id":"general-0-14-3","dir":"Changelog","previous_headings":"","what":"General","title":"ggeffects 0.14.3","text":"Fixed issues due changes CRAN packages.","code":""},{"path":"https://strengejacke.github.io/ggeffects/news/index.html","id":"ggeffects-0142","dir":"Changelog","previous_headings":"","what":"ggeffects 0.14.2","title":"ggeffects 0.14.2","text":"CRAN release: 2020-03-14","code":""},{"path":"https://strengejacke.github.io/ggeffects/news/index.html","id":"general-0-14-2","dir":"Changelog","previous_headings":"","what":"General","title":"ggeffects 0.14.2","text":"ggeffects now requires glmmTMB version 1.0.0 higher. Added human-readable alias-options type-argument.","code":""},{"path":"https://strengejacke.github.io/ggeffects/news/index.html","id":"bug-fixes-0-14-2","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"ggeffects 0.14.2","text":"Fixed issue log-transformed predictors held constant typical value negative. Fixed issue plotting raw data plot categorical predictor x-axis, numeric factor levels start 1. Fixed issues model objects used (log) transformed offset() terms.","code":""},{"path":"https://strengejacke.github.io/ggeffects/news/index.html","id":"ggeffects-0141","dir":"Changelog","previous_headings":"","what":"ggeffects 0.14.1","title":"ggeffects 0.14.1","text":"CRAN release: 2020-01-28","code":""},{"path":"https://strengejacke.github.io/ggeffects/news/index.html","id":"general-0-14-1","dir":"Changelog","previous_headings":"","what":"General","title":"ggeffects 0.14.1","text":"Reduce package dependencies. New package-vignette (Cluster) Robust Standard Errors.","code":""},{"path":"https://strengejacke.github.io/ggeffects/news/index.html","id":"new-supported-models-0-14-1","dir":"Changelog","previous_headings":"","what":"New supported models","title":"ggeffects 0.14.1","text":"mixor (package mixor), cgam, cgamm (package cgam)","code":""},{"path":"https://strengejacke.github.io/ggeffects/news/index.html","id":"bug-fixes-0-14-1","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"ggeffects 0.14.1","text":"Fix CRAN check issues due latest emmeans update.","code":""},{"path":"https://strengejacke.github.io/ggeffects/news/index.html","id":"ggeffects-0140","dir":"Changelog","previous_headings":"","what":"ggeffects 0.14.0","title":"ggeffects 0.14.0","text":"CRAN release: 2019-12-16","code":""},{"path":"https://strengejacke.github.io/ggeffects/news/index.html","id":"breaking-changes-0-14-0","dir":"Changelog","previous_headings":"","what":"Breaking Changes","title":"ggeffects 0.14.0","text":"argument x..factor considered less useful removed.","code":""},{"path":"https://strengejacke.github.io/ggeffects/news/index.html","id":"new-supported-models-0-14-0","dir":"Changelog","previous_headings":"","what":"New supported models","title":"ggeffects 0.14.0","text":"fixest (package fixest), glmx (package glmx).","code":""},{"path":"https://strengejacke.github.io/ggeffects/news/index.html","id":"general-0-14-0","dir":"Changelog","previous_headings":"","what":"General","title":"ggeffects 0.14.0","text":"Reduce package dependencies. plot(rawdata = TRUE) now also works objects ggemmeans(). ggpredict() now computes confidence intervals predictions geeglm models. brmsfit models trials() response variable, ggpredict() used choose median value trials response hold constant. Now, can use condition-argument hold number trials constant different values. Improve print().","code":""},{"path":"https://strengejacke.github.io/ggeffects/news/index.html","id":"bug-fixes-0-14-0","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"ggeffects 0.14.0","text":"Fixed issue clmm-models, group factor random effects numeric. Raw data longer omitted plots grouping variable continuous added raw data doesn’t numerically match grouping levels (e.g., mean +/- one standard deviation). Fix CRAN check issues due latest geepack update.","code":""},{"path":"https://strengejacke.github.io/ggeffects/news/index.html","id":"ggeffects-0130","dir":"Changelog","previous_headings":"","what":"ggeffects 0.13.0","title":"ggeffects 0.13.0","text":"CRAN release: 2019-11-08","code":""},{"path":"https://strengejacke.github.io/ggeffects/news/index.html","id":"breaking-changes-0-13-0","dir":"Changelog","previous_headings":"","what":"Breaking Changes","title":"ggeffects 0.13.0","text":"use emm() discouraged, removed.","code":""},{"path":"https://strengejacke.github.io/ggeffects/news/index.html","id":"new-supported-models-0-13-0","dir":"Changelog","previous_headings":"","what":"New supported models","title":"ggeffects 0.13.0","text":"bracl, brmultinom (package brglm2) models packages bamlss R2BayesX.","code":""},{"path":"https://strengejacke.github.io/ggeffects/news/index.html","id":"general-0-13-0","dir":"Changelog","previous_headings":"","what":"General","title":"ggeffects 0.13.0","text":"Updated package dependencies. plot() now uses dodge-position raw data categorical x-axis, align raw data points points error bars geoms predictions. Updated re-arranged internal color palette, especially better behaviour selecting colors continuous palettes (see show_pals()).","code":""},{"path":"https://strengejacke.github.io/ggeffects/news/index.html","id":"new-functions-0-13-0","dir":"Changelog","previous_headings":"","what":"New functions","title":"ggeffects 0.13.0","text":"Added vcov() function calculate variance-covariance matrix marginal effects.","code":""},{"path":"https://strengejacke.github.io/ggeffects/news/index.html","id":"changes-to-functions-0-13-0","dir":"Changelog","previous_headings":"","what":"Changes to Functions","title":"ggeffects 0.13.0","text":"ggemmeans() now also accepts type = \"re\" type = \"re.zi\", add random effects variances prediction intervals mixed models. ellipses-argument ... now passed predict()-method gamlss-objects, predictions can computed sigma, nu tau well.","code":""},{"path":"https://strengejacke.github.io/ggeffects/news/index.html","id":"bug-fixes-0-13-0","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"ggeffects 0.13.0","text":"Fixed issue wrong order plot x-axis ggeffect(), one term character vector.","code":""},{"path":"https://strengejacke.github.io/ggeffects/news/index.html","id":"ggeffects-0120","dir":"Changelog","previous_headings":"","what":"ggeffects 0.12.0","title":"ggeffects 0.12.0","text":"CRAN release: 2019-09-03","code":""},{"path":"https://strengejacke.github.io/ggeffects/news/index.html","id":"breaking-changes-0-12-0","dir":"Changelog","previous_headings":"","what":"Breaking Changes","title":"ggeffects 0.12.0","text":"use ggaverage() discouraged, removed. name rprs_values() now deprecated, function named values_at(), alias representative_values(). x..factor-argument defaults TRUE.","code":""},{"path":"https://strengejacke.github.io/ggeffects/news/index.html","id":"general-0-12-0","dir":"Changelog","previous_headings":"","what":"General","title":"ggeffects 0.12.0","text":"ggpredict() now supports cumulative link ordinal vglm models package VGAM. informative error message clmm-models terms included random effects. add.data alias rawdata-argument plot(). ggpredict() ggemmeans() now also support predictions gam models ziplss family.","code":""},{"path":"https://strengejacke.github.io/ggeffects/news/index.html","id":"changes-to-functions-0-12-0","dir":"Changelog","previous_headings":"","what":"Changes to Functions","title":"ggeffects 0.12.0","text":"Improved print()-method ordinal cumulative link models. plot()-method longer changes order factor levels groups facets. pretty_data() gets length() argument define length intervals returned.","code":""},{"path":"https://strengejacke.github.io/ggeffects/news/index.html","id":"bug-fixes-0-12-0","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"ggeffects 0.12.0","text":"Added “population level” output print-method lme objects. Fixed issue correct identification gamm/gamm4 models. Fixed issue weighted regression models brms. Fixed broken tests due changes forthcoming effects update.","code":""},{"path":"https://strengejacke.github.io/ggeffects/news/index.html","id":"ggeffects-0110","dir":"Changelog","previous_headings":"","what":"ggeffects 0.11.0","title":"ggeffects 0.11.0","text":"CRAN release: 2019-07-01","code":""},{"path":"https://strengejacke.github.io/ggeffects/news/index.html","id":"general-0-11-0","dir":"Changelog","previous_headings":"","what":"General","title":"ggeffects 0.11.0","text":"Revised docs vignettes - use term average marginal effects replaced less misleading wording, since functions ggeffects calculate marginal effects mean representative values, average marginal effects. Replace references internal vignettes docstrings website-vignettes, links website longer broken. values_at() alias rprs_values().","code":""},{"path":"https://strengejacke.github.io/ggeffects/news/index.html","id":"new-supported-models-0-11-0","dir":"Changelog","previous_headings":"","what":"New supported models","title":"ggeffects 0.11.0","text":"betabin, negbin (package aod), wbm (package panelr)","code":""},{"path":"https://strengejacke.github.io/ggeffects/news/index.html","id":"changes-to-functions-0-11-0","dir":"Changelog","previous_headings":"","what":"Changes to functions","title":"ggeffects 0.11.0","text":"ggpredict() now supports prediction intervals models MCMCglmm. ggpredict() gets back.transform-argument, tranform predicted values log-transformed responses back original scale (default behaviour), allow predictions remain log-scale (new). ggpredict() ggemmeans() now can calculate marginal effects specific values three terms (.e. terms can lenght four now). ci.style-argument plot() now also applies error bars categorical variables x-axis.","code":""},{"path":"https://strengejacke.github.io/ggeffects/news/index.html","id":"bug-fixes-0-11-0","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"ggeffects 0.11.0","text":"Fixed issue glmmTMB models included model weights.","code":""},{"path":"https://strengejacke.github.io/ggeffects/news/index.html","id":"ggeffects-0100","dir":"Changelog","previous_headings":"","what":"ggeffects 0.10.0","title":"ggeffects 0.10.0","text":"CRAN release: 2019-05-13","code":""},{"path":"https://strengejacke.github.io/ggeffects/news/index.html","id":"general-0-10-0","dir":"Changelog","previous_headings":"","what":"General","title":"ggeffects 0.10.0","text":"Better support, including confidence intervals, already supported model types. New package-vignette Logistic Mixed Effects Model Interaction Term.","code":""},{"path":"https://strengejacke.github.io/ggeffects/news/index.html","id":"new-supported-models-0-10-0","dir":"Changelog","previous_headings":"","what":"New supported models","title":"ggeffects 0.10.0","text":"gamlss, geeglm (package geepack), lmrob glmrob (package robustbase), ols (package rms), rlmer (package robustlmm), rq rqss (package quantreg), tobit (package AER), survreg (package survival)","code":""},{"path":"https://strengejacke.github.io/ggeffects/news/index.html","id":"changes-to-functions-0-10-0","dir":"Changelog","previous_headings":"","what":"Changes to functions","title":"ggeffects 0.10.0","text":"steps specifying range values (e.g. terms = \"predictor [1:10]\") can now changed , e.g. terms = \"predictor [1:10 =.5]\" (see also vignette Marginal Effects Specific Values). Robust standard errors predictions (see argument vcov.fun ggpredict()) now also works following model-objects: coxph, plm, polr (probably also lme gls, tested yet). ggpredict() gets interval-argument, compute prediction intervals instead confidence intervals. plot.ggeffects() now allows different horizontal vertical jittering rawdata jitter numeric vector length two.","code":""},{"path":"https://strengejacke.github.io/ggeffects/news/index.html","id":"bug-fixes-0-10-0","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"ggeffects 0.10.0","text":"Models AsIs-conversion division two variables dependent variable, e.g. (amount/frequency), now work. ggpredict() failed MixMod-objects ci.lvl=NA.","code":""}]
