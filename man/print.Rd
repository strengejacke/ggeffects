% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/format.R, R/print.R
\name{format.ggeffects}
\alias{format.ggeffects}
\alias{print}
\alias{print.ggeffects}
\alias{print_html.ggeffects}
\title{Print and format ggeffects-objects}
\usage{
\method{format}{ggeffects}(
  x,
  variable_labels = FALSE,
  value_labels = FALSE,
  group_name = FALSE,
  row_header_separator = ", ",
  digits = 2,
  collapse_ci = FALSE,
  n,
  ...
)

\method{print}{ggeffects}(x, group_name = TRUE, digits = 2, verbose = TRUE, ...)

\method{print_html}{ggeffects}(x, group_name = TRUE, digits = 2, ...)
}
\arguments{
\item{x}{An object of class \code{ggeffects}, as returned by the functions
from this package.}

\item{variable_labels}{Logical, if \code{TRUE} variable labels are used as column
headers. If \code{FALSE}, variable names are used.}

\item{value_labels}{Logical, if \code{TRUE}, value labels are used as values in
the table output. If \code{FALSE}, the numeric values or factor levels are used.}

\item{group_name}{Logical, if \code{TRUE}, the name of further focal terms are
used in the sub-headings of the table. If \code{FALSE}, only the values of the
focal terms are used.}

\item{row_header_separator}{Character, separator between the different
subgroups in the table output.}

\item{digits}{Number of digits to print.}

\item{collapse_ci}{Logical, if \code{TRUE}, the columns with predicted values and
confidence intervals are collapsed into one column, e.g. \verb{Predicted (95\% CI)}.}

\item{n}{Number of rows to print per subgroup. If \code{NULL}, a default number
of rows is printed, depending on the number of subgroups.}

\item{...}{Further arguments passed down to \code{\link[=format.ggeffects]{format.ggeffects()}}, some of
them are also passed down further to \code{\link[insight:format_table]{insight::format_table()}} or
\code{\link[insight:format_value]{insight::format_value()}}.}

\item{verbose}{Toggle messages.}
}
\value{
\code{format()} return a formatted data frame, \code{print()}prints a formatted
data frame printed to the console. \code{print_html()} returns a \code{tinytable}
object, which is printed as HTML, markdown or LaTeX table (depending on the
context from which \code{print_html()} is called, see \code{\link[tinytable:tt]{tinytable::tt()}} for
details).
}
\description{
A generic print-method for \code{ggeffects}-objects.
}
\section{Global Options to Customize Tables when Printing}{

The \code{verbose} argument can be used to display or silence messages and
warnings. Furthermore, \code{options()} can be used to set defaults for the
\code{print()} and \code{print_html()} method. The following options are available:
\itemize{
\item \code{ggeffects_ci_brackets}: Define a character vector of length two, indicating
the opening and closing parentheses that encompass the confidence intervals
values, e.g. \code{options(ggeffects_ci_brackets = c("[", "]"))}.
\item \code{ggeffects_collapse_ci}: Logical, if \code{TRUE}, the columns with predicted
values and confidence intervals are collapsed into one column.
}
}

\examples{
\dontshow{if (requireNamespace("datawizard", quietly = TRUE)) (if (getRversion() >= "3.4") withAutoprint else force)(\{ # examplesIf}
data(efc, package = "ggeffects")
fit <- lm(barthtot ~ c12hour + e42dep, data = efc)

# default print
ggpredict(fit, "e42dep")

# surround CI values with parentheses
print(ggpredict(fit, "e42dep"), ci_brackets = c("(", ")"))
# you can also use `options(ggeffects_ci_brackets = c("[", "]"))`
# to set this globally

# collapse CI columns into column with predicted values
print(ggpredict(fit, "e42dep"), collapse_ci = TRUE)

# include value labels
print(ggpredict(fit, "e42dep"), value_labels = TRUE)

# include variable labels in column headers
print(ggpredict(fit, "e42dep"), variable_labels = TRUE)

# include value labels and variable labels
print(ggpredict(fit, "e42dep"), variable_labels = TRUE, value_labels = TRUE)

data(iris)
m <- lm(Sepal.Length ~ Species * Petal.Length, data = iris)

# default print with subgroups
ggpredict(m, c("Petal.Length", "Species"))

# omit name of grouping variable in subgroup table headers
print(ggpredict(m, c("Petal.Length", "Species")), group_name = FALSE)

# increase number of digits
print(ggpredict(fit, "e42dep"), digits = 5)
\dontshow{\}) # examplesIf}
}
